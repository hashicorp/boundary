// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: controller/api/resources/credentialstores/v1/credential_store.proto

package credentialstores

import (
	scopes "github.com/hashicorp/boundary/sdk/pbs/controller/api/resources/scopes"
	_ "github.com/hashicorp/boundary/sdk/pbs/controller/protooptions"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CredentialStore contains all fields related to an Credential Store resource
type CredentialStore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The ID of the Credential Store.
	Id string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty" class:"public"` // @gotags: `class:"public"`
	// The ID of the Scope of which this Credential Store is a part.
	ScopeId string `protobuf:"bytes,20,opt,name=scope_id,proto3" json:"scope_id,omitempty" class:"public"` // @gotags: `class:"public"`
	// Output only. Scope information for this Credential Store.
	Scope *scopes.ScopeInfo `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
	// Optional name for identification purposes.
	Name *wrapperspb.StringValue `protobuf:"bytes,40,opt,name=name,proto3" json:"name,omitempty" class:"public"` // @gotags: `class:"public"`
	// Optional user-set description for identification purposes.
	Description *wrapperspb.StringValue `protobuf:"bytes,50,opt,name=description,proto3" json:"description,omitempty" class:"public"` // @gotags: `class:"public"`
	// Output only. The time this resource was created.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,60,opt,name=created_time,proto3" json:"created_time,omitempty" class:"public"` // @gotags: `class:"public"`
	// Output only. The time this resource was last updated.
	UpdatedTime *timestamppb.Timestamp `protobuf:"bytes,70,opt,name=updated_time,proto3" json:"updated_time,omitempty" class:"public"` // @gotags: `class:"public"`
	// Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.
	// The mutation will fail if the version does not match the latest known good version.
	Version uint32 `protobuf:"varint,80,opt,name=version,proto3" json:"version,omitempty" class:"public"` // @gotags: `class:"public"`
	// The Credential Store type.
	Type string `protobuf:"bytes,90,opt,name=type,proto3" json:"type,omitempty" class:"public"` // @gotags: `class:"public"`
	// Types that are valid to be assigned to Attrs:
	//
	//	*CredentialStore_Attributes
	//	*CredentialStore_VaultCredentialStoreAttributes
	Attrs isCredentialStore_Attrs `protobuf_oneof:"attrs"`
	// Output only. The available actions on this resource for this user.
	AuthorizedActions []string `protobuf:"bytes,300,rep,name=authorized_actions,proto3" json:"authorized_actions,omitempty" class:"public"` // @gotags: `class:"public"`
	// Output only. The authorized actions for the scope's collections.
	AuthorizedCollectionActions map[string]*structpb.ListValue `protobuf:"bytes,310,rep,name=authorized_collection_actions,proto3" json:"authorized_collection_actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // classified as public via taggable implementation
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CredentialStore) Reset() {
	*x = CredentialStore{}
	mi := &file_controller_api_resources_credentialstores_v1_credential_store_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialStore) ProtoMessage() {}

func (x *CredentialStore) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_resources_credentialstores_v1_credential_store_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialStore.ProtoReflect.Descriptor instead.
func (*CredentialStore) Descriptor() ([]byte, []int) {
	return file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescGZIP(), []int{0}
}

func (x *CredentialStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CredentialStore) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *CredentialStore) GetScope() *scopes.ScopeInfo {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *CredentialStore) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CredentialStore) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CredentialStore) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *CredentialStore) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

func (x *CredentialStore) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CredentialStore) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CredentialStore) GetAttrs() isCredentialStore_Attrs {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *CredentialStore) GetAttributes() *structpb.Struct {
	if x != nil {
		if x, ok := x.Attrs.(*CredentialStore_Attributes); ok {
			return x.Attributes
		}
	}
	return nil
}

func (x *CredentialStore) GetVaultCredentialStoreAttributes() *VaultCredentialStoreAttributes {
	if x != nil {
		if x, ok := x.Attrs.(*CredentialStore_VaultCredentialStoreAttributes); ok {
			return x.VaultCredentialStoreAttributes
		}
	}
	return nil
}

func (x *CredentialStore) GetAuthorizedActions() []string {
	if x != nil {
		return x.AuthorizedActions
	}
	return nil
}

func (x *CredentialStore) GetAuthorizedCollectionActions() map[string]*structpb.ListValue {
	if x != nil {
		return x.AuthorizedCollectionActions
	}
	return nil
}

type isCredentialStore_Attrs interface {
	isCredentialStore_Attrs()
}

type CredentialStore_Attributes struct {
	// The attributes that are applicable for the specific Credential Store type.
	Attributes *structpb.Struct `protobuf:"bytes,100,opt,name=attributes,proto3,oneof"`
}

type CredentialStore_VaultCredentialStoreAttributes struct {
	VaultCredentialStoreAttributes *VaultCredentialStoreAttributes `protobuf:"bytes,101,opt,name=vault_credential_store_attributes,json=vaultCredentialStoreAttributes,proto3,oneof"`
}

func (*CredentialStore_Attributes) isCredentialStore_Attrs() {}

func (*CredentialStore_VaultCredentialStoreAttributes) isCredentialStore_Attrs() {}

// The attributes of a vault typed Credential Store.
type VaultCredentialStoreAttributes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The complete url address of vault.
	Address *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty" class:"public"` // @gotags: `class:"public"`
	// The namespace of vault used by this store
	Namespace *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=namespace,proto3" json:"namespace,omitempty" class:"public"` // @gotags: `class:"public"`
	// The PEM encoded CA cert to verify the vault server's ssl certificate
	CaCert *wrapperspb.StringValue `protobuf:"bytes,30,opt,name=ca_cert,proto3" json:"ca_cert,omitempty" class:"public"` // @gotags: `class:"public"`
	// The value to use as the SNI host when connecting to vault via TLS.
	TlsServerName *wrapperspb.StringValue `protobuf:"bytes,40,opt,name=tls_server_name,proto3" json:"tls_server_name,omitempty" class:"public"` // @gotags: `class:"public"`
	// When set to true verification of the TLS certificate is disabled.
	TlsSkipVerify *wrapperspb.BoolValue `protobuf:"bytes,50,opt,name=tls_skip_verify,proto3" json:"tls_skip_verify,omitempty" class:"public"` // @gotags: `class:"public"`
	// Input only. The current vault token used by this credential store for creating new credentials.
	Token *wrapperspb.StringValue `protobuf:"bytes,60,opt,name=token,proto3" json:"token,omitempty" class:"secret"` // @gotags: `class:"secret"`
	// Output only. The hmac value of the vault token used by this credential store.
	TokenHmac string `protobuf:"bytes,70,opt,name=token_hmac,proto3" json:"token_hmac,omitempty" class:"public"` // @gotags: `class:"public"`
	// Input only. A PEM encoded client certificate for vault with an
	// optional private key included in the bundle.  It is an error to include
	// the private key in this bundle as well as setting the certificate_key
	// field.
	ClientCertificate *wrapperspb.StringValue `protobuf:"bytes,80,opt,name=client_certificate,proto3" json:"client_certificate,omitempty" class:"secret"` // @gotags: `class:"secret"`
	// Input only. A client certificate private key.
	ClientCertificateKey *wrapperspb.StringValue `protobuf:"bytes,90,opt,name=client_certificate_key,proto3" json:"client_certificate_key,omitempty" class:"secret"` // @gotags: `class:"secret"`
	// Output only. The hmac value of the private key used by the credential store.
	ClientCertificateKeyHmac string `protobuf:"bytes,100,opt,name=client_certificate_key_hmac,proto3" json:"client_certificate_key_hmac,omitempty" class:"public"` // @gotags: `class:"public"`
	// worker_filter is optional. Filters to the worker(s) who can handle Vault requests for this cred store
	WorkerFilter *wrapperspb.StringValue `protobuf:"bytes,110,opt,name=worker_filter,proto3" json:"worker_filter,omitempty" class:"public"` // @gotags: `class:"public"`
	// Output only. The status of the vault token used by this credential store (current or expired).
	TokenStatus   string `protobuf:"bytes,120,opt,name=token_status,proto3" json:"token_status,omitempty" class:"public"` // @gotags: `class:"public"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultCredentialStoreAttributes) Reset() {
	*x = VaultCredentialStoreAttributes{}
	mi := &file_controller_api_resources_credentialstores_v1_credential_store_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultCredentialStoreAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultCredentialStoreAttributes) ProtoMessage() {}

func (x *VaultCredentialStoreAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_resources_credentialstores_v1_credential_store_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultCredentialStoreAttributes.ProtoReflect.Descriptor instead.
func (*VaultCredentialStoreAttributes) Descriptor() ([]byte, []int) {
	return file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescGZIP(), []int{1}
}

func (x *VaultCredentialStoreAttributes) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetCaCert() *wrapperspb.StringValue {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetTlsServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.TlsServerName
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetTlsSkipVerify() *wrapperspb.BoolValue {
	if x != nil {
		return x.TlsSkipVerify
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetTokenHmac() string {
	if x != nil {
		return x.TokenHmac
	}
	return ""
}

func (x *VaultCredentialStoreAttributes) GetClientCertificate() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetClientCertificateKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientCertificateKey
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetClientCertificateKeyHmac() string {
	if x != nil {
		return x.ClientCertificateKeyHmac
	}
	return ""
}

func (x *VaultCredentialStoreAttributes) GetWorkerFilter() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkerFilter
	}
	return nil
}

func (x *VaultCredentialStoreAttributes) GetTokenStatus() string {
	if x != nil {
		return x.TokenStatus
	}
	return ""
}

var File_controller_api_resources_credentialstores_v1_credential_store_proto protoreflect.FileDescriptor

const file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDesc = "" +
	"\n" +
	"Ccontroller/api/resources/credentialstores/v1/credential_store.proto\x12,controller.api.resources.credentialstores.v1\x1a.controller/api/resources/scopes/v1/scope.proto\x1a*controller/custom_options/v1/options.proto\x1a\x1bgoogle/api/visibility.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xb1\b\n" +
	"\x0fCredentialStore\x12\x0e\n" +
	"\x02id\x18\n" +
	" \x01(\tR\x02id\x12\x1a\n" +
	"\bscope_id\x18\x14 \x01(\tR\bscope_id\x12C\n" +
	"\x05scope\x18\x1e \x01(\v2-.controller.api.resources.scopes.v1.ScopeInfoR\x05scope\x12F\n" +
	"\x04name\x18( \x01(\v2\x1c.google.protobuf.StringValueB\x14\xa0\xda)\x01\xc2\xdd)\f\n" +
	"\x04name\x12\x04NameR\x04name\x12b\n" +
	"\vdescription\x182 \x01(\v2\x1c.google.protobuf.StringValueB\"\xa0\xda)\x01\xc2\xdd)\x1a\n" +
	"\vdescription\x12\vDescriptionR\vdescription\x12>\n" +
	"\fcreated_time\x18< \x01(\v2\x1a.google.protobuf.TimestampR\fcreated_time\x12>\n" +
	"\fupdated_time\x18F \x01(\v2\x1a.google.protobuf.TimestampR\fupdated_time\x12\x18\n" +
	"\aversion\x18P \x01(\rR\aversion\x12\x12\n" +
	"\x04type\x18Z \x01(\tR\x04type\x12J\n" +
	"\n" +
	"attributes\x18d \x01(\v2\x17.google.protobuf.StructB\x0f\xa0\xda)\x01\x9a\xe3)\adefaultH\x00R\n" +
	"attributes\x12\xb8\x01\n" +
	"!vault_credential_store_attributes\x18e \x01(\v2L.controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributesB\x1d\xa0\xda)\x01\x9a\xe3)\x05vault\xfa\xd2\xe4\x93\x02\n" +
	"\x12\bINTERNALH\x00R\x1evaultCredentialStoreAttributes\x12/\n" +
	"\x12authorized_actions\x18\xac\x02 \x03(\tR\x12authorized_actions\x12\xa5\x01\n" +
	"\x1dauthorized_collection_actions\x18\xb6\x02 \x03(\v2^.controller.api.resources.credentialstores.v1.CredentialStore.AuthorizedCollectionActionsEntryR\x1dauthorized_collection_actions\x1aj\n" +
	" AuthorizedCollectionActionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.ListValueR\x05value:\x028\x01B\a\n" +
	"\x05attrs\"\xad\t\n" +
	"\x1eVaultCredentialStoreAttributes\x12b\n" +
	"\aaddress\x18\n" +
	" \x01(\v2\x1c.google.protobuf.StringValueB*\xa0\xda)\x01\xc2\xdd)\"\n" +
	"\x12attributes.address\x12\fVaultAddressR\aaddress\x12e\n" +
	"\tnamespace\x18\x14 \x01(\v2\x1c.google.protobuf.StringValueB)\xa0\xda)\x01\xc2\xdd)!\n" +
	"\x14attributes.namespace\x12\tNamespaceR\tnamespace\x12\\\n" +
	"\aca_cert\x18\x1e \x01(\v2\x1c.google.protobuf.StringValueB$\xa0\xda)\x01\xc2\xdd)\x1c\n" +
	"\x12attributes.ca_cert\x12\x06CaCertR\aca_cert\x12{\n" +
	"\x0ftls_server_name\x18( \x01(\v2\x1c.google.protobuf.StringValueB3\xa0\xda)\x01\xc2\xdd)+\n" +
	"\x1aattributes.tls_server_name\x12\rTlsServerNameR\x0ftls_server_name\x12y\n" +
	"\x0ftls_skip_verify\x182 \x01(\v2\x1a.google.protobuf.BoolValueB3\xa0\xda)\x01\xc2\xdd)+\n" +
	"\x1aattributes.tls_skip_verify\x12\rTlsSkipVerifyR\x0ftls_skip_verify\x12U\n" +
	"\x05token\x18< \x01(\v2\x1c.google.protobuf.StringValueB!\xa0\xda)\x01\xc2\xdd)\x19\n" +
	"\x10attributes.token\x12\x05TokenR\x05token\x12\x1e\n" +
	"\n" +
	"token_hmac\x18F \x01(\tR\n" +
	"token_hmac\x12\x82\x01\n" +
	"\x12client_certificate\x18P \x01(\v2\x1c.google.protobuf.StringValueB4\xa0\xda)\x01\xc2\xdd),\n" +
	"\x1dattributes.client_certificate\x12\vCertificateR\x12client_certificate\x12\x91\x01\n" +
	"\x16client_certificate_key\x18Z \x01(\v2\x1c.google.protobuf.StringValueB;\xa0\xda)\x01\xc2\xdd)3\n" +
	"!attributes.client_certificate_key\x12\x0eCertificateKeyR\x16client_certificate_key\x12@\n" +
	"\x1bclient_certificate_key_hmac\x18d \x01(\tR\x1bclient_certificate_key_hmac\x12t\n" +
	"\rworker_filter\x18n \x01(\v2\x1c.google.protobuf.StringValueB0\xa0\xda)\x01\xc2\xdd)(\n" +
	"\x18attributes.worker_filter\x12\fWorkerFilterR\rworker_filter\x12\"\n" +
	"\ftoken_status\x18x \x01(\tR\ftoken_statusBbZ`github.com/hashicorp/boundary/sdk/pbs/controller/api/resources/credentialstores;credentialstoresb\x06proto3"

var (
	file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescOnce sync.Once
	file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescData []byte
)

func file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescGZIP() []byte {
	file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescOnce.Do(func() {
		file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDesc), len(file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDesc)))
	})
	return file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDescData
}

var file_controller_api_resources_credentialstores_v1_credential_store_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_controller_api_resources_credentialstores_v1_credential_store_proto_goTypes = []any{
	(*CredentialStore)(nil),                // 0: controller.api.resources.credentialstores.v1.CredentialStore
	(*VaultCredentialStoreAttributes)(nil), // 1: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes
	nil,                                    // 2: controller.api.resources.credentialstores.v1.CredentialStore.AuthorizedCollectionActionsEntry
	(*scopes.ScopeInfo)(nil),               // 3: controller.api.resources.scopes.v1.ScopeInfo
	(*wrapperspb.StringValue)(nil),         // 4: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),          // 5: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                // 6: google.protobuf.Struct
	(*wrapperspb.BoolValue)(nil),           // 7: google.protobuf.BoolValue
	(*structpb.ListValue)(nil),             // 8: google.protobuf.ListValue
}
var file_controller_api_resources_credentialstores_v1_credential_store_proto_depIdxs = []int32{
	3,  // 0: controller.api.resources.credentialstores.v1.CredentialStore.scope:type_name -> controller.api.resources.scopes.v1.ScopeInfo
	4,  // 1: controller.api.resources.credentialstores.v1.CredentialStore.name:type_name -> google.protobuf.StringValue
	4,  // 2: controller.api.resources.credentialstores.v1.CredentialStore.description:type_name -> google.protobuf.StringValue
	5,  // 3: controller.api.resources.credentialstores.v1.CredentialStore.created_time:type_name -> google.protobuf.Timestamp
	5,  // 4: controller.api.resources.credentialstores.v1.CredentialStore.updated_time:type_name -> google.protobuf.Timestamp
	6,  // 5: controller.api.resources.credentialstores.v1.CredentialStore.attributes:type_name -> google.protobuf.Struct
	1,  // 6: controller.api.resources.credentialstores.v1.CredentialStore.vault_credential_store_attributes:type_name -> controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes
	2,  // 7: controller.api.resources.credentialstores.v1.CredentialStore.authorized_collection_actions:type_name -> controller.api.resources.credentialstores.v1.CredentialStore.AuthorizedCollectionActionsEntry
	4,  // 8: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.address:type_name -> google.protobuf.StringValue
	4,  // 9: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.namespace:type_name -> google.protobuf.StringValue
	4,  // 10: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.ca_cert:type_name -> google.protobuf.StringValue
	4,  // 11: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.tls_server_name:type_name -> google.protobuf.StringValue
	7,  // 12: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.tls_skip_verify:type_name -> google.protobuf.BoolValue
	4,  // 13: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.token:type_name -> google.protobuf.StringValue
	4,  // 14: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.client_certificate:type_name -> google.protobuf.StringValue
	4,  // 15: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.client_certificate_key:type_name -> google.protobuf.StringValue
	4,  // 16: controller.api.resources.credentialstores.v1.VaultCredentialStoreAttributes.worker_filter:type_name -> google.protobuf.StringValue
	8,  // 17: controller.api.resources.credentialstores.v1.CredentialStore.AuthorizedCollectionActionsEntry.value:type_name -> google.protobuf.ListValue
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_controller_api_resources_credentialstores_v1_credential_store_proto_init() }
func file_controller_api_resources_credentialstores_v1_credential_store_proto_init() {
	if File_controller_api_resources_credentialstores_v1_credential_store_proto != nil {
		return
	}
	file_controller_api_resources_credentialstores_v1_credential_store_proto_msgTypes[0].OneofWrappers = []any{
		(*CredentialStore_Attributes)(nil),
		(*CredentialStore_VaultCredentialStoreAttributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDesc), len(file_controller_api_resources_credentialstores_v1_credential_store_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_controller_api_resources_credentialstores_v1_credential_store_proto_goTypes,
		DependencyIndexes: file_controller_api_resources_credentialstores_v1_credential_store_proto_depIdxs,
		MessageInfos:      file_controller_api_resources_credentialstores_v1_credential_store_proto_msgTypes,
	}.Build()
	File_controller_api_resources_credentialstores_v1_credential_store_proto = out.File
	file_controller_api_resources_credentialstores_v1_credential_store_proto_goTypes = nil
	file_controller_api_resources_credentialstores_v1_credential_store_proto_depIdxs = nil
}
