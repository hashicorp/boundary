// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: controller/custom_options/v1/options.proto

package protooptions

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MaskMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	This string `protobuf:"bytes,1,opt,name=this,proto3" json:"this,omitempty"`
	That string `protobuf:"bytes,2,opt,name=that,proto3" json:"that,omitempty"`
}

func (x *MaskMapping) Reset() {
	*x = MaskMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_custom_options_v1_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskMapping) ProtoMessage() {}

func (x *MaskMapping) ProtoReflect() protoreflect.Message {
	mi := &file_controller_custom_options_v1_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskMapping.ProtoReflect.Descriptor instead.
func (*MaskMapping) Descriptor() ([]byte, []int) {
	return file_controller_custom_options_v1_options_proto_rawDescGZIP(), []int{0}
}

func (x *MaskMapping) GetThis() string {
	if x != nil {
		return x.This
	}
	return ""
}

func (x *MaskMapping) GetThat() string {
	if x != nil {
		return x.That
	}
	return ""
}

type AliasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Aliasable:
	//
	//	*AliasInfo_Always
	//	*AliasInfo_UnlessSet
	Aliasable isAliasInfo_Aliasable `protobuf_oneof:"aliasable"`
}

func (x *AliasInfo) Reset() {
	*x = AliasInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_custom_options_v1_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliasInfo) ProtoMessage() {}

func (x *AliasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_controller_custom_options_v1_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliasInfo.ProtoReflect.Descriptor instead.
func (*AliasInfo) Descriptor() ([]byte, []int) {
	return file_controller_custom_options_v1_options_proto_rawDescGZIP(), []int{1}
}

func (m *AliasInfo) GetAliasable() isAliasInfo_Aliasable {
	if m != nil {
		return m.Aliasable
	}
	return nil
}

func (x *AliasInfo) GetAlways() bool {
	if x, ok := x.GetAliasable().(*AliasInfo_Always); ok {
		return x.Always
	}
	return false
}

func (x *AliasInfo) GetUnlessSet() *AliasableUnlessSet {
	if x, ok := x.GetAliasable().(*AliasInfo_UnlessSet); ok {
		return x.UnlessSet
	}
	return nil
}

type isAliasInfo_Aliasable interface {
	isAliasInfo_Aliasable()
}

type AliasInfo_Always struct {
	Always bool `protobuf:"varint,1,opt,name=always,proto3,oneof"`
}

type AliasInfo_UnlessSet struct {
	// aliasable_with_fields is used to indicate that the field this FieldOption
	// is on, while normally aliasable, should not be aliased if any fields on this
	// same message are populated.
	UnlessSet *AliasableUnlessSet `protobuf:"bytes,2,opt,name=unless_set,json=unlessSet,proto3,oneof"`
}

func (*AliasInfo_Always) isAliasInfo_Aliasable() {}

func (*AliasInfo_UnlessSet) isAliasInfo_Aliasable() {}

type AliasableUnlessSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fields is a list of fields that, if any of them are set with a non zero
	// value then the field this FieldOption is on should not be treated as an alias.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *AliasableUnlessSet) Reset() {
	*x = AliasableUnlessSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_custom_options_v1_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliasableUnlessSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliasableUnlessSet) ProtoMessage() {}

func (x *AliasableUnlessSet) ProtoReflect() protoreflect.Message {
	mi := &file_controller_custom_options_v1_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliasableUnlessSet.ProtoReflect.Descriptor instead.
func (*AliasableUnlessSet) Descriptor() ([]byte, []int) {
	return file_controller_custom_options_v1_options_proto_rawDescGZIP(), []int{2}
}

func (x *AliasableUnlessSet) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

var file_controller_custom_options_v1_options_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*MaskMapping)(nil),
		Field:         85464,
		Name:          "controller.custom_options.v1.mask_mapping",
		Tag:           "bytes,85464,opt,name=mask_mapping",
		Filename:      "controller/custom_options/v1/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         85412,
		Name:          "controller.custom_options.v1.generate_sdk_option",
		Tag:           "varint,85412,opt,name=generate_sdk_option",
		Filename:      "controller/custom_options/v1/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         85555,
		Name:          "controller.custom_options.v1.subtype",
		Tag:           "bytes,85555,opt,name=subtype",
		Filename:      "controller/custom_options/v1/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         85556,
		Name:          "controller.custom_options.v1.subtype_source_id",
		Tag:           "varint,85556,opt,name=subtype_source_id",
		Filename:      "controller/custom_options/v1/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*AliasInfo)(nil),
		Field:         85557,
		Name:          "controller.custom_options.v1.aliasable",
		Tag:           "bytes,85557,opt,name=aliasable",
		Filename:      "controller/custom_options/v1/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         85556,
		Name:          "controller.custom_options.v1.domain",
		Tag:           "bytes,85556,opt,name=domain",
		Filename:      "controller/custom_options/v1/options.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// mask_mapping is an option which tags a field with the expected field mask
	// used by a companion proto if applied on the field this option is for.
	// The value of this option should be for the field name itself and not for
	// the json name.
	//
	// optional controller.custom_options.v1.MaskMapping mask_mapping = 85464;
	E_MaskMapping = &file_controller_custom_options_v1_options_proto_extTypes[0]
	// generate_sdk_option is a directive used when generating the SDK to
	// indicate that an option should be created for the field. This also controls
	// API options (DefaultX, WithX functions).
	//
	// optional bool generate_sdk_option = 85412;
	E_GenerateSdkOption = &file_controller_custom_options_v1_options_proto_extTypes[1]
	// subtype is used for oneOf attribute subtypes, to identify that we only need to parse attributes
	// of oneOf once and not for each option when generating the API
	// This will serve as a JSON key, used to transform that into the key the protobuf expects
	//
	// optional string subtype = 85555;
	E_Subtype = &file_controller_custom_options_v1_options_proto_extTypes[2]
	// subtype_source_id is used to indicate that a field provided an id that can be used
	// to determine the subtype of a message.
	//
	// optional bool subtype_source_id = 85556;
	E_SubtypeSourceId = &file_controller_custom_options_v1_options_proto_extTypes[3]
	// aliasable_field is used to indicate that a field is aliasable. Fields with
	// this option attached will have their values checked for a possible alias
	// value at request time and will be replaced with the destination id
	// associated with the alias if found.
	//
	// optional controller.custom_options.v1.AliasInfo aliasable = 85557;
	E_Aliasable = &file_controller_custom_options_v1_options_proto_extTypes[4]
)

// Extension fields to descriptorpb.FileOptions.
var (
	// domain is used to associate the messages in a file with a domain package.
	//
	// optional string domain = 85556;
	E_Domain = &file_controller_custom_options_v1_options_proto_extTypes[5]
)

var File_controller_custom_options_v1_options_proto protoreflect.FileDescriptor

var file_controller_custom_options_v1_options_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x0b,
	0x4d, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x68, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x68, 0x69, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x68, 0x61, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x75,
	0x6e, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x6d, 0x0a, 0x0c, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd8, 0x9b, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x61, 0x73,
	0x6b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x3a, 0x4f, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa4,
	0x9b, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x64, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xb3, 0x9c, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x4b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb4, 0x9c, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x3a, 0x66, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb5, 0x9c,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x36, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xb4, 0x9c, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_custom_options_v1_options_proto_rawDescOnce sync.Once
	file_controller_custom_options_v1_options_proto_rawDescData = file_controller_custom_options_v1_options_proto_rawDesc
)

func file_controller_custom_options_v1_options_proto_rawDescGZIP() []byte {
	file_controller_custom_options_v1_options_proto_rawDescOnce.Do(func() {
		file_controller_custom_options_v1_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_custom_options_v1_options_proto_rawDescData)
	})
	return file_controller_custom_options_v1_options_proto_rawDescData
}

var file_controller_custom_options_v1_options_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_controller_custom_options_v1_options_proto_goTypes = []any{
	(*MaskMapping)(nil),               // 0: controller.custom_options.v1.MaskMapping
	(*AliasInfo)(nil),                 // 1: controller.custom_options.v1.AliasInfo
	(*AliasableUnlessSet)(nil),        // 2: controller.custom_options.v1.AliasableUnlessSet
	(*descriptorpb.FieldOptions)(nil), // 3: google.protobuf.FieldOptions
	(*descriptorpb.FileOptions)(nil),  // 4: google.protobuf.FileOptions
}
var file_controller_custom_options_v1_options_proto_depIdxs = []int32{
	2, // 0: controller.custom_options.v1.AliasInfo.unless_set:type_name -> controller.custom_options.v1.AliasableUnlessSet
	3, // 1: controller.custom_options.v1.mask_mapping:extendee -> google.protobuf.FieldOptions
	3, // 2: controller.custom_options.v1.generate_sdk_option:extendee -> google.protobuf.FieldOptions
	3, // 3: controller.custom_options.v1.subtype:extendee -> google.protobuf.FieldOptions
	3, // 4: controller.custom_options.v1.subtype_source_id:extendee -> google.protobuf.FieldOptions
	3, // 5: controller.custom_options.v1.aliasable:extendee -> google.protobuf.FieldOptions
	4, // 6: controller.custom_options.v1.domain:extendee -> google.protobuf.FileOptions
	0, // 7: controller.custom_options.v1.mask_mapping:type_name -> controller.custom_options.v1.MaskMapping
	1, // 8: controller.custom_options.v1.aliasable:type_name -> controller.custom_options.v1.AliasInfo
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	7, // [7:9] is the sub-list for extension type_name
	1, // [1:7] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_controller_custom_options_v1_options_proto_init() }
func file_controller_custom_options_v1_options_proto_init() {
	if File_controller_custom_options_v1_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_custom_options_v1_options_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MaskMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_custom_options_v1_options_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AliasInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_custom_options_v1_options_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AliasableUnlessSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_controller_custom_options_v1_options_proto_msgTypes[1].OneofWrappers = []any{
		(*AliasInfo_Always)(nil),
		(*AliasInfo_UnlessSet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_custom_options_v1_options_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 6,
			NumServices:   0,
		},
		GoTypes:           file_controller_custom_options_v1_options_proto_goTypes,
		DependencyIndexes: file_controller_custom_options_v1_options_proto_depIdxs,
		MessageInfos:      file_controller_custom_options_v1_options_proto_msgTypes,
		ExtensionInfos:    file_controller_custom_options_v1_options_proto_extTypes,
	}.Build()
	File_controller_custom_options_v1_options_proto = out.File
	file_controller_custom_options_v1_options_proto_rawDesc = nil
	file_controller_custom_options_v1_options_proto_goTypes = nil
	file_controller_custom_options_v1_options_proto_depIdxs = nil
}
