{
  "swagger": "2.0",
  "info": {
    "title": "Boundary Controller HTTP API",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "controller.api.services.v1.ScopeService"
    },
    {
      "name": "controller.api.services.v1.AccountService"
    },
    {
      "name": "controller.api.services.v1.AuthMethodService"
    },
    {
      "name": "controller.api.services.v1.AuthTokenService"
    },
    {
      "name": "controller.api.services.v1.CredentialLibraryService"
    },
    {
      "name": "controller.api.services.v1.CredentialService"
    },
    {
      "name": "controller.api.services.v1.CredentialStoreService"
    },
    {
      "name": "controller.api.services.v1.GroupService"
    },
    {
      "name": "controller.api.services.v1.HostCatalogService"
    },
    {
      "name": "controller.api.services.v1.HostService"
    },
    {
      "name": "controller.api.services.v1.HostSetService"
    },
    {
      "name": "controller.api.services.v1.ManagedGroupService"
    },
    {
      "name": "controller.api.services.v1.RoleService"
    },
    {
      "name": "controller.api.services.v1.SessionRecordingService"
    },
    {
      "name": "controller.api.services.v1.SessionService"
    },
    {
      "name": "controller.api.services.v1.StorageBucketService"
    },
    {
      "name": "controller.api.services.v1.TargetService"
    },
    {
      "name": "controller.api.services.v1.UserService"
    },
    {
      "name": "controller.api.services.v1.WorkerService"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/accounts": {
      "get": {
        "summary": "Lists all Accounts in a specific Auth Method.",
        "operationId": "AccountService_ListAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "auth_method_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      },
      "post": {
        "summary": "Creates a single Account in the provided Auth Method.",
        "operationId": "AccountService_CreateAccount",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/accounts/{id}": {
      "get": {
        "summary": "Gets a single Account.",
        "operationId": "AccountService_GetAccount",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      },
      "delete": {
        "summary": "Deletes an Account.",
        "operationId": "AccountService_DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteAccountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      },
      "patch": {
        "summary": "Updates an Account.",
        "operationId": "AccountService_UpdateAccount",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/accounts/{id}:change-password": {
      "post": {
        "summary": "Sets the password for the provided Account.",
        "operationId": "AccountService_ChangePassword",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "current_password": {
                  "type": "string",
                  "title": ""
                },
                "new_password": {
                  "type": "string",
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/accounts/{id}:set-password": {
      "post": {
        "summary": "Sets the password for the provided Account.",
        "operationId": "AccountService_SetPassword",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "password": {
                  "type": "string",
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/auth-methods": {
      "get": {
        "summary": "Lists all Auth Methods.",
        "operationId": "AuthMethodService_ListAuthMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListAuthMethodsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      },
      "post": {
        "summary": "Creates a single Auth Method.",
        "operationId": "AuthMethodService_CreateAuthMethod",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-methods/{auth_method_id}:authenticate": {
      "post": {
        "summary": "Authenticate a user to an scope and retrieve an authentication token.",
        "operationId": "AuthMethodService_Authenticate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AuthenticateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "auth_method_id",
            "description": "The ID of the Auth Method in the system that should be used for authentication.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token_type": {
                  "type": "string",
                  "description": "This can be \"cookie\" or \"token\". If not provided, \"token\" will be used. \"cookie\" activates a split-cookie method where the token is split partially between http-only and regular cookies in order\nto keep it safe from rogue JS in the browser. Deprecated, use \"type\" instead."
                },
                "type": {
                  "type": "string",
                  "description": "This can be \"cookie\" or \"token\". If not provided, \"token\" will be used. \"cookie\" activates a split-cookie method where the token is split partially between http-only and regular cookies in order\nto keep it safe from rogue JS in the browser."
                },
                "attributes": {
                  "type": "object",
                  "description": "Attributes are passed to the Auth Method; the valid keys and values depend on the type of Auth Method as well as the command."
                },
                "command": {
                  "type": "string",
                  "description": "The command to perform."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-methods/{id}": {
      "get": {
        "summary": "Gets a single Auth Method.",
        "operationId": "AuthMethodService_GetAuthMethod",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      },
      "delete": {
        "summary": "Deletes an AuthMethod",
        "operationId": "AuthMethodService_DeleteAuthMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteAuthMethodResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      },
      "patch": {
        "summary": "Updates an Auth Method.",
        "operationId": "AuthMethodService_UpdateAuthMethod",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-methods/{id}:change-state": {
      "post": {
        "summary": "Changes the state of an OIDC AuthMethod",
        "operationId": "AuthMethodService_ChangeState",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "attributes": {
                  "type": "object",
                  "description": "The attributes specific to this auth method's state."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-tokens": {
      "get": {
        "summary": "Lists all Auth Tokens.",
        "operationId": "AuthTokenService_ListAuthTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListAuthTokensResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthTokenService"
        ]
      }
    },
    "/v1/auth-tokens/{id}": {
      "get": {
        "summary": "Gets a single Auth Token.",
        "operationId": "AuthTokenService_GetAuthToken",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthTokenService"
        ]
      },
      "delete": {
        "summary": "Deletes an Auth Token.",
        "operationId": "AuthTokenService_DeleteAuthToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteAuthTokenResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.AuthTokenService"
        ]
      }
    },
    "/v1/credential-libraries": {
      "get": {
        "summary": "Lists all Credential Library.",
        "operationId": "CredentialLibraryService_ListCredentialLibraries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListCredentialLibrariesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "credential_store_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      },
      "post": {
        "summary": "Creates a single Credential Library.",
        "operationId": "CredentialLibraryService_CreateCredentialLibrary",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      }
    },
    "/v1/credential-libraries/{id}": {
      "get": {
        "summary": "Gets a single Credential Library.",
        "operationId": "CredentialLibraryService_GetCredentialLibrary",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      },
      "delete": {
        "summary": "Deletes a Credential Library",
        "operationId": "CredentialLibraryService_DeleteCredentialLibrary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteCredentialLibraryResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      },
      "patch": {
        "summary": "Updates a Credential Library.",
        "operationId": "CredentialLibraryService_UpdateCredentialLibrary",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      }
    },
    "/v1/credential-stores": {
      "get": {
        "summary": "Lists all Credential Stores.",
        "operationId": "CredentialStoreService_ListCredentialStores",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListCredentialStoresResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      },
      "post": {
        "summary": "Creates a single Credential Store.",
        "operationId": "CredentialStoreService_CreateCredentialStore",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      }
    },
    "/v1/credential-stores/{id}": {
      "get": {
        "summary": "Gets a single Credential Store.",
        "operationId": "CredentialStoreService_GetCredentialStore",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      },
      "delete": {
        "summary": "Deletes a CredentialStore",
        "operationId": "CredentialStoreService_DeleteCredentialStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteCredentialStoreResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      },
      "patch": {
        "summary": "Updates a Credential Store.",
        "operationId": "CredentialStoreService_UpdateCredentialStore",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "summary": "Lists all Credentials.",
        "operationId": "CredentialService_ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListCredentialsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "credential_store_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialService"
        ]
      },
      "post": {
        "summary": "Creates a single Credential.",
        "operationId": "CredentialService_CreateCredential",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialService"
        ]
      }
    },
    "/v1/credentials/{id}": {
      "get": {
        "summary": "Gets a single Credential.",
        "operationId": "CredentialService_GetCredential",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialService"
        ]
      },
      "delete": {
        "summary": "Deletes a Credential",
        "operationId": "CredentialService_DeleteCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteCredentialResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialService"
        ]
      },
      "patch": {
        "summary": "Updates a Credential.",
        "operationId": "CredentialService_UpdateCredential",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.CredentialService"
        ]
      }
    },
    "/v1/groups": {
      "get": {
        "summary": "Lists all Groups.",
        "operationId": "GroupService_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListGroupsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "post": {
        "summary": "Creates a single Group.",
        "operationId": "GroupService_CreateGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}": {
      "get": {
        "summary": "Gets a single Group.",
        "operationId": "GroupService_GetGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "delete": {
        "summary": "Deletes a Group.",
        "operationId": "GroupService_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "patch": {
        "summary": "Updates a Group.",
        "operationId": "GroupService_UpdateGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}:add-members": {
      "post": {
        "summary": "Adds members to a Group.",
        "operationId": "GroupService_AddGroupMembers",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "member_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}:remove-members": {
      "post": {
        "summary": "Removes the specified members from a Group.",
        "operationId": "GroupService_RemoveGroupMembers",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "member_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}:set-members": {
      "post": {
        "summary": "Set a Group's members to exactly the list of provided in the request, removing any members that are not specified.",
        "operationId": "GroupService_SetGroupMembers",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "member_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/host-catalogs": {
      "get": {
        "summary": "Gets a list of Host Catalogs.",
        "operationId": "HostCatalogService_ListHostCatalogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostCatalogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "post": {
        "summary": "Creates a Host Catalog",
        "operationId": "HostCatalogService_CreateHostCatalog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          },
          {
            "name": "plugin_name",
            "description": "As an alternative to providing the plugin id in the provided HostCatalog,\nthis field can be used to lookup the plugin using its name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/host-catalogs/{id}": {
      "get": {
        "summary": "Gets a single Host Catalog.",
        "operationId": "HostCatalogService_GetHostCatalog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "delete": {
        "summary": "Deletes a Host Catalog",
        "operationId": "HostCatalogService_DeleteHostCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostCatalogResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "patch": {
        "summary": "Updates a Host Catalog",
        "operationId": "HostCatalogService_UpdateHostCatalog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/host-sets": {
      "get": {
        "summary": "List all Host Sets under the specific Catalog.",
        "operationId": "HostSetService_ListHostSets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostSetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "host_catalog_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "post": {
        "summary": "Create a Host Set.",
        "operationId": "HostSetService_CreateHostSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}": {
      "get": {
        "summary": "Get a single Host Set.",
        "operationId": "HostSetService_GetHostSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "delete": {
        "summary": "Delete a Host Set.",
        "operationId": "HostSetService_DeleteHostSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostSetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "patch": {
        "summary": "Update a Host Set.",
        "operationId": "HostSetService_UpdateHostSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}:add-hosts": {
      "post": {
        "summary": "Adds existing Hosts to a Host Set.",
        "operationId": "HostSetService_AddHostSetHosts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "host_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of Host IDs which will be added to this Host Set. Each Host referenced here must be a child of the same Host Catalog of which this Host Set is a child."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}:remove-hosts": {
      "post": {
        "summary": "Removes Hosts from the Host Set.",
        "operationId": "HostSetService_RemoveHostSetHosts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "host_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of Host IDs which will be removed from this Host Set."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}:set-hosts": {
      "post": {
        "summary": "Sets the Hosts on the Host Set.",
        "operationId": "HostSetService_SetHostSetHosts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "host_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of Host IDs which will be set on this Host Set. Each Host referenced here must be a child of the same Host Catalog of which this Host Set is a child."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/hosts": {
      "get": {
        "summary": "List all Hosts for the specified Catalog.",
        "operationId": "HostService_ListHosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "host_catalog_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "post": {
        "summary": "Create a single Host.",
        "operationId": "HostService_CreateHost",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/hosts/{id}": {
      "get": {
        "summary": "Gets a single Host.",
        "operationId": "HostService_GetHost",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "delete": {
        "summary": "Delete a Host.",
        "operationId": "HostService_DeleteHost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "patch": {
        "summary": "Update a Host.",
        "operationId": "HostService_UpdateHost",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/managed-groups": {
      "get": {
        "summary": "Lists all ManagedGroups in a specific Auth Method.",
        "operationId": "ManagedGroupService_ListManagedGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListManagedGroupsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "auth_method_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      },
      "post": {
        "summary": "Creates a single ManagedGroup in the provided Auth Method.",
        "operationId": "ManagedGroupService_CreateManagedGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      }
    },
    "/v1/managed-groups/{id}": {
      "get": {
        "summary": "Gets a single ManagedGroup.",
        "operationId": "ManagedGroupService_GetManagedGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      },
      "delete": {
        "summary": "Deletes a ManagedGroup.",
        "operationId": "ManagedGroupService_DeleteManagedGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteManagedGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      },
      "patch": {
        "summary": "Updates a ManagedGroup.",
        "operationId": "ManagedGroupService_UpdateManagedGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      }
    },
    "/v1/roles": {
      "get": {
        "summary": "Lists all Roles.",
        "operationId": "RoleService_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListRolesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "post": {
        "summary": "Creates a single Role.",
        "operationId": "RoleService_CreateRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}": {
      "get": {
        "summary": "Gets a single Role.",
        "operationId": "RoleService_GetRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "delete": {
        "summary": "Deletes a Role.",
        "operationId": "RoleService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "patch": {
        "summary": "Updates a Role.",
        "operationId": "RoleService_UpdateRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:add-grants": {
      "post": {
        "summary": "Adds grants to a Role",
        "operationId": "RoleService_AddRoleGrants",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "grant_strings": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:add-principals": {
      "post": {
        "summary": "Adds Users and/or Groups to a Role.",
        "operationId": "RoleService_AddRolePrincipals",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "principal_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:remove-grants": {
      "post": {
        "summary": "Removes grants from a Role.",
        "operationId": "RoleService_RemoveRoleGrants",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "grant_strings": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:remove-principals": {
      "post": {
        "summary": "Removes the specified Users and/or Groups from a Role.",
        "operationId": "RoleService_RemoveRolePrincipals",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "principal_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:set-grants": {
      "post": {
        "summary": "Set grants for a Role, removing any grants that are not specified in the request.",
        "operationId": "RoleService_SetRoleGrants",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "grant_strings": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:set-principals": {
      "post": {
        "summary": "Set Users and/or Groups to a Role, removing any principals that are not specified in the request.",
        "operationId": "RoleService_SetRolePrincipals",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "principal_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/scopes": {
      "get": {
        "summary": "Lists all Scopes within the Scope provided in the request.",
        "operationId": "ScopeService_ListScopes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListScopesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      },
      "post": {
        "summary": "Creates a single Scope.",
        "operationId": "ScopeService_CreateScope",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          },
          {
            "name": "skip_admin_role_creation",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip_default_role_creation",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/scopes/{id}": {
      "get": {
        "summary": "Gets a single Scope.",
        "operationId": "ScopeService_GetScope",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      },
      "delete": {
        "summary": "Deletes a Scope.",
        "operationId": "ScopeService_DeleteScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteScopeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      },
      "patch": {
        "summary": "Updates a Scope.",
        "operationId": "ScopeService_UpdateScope",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/scopes/{id}:list-keys": {
      "get": {
        "summary": "List all keys in a Scope.",
        "operationId": "ScopeService_ListKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListKeysResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/scopes/{scope_id}:list-key-version-destruction-jobs": {
      "get": {
        "summary": "Lists all pending key version destruction jobs in a Scope.",
        "operationId": "ScopeService_ListKeyVersionDestructionJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListKeyVersionDestructionJobsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/scopes:destroy-key-version": {
      "post": {
        "summary": "Destroy the specified key version in a Scope. This may start an asynchronous job that re-encrypts all data encrypted by the specified key version. Use GET /v1/scopes/{scope_id}:list-key-version-destruction-jobs to monitor pending destruction jobs.",
        "operationId": "ScopeService_DestroyKeyVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DestroyKeyVersionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DestroyKeyVersionRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/scopes:rotate-keys": {
      "post": {
        "summary": "Rotate all keys in a Scope.",
        "operationId": "ScopeService_RotateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RotateKeysResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RotateKeysRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/session-recordings": {
      "get": {
        "summary": "ListSessionRecordings lists all Session recordings. Session recordings are ordered by start_time descending (most recently started first).",
        "operationId": "SessionRecordingService_ListSessionRecordings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListSessionRecordingsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "The scope in which to list session recordings.\nMust be set unless recursive is set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "Whether to recurse into child scopes when listing.\nIf set and scope_id is empty, shows session recordings in\nall scopes the caller has access to.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "controller.api.services.v1.SessionRecordingService"
        ]
      }
    },
    "/v1/session-recordings/{id}": {
      "get": {
        "summary": "GetSessionRecording returns a stored Session recording if present. The provided request must include the Session recording ID for the Session recording being retrieved, or the ID of the Session that was recorded. If that ID is missing, malformed or reference a non existing resource, an error is returned.",
        "operationId": "SessionRecordingService_GetSessionRecording",
        "responses": {
          "200": {
            "description": "The requested recording.",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.SessionRecording"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the Session recording, or the ID of the Session that was recorded.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.SessionRecordingService"
        ]
      }
    },
    "/v1/session-recordings/{id}:download": {
      "get": {
        "summary": "Download returns the contents of the specified resource in the specified mime type. Supports both Session ID and Session recording ID for looking up a Session recording. Supports both Connection ID and Connection recording ID to look up a Connection recording. A Channel recording ID is required to look up a Channel recording. The only supported mime type is \"application/x-asciicast\".",
        "operationId": "SessionRecordingService_Download",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "string",
              "format": "binary",
              "properties": {},
              "title": "Free form byte stream"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the resource that should be downloaded. Supported types:\n  - Session ID and Session recording ID for Session recordings\n  - Connection ID and Connection recording ID for Connection recordings\n  - Channel recording ID for Channel recordings",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mime_type",
            "description": "The format of the response. The only supported mime type is \"application/x-asciicast\".\nDefaults to \"application/x-asciicast\" if not set.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.SessionRecordingService"
        ]
      }
    },
    "/v1/sessions": {
      "get": {
        "summary": "Lists all Sessions.",
        "operationId": "SessionService_ListSessions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListSessionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "include_terminated",
            "description": "Experimental. By default only non-terminated (i.e. pending, active, canceling) are returned.\nSet this option to include terminated sessions as well.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "controller.api.services.v1.SessionService"
        ]
      }
    },
    "/v1/sessions/{id}": {
      "get": {
        "summary": "Gets a single Session.",
        "operationId": "SessionService_GetSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.SessionService"
        ]
      }
    },
    "/v1/sessions/{id}:cancel": {
      "post": {
        "summary": "Cancels a Session.",
        "operationId": "SessionService_CancelSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.SessionService"
        ]
      }
    },
    "/v1/storage-buckets": {
      "get": {
        "summary": "Gets a list of Storage Buckets.",
        "operationId": "StorageBucketService_ListStorageBuckets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListStorageBucketsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.StorageBucketService"
        ]
      },
      "post": {
        "summary": "Creates a Storage Bucket",
        "operationId": "StorageBucketService_CreateStorageBucket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
            }
          },
          {
            "name": "plugin_name",
            "description": "As an alternative to providing the plugin id in the provided StorageBucket,\nthis field can be used to lookup the plugin using its name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.StorageBucketService"
        ]
      }
    },
    "/v1/storage-buckets/{id}": {
      "get": {
        "summary": "Gets a single Storage Bucket.",
        "operationId": "StorageBucketService_GetStorageBucket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.StorageBucketService"
        ]
      },
      "delete": {
        "summary": "Deletes a Storage Bucket",
        "operationId": "StorageBucketService_DeleteStorageBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteStorageBucketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.StorageBucketService"
        ]
      },
      "patch": {
        "summary": "Updates a Storage Bucket",
        "operationId": "StorageBucketService_UpdateStorageBucket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.StorageBucketService"
        ]
      }
    },
    "/v1/targets": {
      "get": {
        "summary": "Lists all Targets.",
        "operationId": "TargetService_ListTargets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListTargetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      },
      "post": {
        "summary": "Creates a single Target.",
        "operationId": "TargetService_CreateTarget",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}": {
      "get": {
        "summary": "Gets a single Target.",
        "operationId": "TargetService_GetTarget",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      },
      "delete": {
        "summary": "Deletes a Target.",
        "operationId": "TargetService_DeleteTarget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteTargetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      },
      "patch": {
        "summary": "Updates a Target.",
        "operationId": "TargetService_UpdateTarget",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:add-credential-sources": {
      "post": {
        "summary": "Adds existing Credential Sources to a Target.",
        "operationId": "TargetService_AddTargetCredentialSources",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "application_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "",
                  "title": "Deprecated use brokered_credential_source_ids instead"
                },
                "brokered_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Brokered credentials are returned to the user during session authorization."
                },
                "injected_application_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Injected application credentials are used by a Boundary worker to secure the\nconnection between the worker and the endpoint. Injected application credentials are\nnever returned to the user."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:add-host-sources": {
      "post": {
        "summary": "Adds existing Host Sources to a Target. Cannot be used on targets that have their address field set.",
        "operationId": "TargetService_AddTargetHostSources",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "host_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:authorize-session": {
      "post": {
        "summary": "Authorizes a Session.",
        "operationId": "TargetService_AuthorizeSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.SessionAuthorization"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the target. Required unless some combination of scope_id/scope_name and name are set.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the target. When using this, scope_id or scope_name must be set."
                },
                "scope_id": {
                  "type": "string",
                  "description": "The scope ID containing the target, if specifying the target by name."
                },
                "scope_name": {
                  "type": "string",
                  "description": "The scope name containing the target, if specifying the target by name."
                },
                "host_id": {
                  "type": "string",
                  "description": "An optional parameter allowing specification of the particular Host within the Target's configured Host Sets to connect to during this Session."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:remove-credential-sources": {
      "post": {
        "summary": "Removes Credential Sources from the Target.",
        "operationId": "TargetService_RemoveTargetCredentialSources",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "application_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "",
                  "title": "Deprecated use brokered_credential_source_ids instead"
                },
                "brokered_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Brokered credentials are returned to the user during session authorization."
                },
                "injected_application_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Injected application credentials are used by a Boundary worker to secure the\nconnection between the worker and the endpoint. Injected application credentials are\nnever returned to the user."
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:remove-host-sources": {
      "post": {
        "summary": "Removes Host Sources from the Target.",
        "operationId": "TargetService_RemoveTargetHostSources",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "host_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:set-credential-sources": {
      "post": {
        "summary": "Sets the Credential Sources on the Target.",
        "operationId": "TargetService_SetTargetCredentialSources",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "application_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "",
                  "title": "Deprecated use brokered_credential_source_ids instead"
                },
                "brokered_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Brokered credentials are returned to the user during session authorization."
                },
                "injected_application_credential_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Injected application credentials are used by a Boundary worker to secure the\nconnection between the worker and the endpoint. Injected application credentials are\nnever returned to the user."
                }
              },
              "description": "Sets the values for credential sources. Any credential_source_id field that\nis not set in the request will result in those fields being cleared."
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:set-host-sources": {
      "post": {
        "summary": "Sources the Host Sources on the Target. Cannot be used on targets that have their address field set.",
        "operationId": "TargetService_SetTargetHostSources",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "host_source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/users": {
      "get": {
        "summary": "Lists all Users.",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "post": {
        "summary": "Creates a single User.",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Gets a single User.",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "delete": {
        "summary": "Deletes a User.",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "patch": {
        "summary": "Updates a User.",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}:add-accounts": {
      "post": {
        "summary": "Associates an Account to a User.",
        "operationId": "UserService_AddUserAccounts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The version ensures the User hasn't changed since it was last retrieved and if it has the request will fail."
                },
                "account_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}:remove-accounts": {
      "post": {
        "summary": "Removes the specified Accounts from being associated with the provided User.",
        "operationId": "UserService_RemoveUserAccounts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The version ensures the User hasn't changed since it was last retrieved and if it has the request will fail."
                },
                "account_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}:set-accounts": {
      "post": {
        "summary": "Set the Accounts associated to the User to exactly the list of provided in the request, removing any Accounts that are not specified.",
        "operationId": "UserService_SetUserAccounts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The version ensures the User hasn't changed since it was last retrieved and if it has the request will fail."
                },
                "account_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/workers": {
      "get": {
        "summary": "Lists all Workers.",
        "operationId": "WorkerService_ListWorkers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListWorkersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers/{id}": {
      "get": {
        "summary": "Gets a single Worker.",
        "operationId": "WorkerService_GetWorker",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      },
      "delete": {
        "summary": "Deletes a Worker.",
        "operationId": "WorkerService_DeleteWorker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteWorkerResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      },
      "patch": {
        "summary": "Updates a Worker.",
        "operationId": "WorkerService_UpdateWorker",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers/{id}:add-worker-tags": {
      "post": {
        "summary": "Adds api tags to an existing Worker.",
        "operationId": "WorkerService_AddWorkerTags",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "api_tags": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers/{id}:remove-worker-tags": {
      "post": {
        "summary": "Removes api tags from an existing Worker.",
        "operationId": "WorkerService_RemoveWorkerTags",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "api_tags": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers/{id}:set-worker-tags": {
      "post": {
        "summary": "Sets api tags for an existing Worker.",
        "operationId": "WorkerService_SetWorkerTags",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
                },
                "api_tags": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "title": ""
                }
              }
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers:create:controller-led": {
      "post": {
        "summary": "Creates a single Worker.",
        "operationId": "WorkerService_CreateControllerLed",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers:create:worker-led": {
      "post": {
        "summary": "Creates a single Worker.",
        "operationId": "WorkerService_CreateWorkerLed",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        },
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers:read-certificate-authority": {
      "get": {
        "summary": "Retrieves root certificates used for worker authentication.",
        "operationId": "WorkerService_ReadCertificateAuthority",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.CertificateAuthority"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    },
    "/v1/workers:reinitialize-certificate-authority": {
      "post": {
        "summary": "Reinitializes root certificates used for worker authentication.",
        "operationId": "WorkerService_ReinitializeCertificateAuthority",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.workers.v1.CertificateAuthority"
            }
          }
        },
        "parameters": [
          {
            "name": "scope_id",
            "description": "",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.WorkerService"
        ]
      }
    }
  },
  "definitions": {
    "controller.api.resources.accounts.v1.Account": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Account.",
          "readOnly": true
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for the Account.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of this Account."
        },
        "auth_method_id": {
          "type": "string",
          "description": "The ID of the Auth Method that is associated with this Account."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Account type."
        },
        "managed_group_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "",
          "title": "Output only. managed_group_ids indicates IDs of the managed groups that currently contain this account",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "Account contains all fields related to an Account resource"
    },
    "controller.api.resources.authmethods.v1.AuthMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Auth Method.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope of which this Auth Method is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Auth method.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The Auth Method type."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Auth Method type."
        },
        "is_primary": {
          "type": "boolean",
          "description": "Output only. Whether this auth method is the primary auth method for it's scope.\nTo change this value update the primary_auth_method_id field on the scope.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "authorized_collection_actions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true
        }
      },
      "title": "AuthMethod contains all fields related to an Auth Method resource"
    },
    "controller.api.resources.authtokens.v1.AuthToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Auth Token.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The Scope in which this Auth Token was generated."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "token": {
          "type": "string",
          "description": "Output only. The token value, which will only be populated after authentication and is only ever visible to the end user whose login request resulted in this Auth Token being created.",
          "readOnly": true
        },
        "user_id": {
          "type": "string",
          "description": "Output only. The ID of the User associated with this Auth Token.",
          "readOnly": true
        },
        "auth_method_id": {
          "type": "string",
          "description": "Output only. The ID of the Auth Method associated with this Auth Token.",
          "readOnly": true
        },
        "account_id": {
          "type": "string",
          "description": "Output only. The ID of the Account associated with this Auth Token.",
          "readOnly": true
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "approximate_last_used_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The approximate time this Auth Token was last used.",
          "readOnly": true
        },
        "expiration_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this Auth Token expires.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "AuthToken contains all fields related to an Auth Token resource"
    },
    "controller.api.resources.credentiallibraries.v1.CredentialLibrary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Credential Library.",
          "readOnly": true
        },
        "credential_store_id": {
          "type": "string",
          "description": "The ID of the Credential Store of which this Credential Library is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Credential Library.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The Credential Library type."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Credential Library type."
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "credential_type": {
          "type": "string",
          "description": "",
          "title": "The type of credential this library will issue, defaults to Unspecified"
        },
        "credential_mapping_overrides": {
          "type": "object",
          "title": "The credential mapping overrides"
        }
      },
      "title": "CredentialLibrary contains all fields related to an Credential Library resource"
    },
    "controller.api.resources.credentials.v1.Credential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Credential.",
          "readOnly": true
        },
        "credential_store_id": {
          "type": "string",
          "description": "The ID of the Credential Store of which this Credential is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Credential.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The Credential type."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Credential type."
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "Credential contains all fields related to an Credential resource"
    },
    "controller.api.resources.credentialstores.v1.CredentialStore": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Credential Store.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope of which this Credential Store is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Credential Store.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The Credential Store type."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Credential Store type."
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "authorized_collection_actions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true
        }
      },
      "title": "CredentialStore contains all fields related to an Credential Store resource"
    },
    "controller.api.resources.groups.v1.Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Group.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the scope of which this Group is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Group.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set descripton for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "member_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. Contains the list of member IDs in this Group.",
          "readOnly": true
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.groups.v1.Member"
          },
          "description": "Output only. The members of this Group.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "Group contains all fields related to a Group resource"
    },
    "controller.api.resources.groups.v1.Member": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the member.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "Output only. The Scope ID of the member.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.hostcatalogs.v1.HostCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the host.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope of which this Host Catalog is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "plugin_id": {
          "type": "string",
          "description": "The ID of the plugin of which this catalog is created."
        },
        "plugin": {
          "$ref": "#/definitions/controller.api.resources.plugins.v1.PluginInfo",
          "description": "Output only. Plugin information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of Host Catalog."
        },
        "attributes": {
          "type": "object",
          "description": "Attributes specific to the catalog type."
        },
        "secrets": {
          "type": "object",
          "description": "Secrets specific to the catalog type. These are never output."
        },
        "secrets_hmac": {
          "type": "string",
          "description": "Output only. The HMAC of the last secrets supplied via the API, if any.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "authorized_collection_actions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true
        }
      },
      "title": "HostCatalog manages Hosts and Host Sets"
    },
    "controller.api.resources.hosts.v1.Host": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Host.",
          "readOnly": true
        },
        "host_catalog_id": {
          "type": "string",
          "description": "The Host Catalog of which this Host is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "plugin": {
          "$ref": "#/definitions/controller.api.resources.plugins.v1.PluginInfo",
          "description": "Output only. Plugin information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of the resource."
        },
        "host_set_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. A list of Host Sets containing this Host.",
          "readOnly": true
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable to the specific Host type."
        },
        "ip_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only.  The list of ip addresses associated with this host.",
          "readOnly": true
        },
        "dns_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only.  The list of dns addresses associated with this host.",
          "readOnly": true
        },
        "external_id": {
          "type": "string",
          "description": "Output only. The external ID of the host, if any.",
          "readOnly": true
        },
        "external_name": {
          "type": "string",
          "description": "Output only. Refers to the name for a given host provided by the plugin enabled backing service.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "Host contains all fields related to a Host resource"
    },
    "controller.api.resources.hostsets.v1.HostSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Host Set.",
          "readOnly": true
        },
        "host_catalog_id": {
          "type": "string",
          "description": "The Host Catalog of which this Host Set is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "plugin": {
          "$ref": "#/definitions/controller.api.resources.plugins.v1.PluginInfo",
          "description": "Output only. Plugin information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of the Host Set."
        },
        "host_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. A list of Hosts in this Host Set.",
          "readOnly": true
        },
        "preferred_endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "multiple possible endpoints for a host. Preferences are specified by\n\"cidr:\u003cvalid IPv4/6 CIDR\u003e\" or \"dns:\u003cglobbed name\u003e\", specifying which IP\naddress or DNS name out of a host's available possibilities should be\npreferred. If no preferences are specified, a value will be chosen from\namong all avialable values using a built-in priority order. May not be\nvalid for all plugin types."
        },
        "sync_interval_seconds": {
          "type": "integer",
          "format": "int32",
          "description": "An interger number of seconds indicating the amount of time that should\nelapse between syncs of the host set. The interval will be applied to the\nend of the previous sync operation, not the start. Setting to -1 will\ndisable syncing for that host set; setting to zero will cause the set to\nuse Boundary's default. The default may change between releases. May not\nbe valid for all plugin types."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Host Set type."
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "HostSet is a collection of Hosts created and managed by a Host Catalog"
    },
    "controller.api.resources.managedgroups.v1.ManagedGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the ManagedGroup.",
          "readOnly": true
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for the ManagedGroup.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of this ManagedGroup."
        },
        "auth_method_id": {
          "type": "string",
          "description": "The ID of the Auth Method that is associated with this ManagedGroup."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific ManagedGroup type."
        },
        "member_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The IDs of the current set of members (accounts) that are associated with this ManagedGroup.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "ManagedGroup contains all fields related to an ManagedGroup resource"
    },
    "controller.api.resources.plugins.v1.PluginInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Plugin.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the plugin resource in boundary, if any.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Output only. The description of the plugin in boundary, if any.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.roles.v1.Grant": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string",
          "description": "Output only. The original user-supplied string.",
          "readOnly": true
        },
        "canonical": {
          "type": "string",
          "description": "Output only. The canonically-formatted string.",
          "readOnly": true
        },
        "json": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.GrantJson",
          "description": "Output only. The JSON representation of the grant.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.roles.v1.GrantJson": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID, if set.\nDeprecated: use \"ids\" instead.",
          "readOnly": true
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The IDs, if set.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Output only. The type, if set.",
          "readOnly": true
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The actions.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.roles.v1.Principal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the principal.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Output only. The type of the principal.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "Output only. The Scope of the principal.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.roles.v1.Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Role.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope containing this Role."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "grant_scope_id": {
          "type": "string",
          "description": "The Scope the grants will apply to. If the Role is at the global scope, this can be an org or project. If the Role is at an org scope, this can be a project within the org. It is invalid for this to be anything other than the Role's scope when the Role's scope is a project."
        },
        "principal_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The IDs (only) of principals that are assigned to this role.",
          "readOnly": true
        },
        "principals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.roles.v1.Principal"
          },
          "description": "Output only. The principals that are assigned to this role.",
          "readOnly": true
        },
        "grant_strings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The grants that this role provides for its principals.",
          "readOnly": true
        },
        "grants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.roles.v1.Grant"
          },
          "description": "Output only. The parsed grant information.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "Role contains all fields related to a Role resource"
    },
    "controller.api.resources.scopes.v1.Key": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Key."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Scope information for this resource."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose of the Key."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this Key was created."
        },
        "type": {
          "type": "string",
          "description": "The type of the Key."
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.scopes.v1.KeyVersion"
          },
          "description": "The versions of the key."
        }
      },
      "description": "Key contains all fields related to a Key in a Scope."
    },
    "controller.api.resources.scopes.v1.KeyVersion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the key version."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The iteration of the Key that this version represents."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "When this version was created."
        }
      },
      "title": "KeyVersion describes a specific version of a key and holds the actual key material"
    },
    "controller.api.resources.scopes.v1.KeyVersionDestructionJob": {
      "type": "object",
      "properties": {
        "key_version_id": {
          "type": "string",
          "description": "The ID of the Key version this job relates to."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Scope information for this resource."
        },
        "status": {
          "type": "string",
          "description": "The current status of the key version destruction job. One of \"pending\", \"running\" or \"completed\"."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this key version destruction job was created."
        },
        "completed_count": {
          "type": "string",
          "format": "int64",
          "description": "The number of rows that have been successfully re-encrypted with a new key version.\nAll rows must be re-encrypted before the key version can be destroyed."
        },
        "total_count": {
          "type": "string",
          "format": "int64",
          "description": "The total number of rows that need re-encrypting."
        }
      },
      "description": "KeyVersionDestructionJob holds information about a pending key version destruction job."
    },
    "controller.api.resources.scopes.v1.Scope": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Scope.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope this resource is in. If this is the \"global\" Scope this field will be empty."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set descripton for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of the resource."
        },
        "primary_auth_method_id": {
          "type": "string",
          "description": "",
          "title": "The ID of the primary auth method for this scope.  A primary auth method\nis allowed to vivify users when new accounts are created and is the source for the users account info"
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "authorized_collection_actions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true
        }
      },
      "title": "Scope contains all fields related to a Scope resource"
    },
    "controller.api.resources.scopes.v1.ScopeInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Scope.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Output only. The type of the Scope.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the Scope, if any.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Output only. The description of the Scope, if any.",
          "readOnly": true
        },
        "parent_scope_id": {
          "type": "string",
          "description": "Output only. The ID of the parent Scope, if any. This field will be empty if this is the \"global\" scope.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.sessionrecordings.v1.ChannelRecording": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Channel recording."
        },
        "bytes_up": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of bytes uploaded from the client in the Channel."
        },
        "bytes_down": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of bytes downloaded to the client in the Channel."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Channel was created in the controller."
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the most recent update to the Channel."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Channel started."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Channel ended."
        },
        "duration": {
          "type": "string",
          "description": "The total duration of the Channel."
        },
        "mime_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "MimeTypes define the mime types that can\nbe used to consume the recording of this Channel.\nThe only supported mime type is \"application/x-asciicast\"."
        }
      },
      "description": "ChannelRecording contains recorded information about a single Channel within a Connection.\nChannels are only present in multiplexed protocols, such as SSH."
    },
    "controller.api.resources.sessionrecordings.v1.ConnectionRecording": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Connection recording."
        },
        "bytes_up": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of bytes uploaded from the client in the Connection.\nThis includes any protocol overhead."
        },
        "bytes_down": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of bytes downloaded to the client in the Connection.\nThis includes any protocol overhead."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Connection was created in the controller."
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the most recent update to the Connection."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Connection started."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Connection ended."
        },
        "duration": {
          "type": "string",
          "description": "The total duration of the Connection."
        },
        "mime_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "MimeTypes define the mime types that can\nbe used to consume the recording of this Connection.\nNo mime types are currently supported."
        },
        "channel_recordings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.ChannelRecording"
          },
          "description": "Optionally, the channels used in this Connection,\nif it is using a multiplexed protocol, such as SSH."
        }
      },
      "description": "ConnectionRecording contains the recording of a single Connection within a Session."
    },
    "controller.api.resources.sessionrecordings.v1.Credential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Credential."
        },
        "credential_store": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.CredentialStore",
          "description": "The Credential Store of which this Credential is a part."
        },
        "name": {
          "type": "string",
          "description": "The name of the credential."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description."
        },
        "purposes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The purposes for which this Credential was attached to the sesssion."
        },
        "type": {
          "type": "string",
          "description": "The Credential type."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Credential type."
        }
      },
      "title": "Credential contains fields related to an Credential resource"
    },
    "controller.api.resources.sessionrecordings.v1.CredentialLibrary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Credential Library."
        },
        "credential_store": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.CredentialStore",
          "description": "The credential store of which this library is a part."
        },
        "name": {
          "type": "string",
          "description": "Optional name of this Credential Library."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description of this Credential Library."
        },
        "purposes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The purposes for which this CredentialLibrary was attached to the sesssion."
        },
        "type": {
          "type": "string",
          "description": "The Credential Library type."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Credential Library type."
        }
      },
      "title": "CredentialLibrary contains all fields related to an Credential Library resource"
    },
    "controller.api.resources.sessionrecordings.v1.CredentialStore": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Credential Store."
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope of which this Credential Store is a part."
        },
        "name": {
          "type": "string",
          "description": "The name for identification purposes if set."
        },
        "description": {
          "type": "string",
          "description": "The description for identification purposes if set."
        },
        "type": {
          "type": "string",
          "description": "The Credential Store type."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Credential Store type."
        }
      },
      "title": "CredentialStore contains all fields related to a Credential Store resource"
    },
    "controller.api.resources.sessionrecordings.v1.Host": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "",
          "title": "The ID of the Host"
        },
        "host_catalog": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.HostCatalog",
          "description": "",
          "title": "The Host Catalog this Host is in"
        },
        "name": {
          "type": "string",
          "description": "The name of the Host, if set."
        },
        "description": {
          "type": "string",
          "description": "The description of the Host, if set."
        },
        "type": {
          "type": "string",
          "description": "",
          "title": "The type of the host. This will be either \"static\" or \"plugin\""
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Host."
        },
        "external_id": {
          "type": "string",
          "description": "The external id of the Host, if any."
        },
        "external_name": {
          "type": "string",
          "description": "The external name of the Host, if any."
        }
      },
      "description": "Host describes the Host that was chosen for the recorded session."
    },
    "controller.api.resources.sessionrecordings.v1.HostCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "",
          "title": "The ID of the Host Catalog"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "",
          "title": "The scope that the Host Catalog is in"
        },
        "plugin_id": {
          "type": "string",
          "description": "The plugin id used by this Host Catalog, if any."
        },
        "name": {
          "type": "string",
          "description": "",
          "title": "The name of the Host Catalog, if set"
        },
        "description": {
          "type": "string",
          "description": "The description of the Host Catalog."
        },
        "type": {
          "type": "string",
          "description": "",
          "title": "The type of the Host Catalog.  This will be either \"static\" or \"plugin\""
        },
        "attributes": {
          "type": "object",
          "description": "The attributes of the Host Catalog."
        }
      },
      "description": "HostCatalog describes the HostCatalog that contains the host chosen for the\nrecorded session."
    },
    "controller.api.resources.sessionrecordings.v1.SessionRecording": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Session recording."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "The scope that the Session Recording is in.\nThis is inferred from the storage bucket associated\nwith the target."
        },
        "session_id": {
          "type": "string",
          "description": "The ID of the Session which this Session Recording recorded."
        },
        "storage_bucket_id": {
          "type": "string",
          "description": "The ID of the Storage Bucket for the Target of this Session Recording."
        },
        "bytes_up": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of bytes uploaded from the client in the Session.\nThis includes all bytes uploaded over all Connections, including\nany protocol overhead."
        },
        "bytes_down": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of bytes downloaded to the client in the Session.\nThis includes all bytes downloaded over all Connections, including\nany protocol overhead."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Session Recording was created in the controller."
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the most recent update to the Session Recording."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Session started."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the Session ended."
        },
        "duration": {
          "type": "string",
          "description": "The total duration of the Session."
        },
        "type": {
          "type": "string",
          "description": "Type of the Session that was recorded (e.g. ssh)."
        },
        "state": {
          "type": "string",
          "description": "The current state of the session recording. One of\n\"started\", \"available\" and \"unknown\"."
        },
        "error_details": {
          "type": "string",
          "description": "Any error seen during the closing of the session recording.\nCurrently only set if state is \"unknown\"."
        },
        "mime_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "MimeTypes define the mime types that can\nbe used to consume the recording of this Session.\nNo mime types are currently supported."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of the Session; that is, the address to which the egress worker connected."
        },
        "connection_recordings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.ConnectionRecording"
          },
          "description": "The recordings of the connections that were created in the Session.\nThis field may be unset when listing Session recordings."
        },
        "create_time_values": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.ValuesAtTime",
          "description": "create_time_values contains the values of related fields at the time\nthis Session Recording was created. This may be unset when listing."
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The available actions on this resource for this user."
        }
      },
      "description": "SessionRecording contains information about the recording of a Session."
    },
    "controller.api.resources.sessionrecordings.v1.Target": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Target."
        },
        "name": {
          "type": "string",
          "description": "The name of the Target, if set."
        },
        "description": {
          "type": "string",
          "description": "The description of the Target, if set."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "The scope that the Target is in."
        },
        "session_max_seconds": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum total lifetime of a created Session, in seconds."
        },
        "session_connection_limit": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of connections allowed in a Session.  Unlimited is indicated by the value -1."
        },
        "worker_filter": {
          "type": "string",
          "description": "Optional boolean expression to filter the workers that are allowed to satisfy this request."
        },
        "egress_worker_filter": {
          "type": "string",
          "description": "Optional boolean expressions to filter the egress workers that are allowed to satisfy this request."
        },
        "ingress_worker_filter": {
          "type": "string",
          "description": "Optional boolean expressions to filter the ingress workers that are allowed to satisfy this request."
        },
        "type": {
          "type": "string",
          "description": "The type of the Target."
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Target."
        }
      },
      "description": "Target describes a target in Boundary."
    },
    "controller.api.resources.sessionrecordings.v1.User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the User."
        },
        "name": {
          "type": "string",
          "description": "The name of the User that created the Session."
        },
        "description": {
          "type": "string",
          "description": "The description of the User that created the Session."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "The scope that the User is in."
        }
      },
      "description": "User describes an authenticated user in Boundary."
    },
    "controller.api.resources.sessionrecordings.v1.ValuesAtTime": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.User",
          "description": "Information about the User that created the Session."
        },
        "target": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.Target",
          "description": "Information about the Target the Session connected to."
        },
        "host": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.Host",
          "description": "Information about the Host chosen for the session."
        },
        "credentials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.Credential"
          },
          "description": "Information about the Credentials used for this session."
        },
        "credential_libraries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.CredentialLibrary"
          },
          "description": "Information about the Credential Libraries used for this session."
        }
      },
      "description": "ValuesAtTime contain information about other Boundary resources as they\nwere at a certain time through the lifetime of the Session Recording."
    },
    "controller.api.resources.sessions.v1.Connection": {
      "type": "object",
      "properties": {
        "client_tcp_address": {
          "type": "string",
          "description": "",
          "title": "client_tcp_address of the connection"
        },
        "client_tcp_port": {
          "type": "integer",
          "format": "int64",
          "description": "",
          "title": "client_tcp_port of the connection"
        },
        "endpoint_tcp_address": {
          "type": "string",
          "description": "",
          "title": "endpoint_tcp_address of the connection"
        },
        "endpoint_tcp_port": {
          "type": "integer",
          "format": "int64",
          "description": "",
          "title": "endpoint_tcp_port of the connection"
        },
        "bytes_up": {
          "type": "string",
          "format": "int64",
          "description": "",
          "title": "bytes_up of the connection"
        },
        "bytes_down": {
          "type": "string",
          "format": "int64",
          "description": "",
          "title": "bytes_down of the connection"
        },
        "closed_reason": {
          "type": "string",
          "description": "",
          "title": "closed_reason of the connection"
        }
      },
      "title": "Connection contains information about a specific connection in a session"
    },
    "controller.api.resources.sessions.v1.Session": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Session.",
          "readOnly": true
        },
        "target_id": {
          "type": "string",
          "description": "Output only. The ID of the Target that created this Session.",
          "readOnly": true
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used when canceling this Session to ensure that the operation is acting on a known session state."
        },
        "type": {
          "type": "string",
          "description": "Output only. Type of the Session (e.g. tcp).",
          "readOnly": true
        },
        "expiration_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. After this time the connection will be expired, e.g. forcefully terminated.",
          "readOnly": true
        },
        "auth_token_id": {
          "type": "string",
          "description": "Output only. The ID of the Auth Token used to authenticate.",
          "readOnly": true
        },
        "user_id": {
          "type": "string",
          "description": "Output only. The ID of the User that requested the Session.",
          "readOnly": true
        },
        "host_set_id": {
          "type": "string",
          "description": "Output only. The Host Set sourcing the Host for this Session.",
          "readOnly": true
        },
        "host_id": {
          "type": "string",
          "description": "Output only. The Host used by the Session.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "Output only. The Scope of the Session.",
          "readOnly": true
        },
        "endpoint": {
          "type": "string",
          "description": "Output only. The endpoint of the Session; that is, the address to which the worker is proxying data.",
          "readOnly": true
        },
        "states": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessions.v1.SessionState"
          },
          "description": "Output only. The states of this Session in descending order from the current state to the first.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Output only. The current status of this Session.",
          "readOnly": true
        },
        "certificate": {
          "type": "string",
          "format": "byte",
          "description": "Output only. The certificate generated for the session. Raw DER bytes.",
          "readOnly": true
        },
        "termination_reason": {
          "type": "string",
          "description": "Output only. If the session is terminated, this provides a short description as to why.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessions.v1.Connection"
          },
          "description": "Output only. The associated connections with this session.",
          "readOnly": true
        }
      },
      "title": "Session contains all fields related to a Session resource"
    },
    "controller.api.resources.sessions.v1.SessionState": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "The status of the Session, e.g. \"pending\", \"active\", \"canceling\", \"terminated\"."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time the Session entered this state.",
          "readOnly": true
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time the Session stopped being in this state.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.storagebuckets.v1.StorageBucket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the storage bucket.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope of which this storage bucket is a part."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "plugin_id": {
          "type": "string",
          "description": "The ID of the plugin of which this storage bucket is created."
        },
        "plugin": {
          "$ref": "#/definitions/controller.api.resources.plugins.v1.PluginInfo",
          "description": "Output only. Plugin information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "bucket_name": {
          "type": "string",
          "description": "The name of the bucket within the external object store service."
        },
        "bucket_prefix": {
          "type": "string",
          "description": "The prefix used to organize the data held within the external object store."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of Storage Bucket (currently only plugin)."
        },
        "attributes": {
          "type": "object",
          "description": "Attributes specific to the catalog type."
        },
        "secrets": {
          "type": "object",
          "description": "Secrets specific to the storage bucket type. These are never output."
        },
        "secrets_hmac": {
          "type": "string",
          "description": "Output only. The HMAC of the last secrets supplied via the API, if any.",
          "readOnly": true
        },
        "worker_filter": {
          "type": "string",
          "description": "",
          "title": "Filters to the worker(s) that can handle requests for this storage bucket"
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        }
      },
      "title": "StorageBucket manages external object stores"
    },
    "controller.api.resources.targets.v1.CredentialSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Credential. May be empty if the credential is dynamically generated from a library."
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the Credential source.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Output only. The description of the Credential source.",
          "readOnly": true
        },
        "credential_store_id": {
          "type": "string",
          "description": "Output only. The Credential Store to which this Credential source belongs.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Output only. The type of the credential source (e.g. \"vault\"; not the type of the credential itself).",
          "readOnly": true
        },
        "credential_type": {
          "type": "string",
          "description": "Output only. The type of the credential, empty if unspecified.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.targets.v1.HostSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Host Set.",
          "readOnly": true
        },
        "host_catalog_id": {
          "type": "string",
          "description": "Output only. The Host Catalog to which this Host Source belongs.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.targets.v1.SessionAuthorization": {
      "type": "object",
      "properties": {
        "session_id": {
          "type": "string",
          "description": "Output only. The ID of the Session.",
          "readOnly": true
        },
        "target_id": {
          "type": "string",
          "description": "Output only. The ID of the Target authorizing this Session.",
          "readOnly": true
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "user_id": {
          "type": "string",
          "description": "Output only. The User for which this Session was authorized.",
          "readOnly": true
        },
        "host_set_id": {
          "type": "string",
          "description": "Output only. The Host Set containing the Host being used for this Session.",
          "readOnly": true
        },
        "host_id": {
          "type": "string",
          "description": "Output only. The Host whose address is being used as the endpoint for this Session.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Output only. Type of the Session (e.g. tcp, ssh, etc.).",
          "readOnly": true
        },
        "authorization_token": {
          "type": "string",
          "description": "Output only. The marshaled SessionAuthorizationData message containing all information that the proxy needs.",
          "readOnly": true
        },
        "endpoint": {
          "type": "string",
          "description": "Output only. The endpoint address that the worker will connect to, useful for setting TLS parameters.",
          "readOnly": true
        },
        "credentials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.targets.v1.SessionCredential"
          },
          "description": "Output only. The credentials for this session.",
          "readOnly": true
        }
      },
      "description": "SessionAuthorization contains all fields related to authorization for a Session. It's in the Targets package because it's returned by a Target's authorize action."
    },
    "controller.api.resources.targets.v1.SessionCredential": {
      "type": "object",
      "properties": {
        "credential_source": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialSource",
          "description": "Output only. The credential source information.",
          "readOnly": true
        },
        "secret": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.SessionSecret",
          "description": "Output only. The secret of this credential base64 encoded.",
          "readOnly": true
        },
        "credential": {
          "type": "object",
          "description": "Output only. The fields of the strongly typed credential, empty if the credential type of the\ncredential source is unspecified.",
          "readOnly": true
        }
      },
      "description": "Credential information for a session."
    },
    "controller.api.resources.targets.v1.SessionSecret": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string",
          "description": "Output only. The base64-encoded value representing the raw bytes from the\ncredential provider.",
          "readOnly": true
        },
        "decoded": {
          "type": "object",
          "description": "Output only. The decoded raw string, if a JSON object.",
          "readOnly": true
        }
      },
      "description": "The actual secret for a session credential."
    },
    "controller.api.resources.targets.v1.Target": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the resource.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The Scope of of this resource. This must be defined for creation of this resource, but is otherwise output only."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Required name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "type": {
          "type": "string",
          "description": "The type of the Target."
        },
        "host_source_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The IDs of the Host Sources associated with this Target.",
          "readOnly": true
        },
        "host_sources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.targets.v1.HostSource"
          },
          "description": "Output only. The Host Sources associated with this Target.",
          "readOnly": true
        },
        "session_max_seconds": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum total lifetime of a created Session, in seconds."
        },
        "session_connection_limit": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of connections allowed in a Session.  Unlimited is indicated by the value -1."
        },
        "worker_filter": {
          "type": "string",
          "description": "Optional boolean expression to filter the workers that are allowed to satisfy this request.\nDeprecated; use egress or ingress worker filters instead."
        },
        "egress_worker_filter": {
          "type": "string",
          "description": "Optional boolean expressions to filter the egress workers that are allowed to satisfy this request."
        },
        "ingress_worker_filter": {
          "type": "string",
          "description": "Optional boolean expressions to filter the ingress workers that are allowed to satisfy this request.\nUnsupported on OSS."
        },
        "application_credential_source_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The IDs of the application credential source ids associated with this Target.\nDeprecated use \"brokered_credential_source_ids\" instead.",
          "readOnly": true
        },
        "application_credential_sources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialSource"
          },
          "description": "Output only. The application credential sources associated with this Target.\nDeprecated use \"brokered_credential_sources\" instead.",
          "readOnly": true
        },
        "brokered_credential_source_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The IDs of the brokered credential source ids associated with this Target.",
          "readOnly": true
        },
        "brokered_credential_sources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialSource"
          },
          "description": "Output only. The brokered credential sources associated with this Target.",
          "readOnly": true
        },
        "injected_application_credential_source_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The IDs of the injected application credential source ids associated with this Target.",
          "readOnly": true
        },
        "injected_application_credential_sources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialSource"
          },
          "description": "Output only. The injected application credential sources associated with this Target.",
          "readOnly": true
        },
        "attributes": {
          "type": "object",
          "description": "The attributes that are applicable for the specific Target."
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "address": {
          "type": "string",
          "description": "Optional string value that represents a network resource and is used when establishing a session."
        }
      },
      "title": "Target contains all fields related to a Target resource"
    },
    "controller.api.resources.users.v1.Account": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the Account.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "Output only. The Scope containing the Account.",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.users.v1.User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the User.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope this resource is in."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "account_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. Contains the list of Account IDs linked to this User.",
          "readOnly": true
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.users.v1.Account"
          },
          "description": "Output only. The Accounts linked to this User.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for this user.",
          "readOnly": true
        },
        "login_name": {
          "type": "string",
          "description": "",
          "title": "Output only. login_name is a string that maps to the user's account \"login\nname\" from the scope's primary auth method",
          "readOnly": true
        },
        "full_name": {
          "type": "string",
          "description": "",
          "title": "Output only. full_name is a string that maps to the user's account name\nfrom the scope's primary auth method",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "description": "",
          "title": "Output only. email is a string that maps to the user's account email from\nthe scope's primary auth method",
          "readOnly": true
        },
        "primary_account_id": {
          "type": "string",
          "description": "",
          "title": "Output only. primary_account_id is a string that maps to the user's account\npublic_id from the scope's primary auth method",
          "readOnly": true
        }
      },
      "title": "User contains all fields related to a User resource"
    },
    "controller.api.resources.workers.v1.Certificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "",
          "title": "Output only. The ID of the certificate",
          "readOnly": true
        },
        "public_key_sha256": {
          "type": "string",
          "description": "",
          "title": "Output only. The public key of the cert authority",
          "readOnly": true
        },
        "not_before_time": {
          "type": "string",
          "format": "date-time",
          "description": "",
          "title": "Output only. The time before which this CA is invalid",
          "readOnly": true
        },
        "not_after_time": {
          "type": "string",
          "format": "date-time",
          "description": "",
          "title": "Output only. The time after which this CA is invalid",
          "readOnly": true
        }
      }
    },
    "controller.api.resources.workers.v1.CertificateAuthority": {
      "type": "object",
      "properties": {
        "certs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.workers.v1.Certificate"
          },
          "title": ""
        }
      }
    },
    "controller.api.resources.workers.v1.Worker": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The ID of the User.",
          "readOnly": true
        },
        "scope_id": {
          "type": "string",
          "description": "The ID of the Scope this resource is in."
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Optional name for identification purposes. Can only be set through the API\nfor `pki`-type workers; read-only for `kms`-type workers."
        },
        "description": {
          "type": "string",
          "description": "Optional user-set description for identification purposes. Can only be set\nthrough the API for `pki`-type workers; read-only for `kms`-type workers."
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was created.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this resource was last updated.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version."
        },
        "address": {
          "type": "string",
          "description": "Output only. The address that this worker is reachable at, as sourced from\nthe worker's configuration file.",
          "readOnly": true
        },
        "canonical_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": "Output only. The deduplicated union of the tags reported by the worker from\nits configuration and any tags added through other means.  This is used\nwhen applying worker filters.",
          "readOnly": true
        },
        "config_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": "Output only. The tags set in the worker's configuration file.",
          "readOnly": true
        },
        "last_status_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this worker daemon last reported its status.",
          "readOnly": true
        },
        "worker_generated_auth_token": {
          "type": "string",
          "description": "",
          "title": "worker_generated_auth_token is input only. Supports the worker led node\nenrollment flow where this credentials token is produced by a worker. This\ntoken is a base58 encoded types.FetchNodeCredentialsRequest from\nhttps://github.com/hashicorp/nodeenrollment"
        },
        "controller_generated_activation_token": {
          "type": "string",
          "description": "Output only. An activation token that can be given to a worker to correlate\nit to the created resource.",
          "readOnly": true
        },
        "active_connection_count": {
          "type": "integer",
          "format": "int64",
          "description": "Output only. The number of connections that this worker is currently handling.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Output only. The type of the worker, denoted by how it authenticates: `pki`\nor `kms`.",
          "readOnly": true
        },
        "api_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": "Output only. The api tags set for the worker.",
          "readOnly": true
        },
        "release_version": {
          "type": "string",
          "description": "Output only. The version of the Boundary binary the worker is running.",
          "readOnly": true
        },
        "directly_connected_downstream_workers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The ids of the workers directly connected to this worker.",
          "readOnly": true
        },
        "authorized_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The available actions on this resource for the requester.",
          "readOnly": true
        }
      },
      "title": "Worker contains all fields related to a Worker resource"
    },
    "controller.api.services.v1.AddGroupMembersResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.AddHostSetHostsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.AddRoleGrantsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.AddRolePrincipalsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.AddTargetCredentialSourcesResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.AddTargetHostSourcesResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.AddUserAccountsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.AddWorkerTagsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
        }
      }
    },
    "controller.api.services.v1.AuthenticateResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the token returned. Either \"cookie\" or \"token\"."
        },
        "attributes": {
          "type": "object",
          "description": "Valid keys and values depend on the type of Auth Method as well as the command."
        },
        "command": {
          "type": "string",
          "description": "The command that was performed."
        }
      }
    },
    "controller.api.services.v1.AuthorizeSessionResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.SessionAuthorization"
        }
      }
    },
    "controller.api.services.v1.CancelSessionResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
        }
      }
    },
    "controller.api.services.v1.ChangePasswordResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      }
    },
    "controller.api.services.v1.ChangeStateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        }
      }
    },
    "controller.api.services.v1.CreateAccountResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      }
    },
    "controller.api.services.v1.CreateAuthMethodResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        }
      }
    },
    "controller.api.services.v1.CreateControllerLedResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
        }
      }
    },
    "controller.api.services.v1.CreateCredentialLibraryResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
        }
      }
    },
    "controller.api.services.v1.CreateCredentialResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
        }
      }
    },
    "controller.api.services.v1.CreateCredentialStoreResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
        }
      }
    },
    "controller.api.services.v1.CreateGroupResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.CreateHostCatalogResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
        }
      }
    },
    "controller.api.services.v1.CreateHostResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      }
    },
    "controller.api.services.v1.CreateHostSetResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.CreateManagedGroupResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
        }
      }
    },
    "controller.api.services.v1.CreateRoleResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.CreateScopeResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
        }
      }
    },
    "controller.api.services.v1.CreateStorageBucketResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
        }
      }
    },
    "controller.api.services.v1.CreateTargetResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.CreateUserResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.CreateWorkerLedResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": ""
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
        }
      }
    },
    "controller.api.services.v1.DeleteAccountResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteAuthMethodResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteAuthTokenResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteCredentialLibraryResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteCredentialResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteCredentialStoreResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteGroupResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteHostCatalogResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteHostResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteHostSetResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteManagedGroupResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteRoleResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteScopeResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteStorageBucketResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteTargetResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteUserResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteWorkerResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DestroyKeyVersionRequest": {
      "type": "object",
      "properties": {
        "scope_id": {
          "type": "string",
          "title": ""
        },
        "key_version_id": {
          "type": "string",
          "title": ""
        }
      }
    },
    "controller.api.services.v1.DestroyKeyVersionResponse": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "Destruction state. One of \"pending\" or \"completed\".\nUse GET /v1/scopes/{scope_id}:list-key-version-destruction-jobs\nto monitor pending destruction jobs."
        }
      }
    },
    "controller.api.services.v1.GetAccountResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      }
    },
    "controller.api.services.v1.GetAuthMethodResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        }
      }
    },
    "controller.api.services.v1.GetAuthTokenResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
        }
      }
    },
    "controller.api.services.v1.GetCredentialLibraryResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
        }
      }
    },
    "controller.api.services.v1.GetCredentialResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
        }
      }
    },
    "controller.api.services.v1.GetCredentialStoreResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
        }
      }
    },
    "controller.api.services.v1.GetGroupResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.GetHostCatalogResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
        }
      }
    },
    "controller.api.services.v1.GetHostResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      }
    },
    "controller.api.services.v1.GetHostSetResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.GetManagedGroupResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
        }
      }
    },
    "controller.api.services.v1.GetRoleResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.GetScopeResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
        }
      }
    },
    "controller.api.services.v1.GetSessionRecordingResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.SessionRecording",
          "description": "The requested recording."
        }
      }
    },
    "controller.api.services.v1.GetSessionResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
        }
      }
    },
    "controller.api.services.v1.GetStorageBucketResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
        }
      }
    },
    "controller.api.services.v1.GetTargetResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.GetUserResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.GetWorkerResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
        }
      }
    },
    "controller.api.services.v1.ListAccountsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
          }
        }
      }
    },
    "controller.api.services.v1.ListAuthMethodsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
          }
        }
      }
    },
    "controller.api.services.v1.ListAuthTokensResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
          }
        }
      }
    },
    "controller.api.services.v1.ListCredentialLibrariesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
          }
        }
      }
    },
    "controller.api.services.v1.ListCredentialStoresResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
          }
        }
      }
    },
    "controller.api.services.v1.ListCredentialsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
          }
        }
      }
    },
    "controller.api.services.v1.ListGroupsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
          }
        }
      }
    },
    "controller.api.services.v1.ListHostCatalogsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
          }
        }
      }
    },
    "controller.api.services.v1.ListHostSetsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
          }
        }
      }
    },
    "controller.api.services.v1.ListHostsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
          }
        }
      }
    },
    "controller.api.services.v1.ListKeyVersionDestructionJobsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.scopes.v1.KeyVersionDestructionJob"
          }
        }
      }
    },
    "controller.api.services.v1.ListKeysResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.scopes.v1.Key"
          }
        }
      }
    },
    "controller.api.services.v1.ListManagedGroupsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
          }
        }
      }
    },
    "controller.api.services.v1.ListRolesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
          }
        }
      }
    },
    "controller.api.services.v1.ListScopesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
          }
        }
      }
    },
    "controller.api.services.v1.ListSessionRecordingsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessionrecordings.v1.SessionRecording"
          },
          "description": "All Session recordings, ordered by start_time descending (most recently started first)."
        }
      }
    },
    "controller.api.services.v1.ListSessionsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
          }
        }
      }
    },
    "controller.api.services.v1.ListStorageBucketsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
          }
        }
      }
    },
    "controller.api.services.v1.ListTargetsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
          }
        }
      }
    },
    "controller.api.services.v1.ListUsersResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.users.v1.User"
          }
        }
      }
    },
    "controller.api.services.v1.ListWorkersResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
          }
        }
      }
    },
    "controller.api.services.v1.ReadCertificateAuthorityResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.CertificateAuthority"
        }
      }
    },
    "controller.api.services.v1.ReinitializeCertificateAuthorityResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.CertificateAuthority"
        }
      }
    },
    "controller.api.services.v1.RemoveGroupMembersResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.RemoveHostSetHostsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.RemoveRoleGrantsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.RemoveRolePrincipalsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.RemoveTargetCredentialSourcesResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.RemoveTargetHostSourcesResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.RemoveUserAccountsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.RemoveWorkerTagsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
        }
      }
    },
    "controller.api.services.v1.RotateKeysRequest": {
      "type": "object",
      "properties": {
        "scope_id": {
          "type": "string",
          "title": ""
        },
        "rewrap": {
          "type": "boolean",
          "title": ""
        }
      }
    },
    "controller.api.services.v1.RotateKeysResponse": {
      "type": "object"
    },
    "controller.api.services.v1.SetGroupMembersResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.SetHostSetHostsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.SetPasswordResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      }
    },
    "controller.api.services.v1.SetRoleGrantsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.SetRolePrincipalsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.SetTargetCredentialSourcesResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.SetTargetHostSourcesResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.SetUserAccountsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.SetWorkerTagsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
        }
      }
    },
    "controller.api.services.v1.UpdateAccountResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      }
    },
    "controller.api.services.v1.UpdateAuthMethodResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        }
      }
    },
    "controller.api.services.v1.UpdateCredentialLibraryResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
        }
      }
    },
    "controller.api.services.v1.UpdateCredentialResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentials.v1.Credential"
        }
      }
    },
    "controller.api.services.v1.UpdateCredentialStoreResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
        }
      }
    },
    "controller.api.services.v1.UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.UpdateHostCatalogResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
        }
      }
    },
    "controller.api.services.v1.UpdateHostResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      }
    },
    "controller.api.services.v1.UpdateHostSetResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.UpdateManagedGroupResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
        }
      }
    },
    "controller.api.services.v1.UpdateRoleResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.UpdateScopeResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
        }
      }
    },
    "controller.api.services.v1.UpdateStorageBucketResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.storagebuckets.v1.StorageBucket"
        }
      }
    },
    "controller.api.services.v1.UpdateTargetResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      }
    },
    "controller.api.services.v1.UpdateUserResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.UpdateWorkerResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.workers.v1.Worker"
        }
      }
    },
    "google.api.HttpBody": {
      "type": "object",
      "properties": {
        "content_type": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/google.protobuf.Any"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest)\n        returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody)\n        returns (google.protobuf.Empty);\n\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    }
  }
}
