{
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "controller.api.resources.accounts.v1.Account": {
      "properties": {
        "attributes": {
          "description": "The attributes that are applicable for the specific Account type.",
          "type": "object"
        },
        "auth_method_id": {
          "description": "The ID of the Auth Method that is associated with this Account.",
          "type": "string"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Account.",
          "readOnly": true,
          "type": "string"
        },
        "managed_group_ids": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "title": "Output only. managed_group_ids indicates IDs of the managed groups that currently contain this account",
          "type": "array"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for the Account.",
          "readOnly": true
        },
        "type": {
          "description": "The type of this Account.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "Account contains all fields related to an Account resource",
      "type": "object"
    },
    "controller.api.resources.authmethods.v1.AuthMethod": {
      "properties": {
        "attributes": {
          "description": "The attributes that are applicable for the specific Auth Method type.",
          "type": "object"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "authorized_collection_actions": {
          "additionalProperties": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true,
          "type": "object"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Auth Method.",
          "readOnly": true,
          "type": "string"
        },
        "is_primary": {
          "description": "Output only. Whether this auth method is the primary auth method for it's scope.\nTo change this value update the primary_auth_method_id field on the scope.",
          "readOnly": true,
          "type": "boolean"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Auth method.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The ID of the Scope of which this Auth Method is a part.",
          "type": "string"
        },
        "type": {
          "description": "The Auth Method type.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "AuthMethod contains all fields related to an Auth Method resource",
      "type": "object"
    },
    "controller.api.resources.authtokens.v1.AuthToken": {
      "properties": {
        "account_id": {
          "description": "Output only. The ID of the Account associated with this Auth Token.",
          "readOnly": true,
          "type": "string"
        },
        "approximate_last_used_time": {
          "description": "Output only. The approximate time this Auth Token was last used.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "auth_method_id": {
          "description": "Output only. The ID of the Auth Method associated with this Auth Token.",
          "readOnly": true,
          "type": "string"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "expiration_time": {
          "description": "Output only. The time this Auth Token expires.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Auth Token.",
          "readOnly": true,
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The Scope in which this Auth Token was generated.",
          "type": "string"
        },
        "token": {
          "description": "Output only. The token value, which will only be populated after authentication and is only ever visible to the end user whose login request resulted in this Auth Token being created.",
          "readOnly": true,
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "user_id": {
          "description": "Output only. The ID of the User associated with this Auth Token.",
          "readOnly": true,
          "type": "string"
        }
      },
      "title": "AuthToken contains all fields related to an Auth Token resource",
      "type": "object"
    },
    "controller.api.resources.credentiallibraries.v1.CredentialLibrary": {
      "properties": {
        "attributes": {
          "description": "The attributes that are applicable for the specific Credential Library type.",
          "type": "object"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "credential_mapping_overrides": {
          "title": "The credential mapping overrides",
          "type": "object"
        },
        "credential_store_id": {
          "description": "The ID of the Credential Store of which this Credential Library is a part.",
          "type": "string"
        },
        "credential_type": {
          "title": "The type of credential this library will issue, defaults to Unspecified",
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Credential Library.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Credential Library.",
          "readOnly": true
        },
        "type": {
          "description": "The Credential Library type.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "CredentialLibrary contains all fields related to an Credential Library resource",
      "type": "object"
    },
    "controller.api.resources.credentialstores.v1.CredentialStore": {
      "properties": {
        "attributes": {
          "description": "The attributes that are applicable for the specific Credential Store type.",
          "type": "object"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "authorized_collection_actions": {
          "additionalProperties": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true,
          "type": "object"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Credential Store.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Credential Store.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The ID of the Scope of which this Credential Store is a part.",
          "type": "string"
        },
        "type": {
          "description": "The Credential Store type.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "CredentialStore contains all fields related to an Credential Store resource",
      "type": "object"
    },
    "controller.api.resources.groups.v1.Group": {
      "properties": {
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set descripton for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Group.",
          "readOnly": true,
          "type": "string"
        },
        "member_ids": {
          "description": "Output only. Contains the list of member IDs in this Group.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "members": {
          "description": "Output only. The members of this Group.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.groups.v1.Member"
          },
          "readOnly": true,
          "type": "array"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this Group.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The ID of the scope of which this Group is a part.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "Group contains all fields related to a Group resource",
      "type": "object"
    },
    "controller.api.resources.groups.v1.Member": {
      "properties": {
        "id": {
          "description": "Output only. The ID of the member.",
          "readOnly": true,
          "type": "string"
        },
        "scope_id": {
          "description": "Output only. The Scope ID of the member.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.hostcatalogs.v1.HostCatalog": {
      "properties": {
        "attributes": {
          "description": "Attributes specific to the catalog type.",
          "type": "object"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "authorized_collection_actions": {
          "additionalProperties": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true,
          "type": "object"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the host.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "plugin": {
          "$ref": "#/definitions/controller.api.resources.plugins.v1.PluginInfo",
          "description": "Output only. Plugin information for this resource.",
          "readOnly": true
        },
        "plugin_id": {
          "description": "The ID of the plugin of which this catalog is created.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The ID of the Scope of which this Host Catalog is a part.",
          "type": "string"
        },
        "secrets": {
          "description": "Secrets specific to the catalog type. These are never output.",
          "type": "object"
        },
        "secrets_hmac": {
          "description": "Output only. The HMAC of the last secrets supplied via the API, if any.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "The type of Host Catalog.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "HostCatalog manages Hosts and Host Sets",
      "type": "object"
    },
    "controller.api.resources.hosts.v1.Host": {
      "properties": {
        "attributes": {
          "description": "The attributes that are applicable to the specific Host type.",
          "type": "object"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "dns_names": {
          "description": "Output only.  The list of dns addresses associated with this host.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "external_id": {
          "description": "Output only. The external ID of the host, if any.",
          "readOnly": true,
          "type": "string"
        },
        "host_catalog_id": {
          "description": "The Host Catalog of which this Host is a part.",
          "type": "string"
        },
        "host_set_ids": {
          "description": "Output only. A list of Host Sets containing this Host.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "description": "Output only. The ID of the Host.",
          "readOnly": true,
          "type": "string"
        },
        "ip_addresses": {
          "description": "Output only.  The list of ip addresses associated with this host.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "plugin": {
          "$ref": "#/definitions/controller.api.resources.plugins.v1.PluginInfo",
          "description": "Output only. Plugin information for this resource.",
          "readOnly": true
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "type": {
          "description": "The type of the resource.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "Host contains all fields related to a Host resource",
      "type": "object"
    },
    "controller.api.resources.hostsets.v1.HostSet": {
      "properties": {
        "attributes": {
          "description": "The attributes that are applicable for the specific Host Set type.",
          "type": "object"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "host_catalog_id": {
          "description": "The Host Catalog of which this Host Set is a part.",
          "type": "string"
        },
        "host_ids": {
          "description": "Output only. A list of Hosts in this Host Set.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "description": "Output only. The ID of the Host Set.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "plugin": {
          "$ref": "#/definitions/controller.api.resources.plugins.v1.PluginInfo",
          "description": "Output only. Plugin information for this resource.",
          "readOnly": true
        },
        "preferred_endpoints": {
          "description": "multiple possible endpoints for a host. Preferences are specified by\n\"cidr:\u003cvalid IPv4/6 CIDR\u003e\" or \"dns:\u003cglobbed name\u003e\", specifying which IP\naddress or DNS name out of a host's available possibilities should be\npreferred. If no preferences are specified, a value will be chosen from\namong all avialable values using a built-in priority order. May not be\nvalid for all plugin types.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "sync_interval_seconds": {
          "description": "An interger number of seconds indicating the amount of time that should\nelapse between syncs of the host set. The interval will be applied to the\nend of the previous sync operation, not the start. Setting to -1 will\ndisable syncing for that host set; setting to zero will cause the set to\nuse Boundary's default. The default may change between releases. May not\nbe valid for all plugin types.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "The type of the Host Set.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "HostSet is a collection of Hosts created and managed by a Host Catalog",
      "type": "object"
    },
    "controller.api.resources.managedgroups.v1.ManagedGroup": {
      "properties": {
        "attributes": {
          "description": "The attributes that are applicable for the specific ManagedGroup type.",
          "type": "object"
        },
        "auth_method_id": {
          "description": "The ID of the Auth Method that is associated with this ManagedGroup.",
          "type": "string"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the ManagedGroup.",
          "readOnly": true,
          "type": "string"
        },
        "member_ids": {
          "description": "Output only. The IDs of the current set of members (accounts) that are associated with this ManagedGroup.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for the ManagedGroup.",
          "readOnly": true
        },
        "type": {
          "description": "The type of this ManagedGroup.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "ManagedGroup contains all fields related to an ManagedGroup resource",
      "type": "object"
    },
    "controller.api.resources.plugins.v1.PluginInfo": {
      "properties": {
        "description": {
          "description": "Output only. The description of the plugin in boundary, if any.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Plugin.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Output only. The name of the plugin resource in boundary, if any.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.roles.v1.Grant": {
      "properties": {
        "canonical": {
          "description": "Output only. The canonically-formatted string.",
          "readOnly": true,
          "type": "string"
        },
        "json": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.GrantJson",
          "description": "Output only. The JSON representation of the grant.",
          "readOnly": true
        },
        "raw": {
          "description": "Output only. The original user-supplied string.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.roles.v1.GrantJson": {
      "properties": {
        "actions": {
          "description": "Output only. The actions.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "description": "Output only. The ID, if set.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. The type, if set.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.roles.v1.Principal": {
      "properties": {
        "id": {
          "description": "Output only. The ID of the principal.",
          "readOnly": true,
          "type": "string"
        },
        "scope_id": {
          "description": "Output only. The Scope of the principal.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. The type of the principal.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.roles.v1.Role": {
      "properties": {
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "grant_scope_id": {
          "description": "The Scope the grants will apply to. If the Role is at the global scope, this can be an org or project. If the Role is at an org scope, this can be a project within the org. It is invalid for this to be anything other than the Role's scope when the Role's scope is a project.",
          "type": "string"
        },
        "grant_strings": {
          "description": "Output only. The grants that this role provides for its principals.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "grants": {
          "description": "Output only. The parsed grant information.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.roles.v1.Grant"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "description": "Output only. The ID of the Role.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "principal_ids": {
          "description": "Output only. The IDs (only) of principals that are assigned to this role.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "principals": {
          "description": "Output only. The principals that are assigned to this role.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.roles.v1.Principal"
          },
          "readOnly": true,
          "type": "array"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The ID of the Scope containing this Role.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "Role contains all fields related to a Role resource",
      "type": "object"
    },
    "controller.api.resources.scopes.v1.Scope": {
      "properties": {
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "authorized_collection_actions": {
          "additionalProperties": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "description": "Output only. The authorized actions for the scope's collections.",
          "readOnly": true,
          "type": "object"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set descripton for identification purposes.",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Scope.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "primary_auth_method_id": {
          "title": "The ID of the primary auth method for this scope.  A primary auth method\nis allowed to vivify users when new accounts are created and is the source for the users account info",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The ID of the Scope this resource is in. If this is the \"global\" Scope this field will be empty.",
          "type": "string"
        },
        "type": {
          "description": "The type of the resource.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "Scope contains all fields related to a Scope resource",
      "type": "object"
    },
    "controller.api.resources.scopes.v1.ScopeInfo": {
      "properties": {
        "description": {
          "description": "Output only. The description of the Scope, if any.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Scope.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Output only. The name of the Scope, if any.",
          "readOnly": true,
          "type": "string"
        },
        "parent_scope_id": {
          "description": "Output only. The ID of the parent Scope, if any. This field will be empty if this is the \"global\" scope.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. The type of the Scope.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.sessions.v1.Connection": {
      "properties": {
        "bytes_down": {
          "format": "uint64",
          "title": "bytes_down of the connection",
          "type": "string"
        },
        "bytes_up": {
          "format": "uint64",
          "title": "bytes_up of the connection",
          "type": "string"
        },
        "client_tcp_address": {
          "title": "client_tcp_address of the connection",
          "type": "string"
        },
        "client_tcp_port": {
          "format": "int64",
          "title": "client_tcp_port of the connection",
          "type": "integer"
        },
        "closed_reason": {
          "title": "closed_reason of the conneciont",
          "type": "string"
        },
        "endpoint_tcp_address": {
          "title": "endpoint_tcp_address of the connection",
          "type": "string"
        },
        "endpoint_tcp_port": {
          "format": "int64",
          "title": "endpoint_tcp_port of the connection",
          "type": "integer"
        }
      },
      "title": "Connection contains information about a specific connection in a session",
      "type": "object"
    },
    "controller.api.resources.sessions.v1.Session": {
      "properties": {
        "auth_token_id": {
          "description": "Output only. The ID of the Auth Token used to authenticate.",
          "readOnly": true,
          "type": "string"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "certificate": {
          "description": "Output only. The certificate generated for the session. Raw DER bytes.",
          "format": "byte",
          "readOnly": true,
          "type": "string"
        },
        "connections": {
          "description": "Output only. The associated connections with this session.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.sessions.v1.Connection"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "endpoint": {
          "description": "Output only. The endpoint of the Session; that is, the address to which the worker is proxying data.",
          "readOnly": true,
          "type": "string"
        },
        "expiration_time": {
          "description": "Output only. After this time the connection will be expired, e.g. forcefully terminated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "host_id": {
          "description": "Output only. The Host used by the Session.",
          "readOnly": true,
          "type": "string"
        },
        "host_set_id": {
          "description": "Output only. The Host Set sourcing the Host for this Session.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Session.",
          "readOnly": true,
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "scope_id": {
          "description": "Output only. The Scope of the Session.",
          "readOnly": true,
          "type": "string"
        },
        "states": {
          "description": "Output only. The states of this Session in descending order from the current state to the first.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.sessions.v1.SessionState"
          },
          "readOnly": true,
          "type": "array"
        },
        "status": {
          "description": "Output only. The current status of this Session.",
          "readOnly": true,
          "type": "string"
        },
        "target_id": {
          "description": "Output only. The ID of the Target that created this Session.",
          "readOnly": true,
          "type": "string"
        },
        "termination_reason": {
          "description": "Output only. If the session is terminated, this provides a short description as to why.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. Type of the Session (e.g. tcp).",
          "readOnly": true,
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "user_id": {
          "description": "Output only. The ID of the User that requested the Session.",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used when canceling this Session to ensure that the operation is acting on a known session state.",
          "format": "int64",
          "type": "integer"
        },
        "worker_info": {
          "description": "Output only. Worker information given to the client.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.sessions.v1.WorkerInfo"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "title": "Session contains all fields related to a Session resource",
      "type": "object"
    },
    "controller.api.resources.sessions.v1.SessionState": {
      "properties": {
        "end_time": {
          "description": "Output only. The time the Session stopped being in this state.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "start_time": {
          "description": "Output only. The time the Session entered this state.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "The status of the Session, e.g. \"pending\", \"active\", \"canceling\", \"terminated\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.sessions.v1.WorkerInfo": {
      "properties": {
        "address": {
          "description": "The address of the worker.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.CredentialLibrary": {
      "properties": {
        "credential_store_id": {
          "description": "Output only. The Credential Store to which this Credential Library belongs.",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Output only. The description of the Credential Library.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "The ID of the Credential Library.",
          "type": "string"
        },
        "name": {
          "description": "Output only.  The name of the Credential Library.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. The type of the credential library.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.CredentialSource": {
      "properties": {
        "credential_store_id": {
          "description": "Output only. The Credential Store to which this Credential source belongs.",
          "readOnly": true,
          "type": "string"
        },
        "credential_type": {
          "description": "Output only. The type of the credential, empty if unspecified.",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Output only. The description of the Credential source.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "The ID of the Credential. May be empty if the credential is dynamically generated from a library.",
          "type": "string"
        },
        "name": {
          "description": "Output only. The name of the Credential source.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. The type of the credential source (e.g. \"vault\"; not the type of the credential itself).",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.HostSet": {
      "properties": {
        "host_catalog_id": {
          "description": "Output only. The Host Catalog to which this Host Set belongs.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Host Set.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.HostSource": {
      "properties": {
        "host_catalog_id": {
          "description": "Output only. The Host Catalog to which this Host Source belongs.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the Host Set.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.SessionAuthorization": {
      "description": "SessionAuthorization contains all fields related to authorization for a Session. It's in the Targets package because it's returned by a Target's authorize action.",
      "properties": {
        "authorization_token": {
          "description": "Output only. The marshaled SessionAuthorizationData message containing all information that the proxy needs.",
          "readOnly": true,
          "type": "string"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "credentials": {
          "description": "Output only. The credentials for this session.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.targets.v1.SessionCredential"
          },
          "readOnly": true,
          "type": "array"
        },
        "endpoint": {
          "description": "Output only. The endpoint address that the worker will connect to, useful for setting TLS parameters.",
          "readOnly": true,
          "type": "string"
        },
        "host_id": {
          "description": "Output only. The Host whose address is being used as the endpoint for this Session.",
          "readOnly": true,
          "type": "string"
        },
        "host_set_id": {
          "description": "Output only. The Host Set containing the Host being used for this Session.",
          "readOnly": true,
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "session_id": {
          "description": "Output only. The ID of the Session.",
          "readOnly": true,
          "type": "string"
        },
        "target_id": {
          "description": "Output only. The ID of the Target authorizing this Session.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. Type of the Session (e.g. tcp, ssh, etc.).",
          "readOnly": true,
          "type": "string"
        },
        "user_id": {
          "description": "Output only. The User for which this Session was authorized.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.SessionCredential": {
      "description": "Credential information for a session.",
      "properties": {
        "credential": {
          "description": "Output only. The fields of the strongly typed credential, empty if the credential type of the \ncredential source is unspecified.",
          "readOnly": true,
          "type": "object"
        },
        "credential_library": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialLibrary",
          "description": "Output only. The library which generated this credential. Deprecated: use credential_source instead.",
          "readOnly": true
        },
        "credential_source": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialSource",
          "description": "Output only. The credential source information.",
          "readOnly": true
        },
        "secret": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.SessionSecret",
          "description": "Output only. The secret of this credential base64 encoded.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.SessionSecret": {
      "description": "The actual secret for a session credential.",
      "properties": {
        "decoded": {
          "description": "Output only. The decoded raw string, if a JSON object.",
          "readOnly": true,
          "type": "object"
        },
        "raw": {
          "description": "Output only. The base64-encoded value representing the raw bytes from the\ncredential provider.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.targets.v1.Target": {
      "properties": {
        "application_credential_libraries": {
          "description": "Output only. The application credential libraries associated with this Target. Deprecated: use application_credential_sources instead.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialLibrary"
          },
          "readOnly": true,
          "type": "array"
        },
        "application_credential_library_ids": {
          "description": "Output only. The IDs of the application credential library ids associated with this Target. Deprecated: use application_credential_source_ids instead.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "application_credential_source_ids": {
          "description": "Output only. The IDs of the application credential source ids associated with this Target.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "application_credential_sources": {
          "description": "Output only. The application credential sources associated with this Target.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialSource"
          },
          "readOnly": true,
          "type": "array"
        },
        "attributes": {
          "description": "The attributes that are applicable for the specific Target.",
          "type": "object"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "egress_credential_source_ids": {
          "description": "Output only. The IDs of the egress credential source ids associated with this Target.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "egress_credential_sources": {
          "description": "Output only. The egress credential sources associated with this Target.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.targets.v1.CredentialSource"
          },
          "readOnly": true,
          "type": "array"
        },
        "host_set_ids": {
          "description": "Output only. The IDs of the Host Sets associated with this Target.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "host_sets": {
          "description": "Output only. The Host Sets associated with this Target.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.targets.v1.HostSet"
          },
          "readOnly": true,
          "type": "array"
        },
        "host_source_ids": {
          "description": "Output only. The IDs of the Host Sources associated with this Target.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "host_sources": {
          "description": "Output only. The Host Sources associated with this Target.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.targets.v1.HostSource"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "description": "Output only. The ID of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Required name for identification purposes.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The Scope of of this resource. This must be defined for creation of this resource, but is otherwise output only.",
          "type": "string"
        },
        "session_connection_limit": {
          "description": "Maximum number of connections allowed in a Session.  Unlimited is indicated by the value -1.",
          "format": "int32",
          "type": "integer"
        },
        "session_max_seconds": {
          "description": "Maximum total lifetime of a created Session, in seconds.",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "The type of the Target.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        },
        "worker_filter": {
          "description": "Optional boolean expression to filter the workers that are allowed to satisfy this request.",
          "type": "string"
        }
      },
      "title": "Target contains all fields related to a Target resource",
      "type": "object"
    },
    "controller.api.resources.users.v1.Account": {
      "properties": {
        "id": {
          "description": "Output only. The ID of the Account.",
          "readOnly": true,
          "type": "string"
        },
        "scope_id": {
          "description": "Output only. The Scope containing the Account.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.resources.users.v1.User": {
      "properties": {
        "account_ids": {
          "description": "Output only. Contains the list of Account IDs linked to this User.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "accounts": {
          "description": "Output only. The Accounts linked to this User.",
          "items": {
            "$ref": "#/definitions/controller.api.resources.users.v1.Account"
          },
          "readOnly": true,
          "type": "array"
        },
        "authorized_actions": {
          "description": "Output only. The available actions on this resource for this user.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "created_time": {
          "description": "Output only. The time this resource was created.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Optional user-set description for identification purposes.",
          "type": "string"
        },
        "email": {
          "readOnly": true,
          "title": "Output only. email is a string that maps to the user's account email from\nthe scope's primary auth method",
          "type": "string"
        },
        "full_name": {
          "readOnly": true,
          "title": "Output only. full_name is a string that maps to the user's account name\nfrom the scope's primary auth method",
          "type": "string"
        },
        "id": {
          "description": "Output only. The ID of the User.",
          "readOnly": true,
          "type": "string"
        },
        "login_name": {
          "readOnly": true,
          "title": "Output only. login_name is a string that maps to the user's account \"login\nname\" from the scope's primary auth method",
          "type": "string"
        },
        "name": {
          "description": "Optional name for identification purposes.",
          "type": "string"
        },
        "primary_account_id": {
          "readOnly": true,
          "title": "Output only. primary_account_id is a string that maps to the user's account\npublic_id from the scope's primary auth method",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.ScopeInfo",
          "description": "Output only. Scope information for this resource.",
          "readOnly": true
        },
        "scope_id": {
          "description": "The ID of the Scope this resource is in.",
          "type": "string"
        },
        "updated_time": {
          "description": "Output only. The time this resource was last updated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "description": "Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "User contains all fields related to a User resource",
      "type": "object"
    },
    "controller.api.services.v1.AddGroupMembersResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddHostSetHostsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddRoleGrantsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddRolePrincipalsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddTargetCredentialLibrariesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddTargetCredentialSourcesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddTargetHostSetsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddTargetHostSourcesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AddUserAccountsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AuthenticateResponse": {
      "properties": {
        "attributes": {
          "description": "Valid keys and values depend on the type of Auth Method as well as the command.",
          "type": "object"
        },
        "command": {
          "description": "The command that was performed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.AuthorizeSessionResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.SessionAuthorization"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CancelSessionResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ChangePasswordResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ChangeStateResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateAccountResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateAuthMethodResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateCredentialLibraryResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateCredentialStoreResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateGroupResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateHostCatalogResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateHostResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateHostSetResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateManagedGroupResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateRoleResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateScopeResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateTargetResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.CreateUserResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.DeleteAccountResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteAuthMethodResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteAuthTokenResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteCredentialLibraryResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteCredentialStoreResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteGroupResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteHostCatalogResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteHostResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteHostSetResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteManagedGroupResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteRoleResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteScopeResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteTargetResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteUserResponse": {
      "type": "object"
    },
    "controller.api.services.v1.GetAccountResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetAuthMethodResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetAuthTokenResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetCredentialLibraryResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetCredentialStoreResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetGroupResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetHostCatalogResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetHostResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetHostSetResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetManagedGroupResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetRoleResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetScopeResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetSessionResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetTargetResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.GetUserResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListAccountsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListAuthMethodsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListAuthTokensResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListCredentialLibrariesResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListCredentialStoresResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListGroupsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListHostCatalogsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListHostSetsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListHostsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListManagedGroupsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListRolesResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListScopesResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListSessionsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListTargetsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.ListUsersResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/controller.api.resources.users.v1.User"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveGroupMembersResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveHostSetHostsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveRoleGrantsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveRolePrincipalsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveTargetCredentialLibrariesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveTargetCredentialSourcesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveTargetHostSetsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveTargetHostSourcesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.RemoveUserAccountsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetGroupMembersResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetHostSetHostsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetPasswordResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetRoleGrantsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetRolePrincipalsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetTargetCredentialLibrariesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetTargetCredentialSourcesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetTargetHostSetsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetTargetHostSourcesResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.SetUserAccountsResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateAccountResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateAuthMethodResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateCredentialLibraryResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateCredentialStoreResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateGroupResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateHostCatalogResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateHostResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateHostSetResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateManagedGroupResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateRoleResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateScopeResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateTargetResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
        }
      },
      "type": "object"
    },
    "controller.api.services.v1.UpdateUserResponse": {
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      },
      "type": "object"
    },
    "google.protobuf.NullValue": {
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value.",
      "enum": [
        "NULL_VALUE"
      ],
      "type": "string"
    }
  },
  "info": {
    "title": "Boundary Controller HTTP API",
    "version": "version not set"
  },
  "paths": {
    "/v1/accounts": {
      "get": {
        "operationId": "AccountService_ListAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "auth_method_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListAccountsResponse"
            }
          }
        },
        "summary": "Lists all Accounts in a specific Auth Method.",
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      },
      "post": {
        "operationId": "AccountService_CreateAccount",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "summary": "Creates a single Account in the provided Auth Method.",
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/accounts/{id}": {
      "delete": {
        "operationId": "AccountService_DeleteAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteAccountResponse"
            }
          }
        },
        "summary": "Deletes an Account.",
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      },
      "get": {
        "operationId": "AccountService_GetAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "summary": "Gets a single Account.",
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      },
      "patch": {
        "operationId": "AccountService_UpdateAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "summary": "Updates an Account.",
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/accounts/{id}:change-password": {
      "post": {
        "operationId": "AccountService_ChangePassword",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "current_password": {
                  "type": "string"
                },
                "new_password": {
                  "type": "string"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "summary": "Sets the password for the provided Account.",
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/accounts/{id}:set-password": {
      "post": {
        "operationId": "AccountService_SetPassword",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "password": {
                  "type": "string"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.accounts.v1.Account"
            }
          }
        },
        "summary": "Sets the password for the provided Account.",
        "tags": [
          "controller.api.services.v1.AccountService"
        ]
      }
    },
    "/v1/auth-methods": {
      "get": {
        "operationId": "AuthMethodService_ListAuthMethods",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListAuthMethodsResponse"
            }
          }
        },
        "summary": "Lists all Auth Methods.",
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      },
      "post": {
        "operationId": "AuthMethodService_CreateAuthMethod",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "summary": "Creates a single Auth Method.",
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-methods/{auth_method_id}:authenticate": {
      "post": {
        "operationId": "AuthMethodService_Authenticate",
        "parameters": [
          {
            "description": "The ID of the Auth Method in the system that should be used for authentication.",
            "in": "path",
            "name": "auth_method_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "attributes": {
                  "description": "Attributes are passed to the Auth Method; the valid keys and values depend on the type of Auth Method as well as the command.",
                  "type": "object"
                },
                "command": {
                  "description": "The command to perform.",
                  "type": "string"
                },
                "token_type": {
                  "description": "This can be \"cookie\" or \"token\". If not provided, \"token\" will be used. \"cookie\" activates a split-cookie method where the token is split partially between http-only and regular cookies in order\nto keep it safe from rogue JS in the browser.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AuthenticateResponse"
            }
          }
        },
        "summary": "Authenticate a user to an scope and retrieve an authentication token.",
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-methods/{id}": {
      "delete": {
        "operationId": "AuthMethodService_DeleteAuthMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteAuthMethodResponse"
            }
          }
        },
        "summary": "Deletes an AuthMethod",
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      },
      "get": {
        "operationId": "AuthMethodService_GetAuthMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "summary": "Gets a single Auth Method.",
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      },
      "patch": {
        "operationId": "AuthMethodService_UpdateAuthMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "summary": "Updates an Auth Method.",
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-methods/{id}:change-state": {
      "post": {
        "operationId": "AuthMethodService_ChangeState",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "attributes": {
                  "description": "The attributes specific to this auth method's state.",
                  "type": "object"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authmethods.v1.AuthMethod"
            }
          }
        },
        "summary": "Changes the state of an OIDC AuthMethod",
        "tags": [
          "controller.api.services.v1.AuthMethodService"
        ]
      }
    },
    "/v1/auth-tokens": {
      "get": {
        "operationId": "AuthTokenService_ListAuthTokens",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListAuthTokensResponse"
            }
          }
        },
        "summary": "Lists all Auth Tokens.",
        "tags": [
          "controller.api.services.v1.AuthTokenService"
        ]
      }
    },
    "/v1/auth-tokens/{id}": {
      "delete": {
        "operationId": "AuthTokenService_DeleteAuthToken",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteAuthTokenResponse"
            }
          }
        },
        "summary": "Deletes an Auth Token.",
        "tags": [
          "controller.api.services.v1.AuthTokenService"
        ]
      },
      "get": {
        "operationId": "AuthTokenService_GetAuthToken",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
            }
          }
        },
        "summary": "Gets a single Auth Token.",
        "tags": [
          "controller.api.services.v1.AuthTokenService"
        ]
      }
    },
    "/v1/credential-libraries": {
      "get": {
        "operationId": "CredentialLibraryService_ListCredentialLibraries",
        "parameters": [
          {
            "in": "query",
            "name": "credential_store_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListCredentialLibrariesResponse"
            }
          }
        },
        "summary": "Lists all Credential Library.",
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      },
      "post": {
        "operationId": "CredentialLibraryService_CreateCredentialLibrary",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        },
        "summary": "Creates a single Credential Library.",
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      }
    },
    "/v1/credential-libraries/{id}": {
      "delete": {
        "operationId": "CredentialLibraryService_DeleteCredentialLibrary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteCredentialLibraryResponse"
            }
          }
        },
        "summary": "Deletes a Credential Library",
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      },
      "get": {
        "operationId": "CredentialLibraryService_GetCredentialLibrary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        },
        "summary": "Gets a single Credential Library.",
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      },
      "patch": {
        "operationId": "CredentialLibraryService_UpdateCredentialLibrary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentiallibraries.v1.CredentialLibrary"
            }
          }
        },
        "summary": "Updates a Credential Library.",
        "tags": [
          "controller.api.services.v1.CredentialLibraryService"
        ]
      }
    },
    "/v1/credential-stores": {
      "get": {
        "operationId": "CredentialStoreService_ListCredentialStores",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListCredentialStoresResponse"
            }
          }
        },
        "summary": "Lists all Credential Stores.",
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      },
      "post": {
        "operationId": "CredentialStoreService_CreateCredentialStore",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        },
        "summary": "Creates a single Credential Store.",
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      }
    },
    "/v1/credential-stores/{id}": {
      "delete": {
        "operationId": "CredentialStoreService_DeleteCredentialStore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteCredentialStoreResponse"
            }
          }
        },
        "summary": "Deletes a CredentialStore",
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      },
      "get": {
        "operationId": "CredentialStoreService_GetCredentialStore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        },
        "summary": "Gets a single Credential Store.",
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      },
      "patch": {
        "operationId": "CredentialStoreService_UpdateCredentialStore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.credentialstores.v1.CredentialStore"
            }
          }
        },
        "summary": "Updates a Credential Store.",
        "tags": [
          "controller.api.services.v1.CredentialStoreService"
        ]
      }
    },
    "/v1/groups": {
      "get": {
        "operationId": "GroupService_ListGroups",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListGroupsResponse"
            }
          }
        },
        "summary": "Lists all Groups.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "post": {
        "operationId": "GroupService_CreateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "summary": "Creates a single Group.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}": {
      "delete": {
        "operationId": "GroupService_DeleteGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteGroupResponse"
            }
          }
        },
        "summary": "Deletes a Group.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "get": {
        "operationId": "GroupService_GetGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "summary": "Gets a single Group.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "patch": {
        "operationId": "GroupService_UpdateGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "summary": "Updates a Group.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}:add-members": {
      "post": {
        "operationId": "GroupService_AddGroupMembers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "member_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "summary": "Adds members to a Group.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}:remove-members": {
      "post": {
        "operationId": "GroupService_RemoveGroupMembers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "member_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "summary": "Removes the specified members from a Group.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/groups/{id}:set-members": {
      "post": {
        "operationId": "GroupService_SetGroupMembers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "member_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "summary": "Set a Group's members to exactly the list of provided in the request, removing any members that are not specified.",
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/host-catalogs": {
      "get": {
        "operationId": "HostCatalogService_ListHostCatalogs",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostCatalogsResponse"
            }
          }
        },
        "summary": "Gets a list of Host Catalogs.",
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "post": {
        "operationId": "HostCatalogService_CreateHostCatalog",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          },
          {
            "description": "As an alternative to providing the plugin id in the provided HostCatalog,\nthis field can be used to lookup the plugin using its name.",
            "in": "query",
            "name": "plugin_name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          }
        },
        "summary": "Creates a Host Catalog",
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/host-catalogs/{id}": {
      "delete": {
        "operationId": "HostCatalogService_DeleteHostCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostCatalogResponse"
            }
          }
        },
        "summary": "Deletes a Host Catalog",
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "get": {
        "operationId": "HostCatalogService_GetHostCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          }
        },
        "summary": "Gets a single Host Catalog.",
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "patch": {
        "operationId": "HostCatalogService_UpdateHostCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostcatalogs.v1.HostCatalog"
            }
          }
        },
        "summary": "Updates a Host Catalog",
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/host-sets": {
      "get": {
        "operationId": "HostSetService_ListHostSets",
        "parameters": [
          {
            "in": "query",
            "name": "host_catalog_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostSetsResponse"
            }
          }
        },
        "summary": "List all Host Sets under the specific Catalog.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "post": {
        "operationId": "HostSetService_CreateHostSet",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "summary": "Create a Host Set.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}": {
      "delete": {
        "operationId": "HostSetService_DeleteHostSet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostSetResponse"
            }
          }
        },
        "summary": "Delete a Host Set.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "get": {
        "operationId": "HostSetService_GetHostSet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "summary": "Get a single Host Set.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "patch": {
        "operationId": "HostSetService_UpdateHostSet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "summary": "Update a Host Set.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}:add-hosts": {
      "post": {
        "operationId": "HostSetService_AddHostSetHosts",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_ids": {
                  "description": "A list of Host IDs which will be added to this Host Set. Each Host referenced here must be a child of the same Host Catalog of which this Host Set is a child.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "summary": "Adds existing Hosts to a Host Set.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}:remove-hosts": {
      "post": {
        "operationId": "HostSetService_RemoveHostSetHosts",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_ids": {
                  "description": "A list of Host IDs which will be removed from this Host Set.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "summary": "Removes Hosts from the Host Set.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/host-sets/{id}:set-hosts": {
      "post": {
        "operationId": "HostSetService_SetHostSetHosts",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_ids": {
                  "description": "A list of Host IDs which will be set on this Host Set. Each Host referenced here must be a child of the same Host Catalog of which this Host Set is a child.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hostsets.v1.HostSet"
            }
          }
        },
        "summary": "Sets the Hosts on the Host Set.",
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/hosts": {
      "get": {
        "operationId": "HostService_ListHosts",
        "parameters": [
          {
            "in": "query",
            "name": "host_catalog_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostsResponse"
            }
          }
        },
        "summary": "List all Hosts for the specified Catalog.",
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "post": {
        "operationId": "HostService_CreateHost",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "summary": "Create a single Host.",
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/hosts/{id}": {
      "delete": {
        "operationId": "HostService_DeleteHost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostResponse"
            }
          }
        },
        "summary": "Delete a Host.",
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "get": {
        "operationId": "HostService_GetHost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "summary": "Gets a single Host.",
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "patch": {
        "operationId": "HostService_UpdateHost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "summary": "Update a Host.",
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/managed-groups": {
      "get": {
        "operationId": "ManagedGroupService_ListManagedGroups",
        "parameters": [
          {
            "in": "query",
            "name": "auth_method_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListManagedGroupsResponse"
            }
          }
        },
        "summary": "Lists all ManagedGroups in a specific Auth Method.",
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      },
      "post": {
        "operationId": "ManagedGroupService_CreateManagedGroup",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        },
        "summary": "Creates a single ManagedGroup in the provided Auth Method.",
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      }
    },
    "/v1/managed-groups/{id}": {
      "delete": {
        "operationId": "ManagedGroupService_DeleteManagedGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteManagedGroupResponse"
            }
          }
        },
        "summary": "Deletes a ManagedGroup.",
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      },
      "get": {
        "operationId": "ManagedGroupService_GetManagedGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        },
        "summary": "Gets a single ManagedGroup.",
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      },
      "patch": {
        "operationId": "ManagedGroupService_UpdateManagedGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.managedgroups.v1.ManagedGroup"
            }
          }
        },
        "summary": "Updates a ManagedGroup.",
        "tags": [
          "controller.api.services.v1.ManagedGroupService"
        ]
      }
    },
    "/v1/roles": {
      "get": {
        "operationId": "RoleService_ListRoles",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListRolesResponse"
            }
          }
        },
        "summary": "Lists all Roles.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "post": {
        "operationId": "RoleService_CreateRole",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Creates a single Role.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}": {
      "delete": {
        "operationId": "RoleService_DeleteRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteRoleResponse"
            }
          }
        },
        "summary": "Deletes a Role.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "get": {
        "operationId": "RoleService_GetRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Gets a single Role.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "patch": {
        "operationId": "RoleService_UpdateRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Updates a Role.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:add-grants": {
      "post": {
        "operationId": "RoleService_AddRoleGrants",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "grant_strings": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Adds grants to a Role",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:add-principals": {
      "post": {
        "operationId": "RoleService_AddRolePrincipals",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "principal_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Adds Users and/or Groups to a Role.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:remove-grants": {
      "post": {
        "operationId": "RoleService_RemoveRoleGrants",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "grant_strings": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Removes grants from a Role.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:remove-principals": {
      "post": {
        "operationId": "RoleService_RemoveRolePrincipals",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "principal_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Removes the specified Users and/or Groups from a Role.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:set-grants": {
      "post": {
        "operationId": "RoleService_SetRoleGrants",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "grant_strings": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Set grants for a Role, removing any grants that are not specified in the request.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/roles/{id}:set-principals": {
      "post": {
        "operationId": "RoleService_SetRolePrincipals",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "principal_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "summary": "Set Users and/or Groups to a Role, removing any principals that are not specified in the request.",
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/scopes": {
      "get": {
        "operationId": "ScopeService_ListScopes",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListScopesResponse"
            }
          }
        },
        "summary": "Lists all Scopes within the Scope provided in the request.",
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      },
      "post": {
        "operationId": "ScopeService_CreateScope",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          },
          {
            "in": "query",
            "name": "skip_admin_role_creation",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "skip_default_role_creation",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          }
        },
        "summary": "Creates a single Scope.",
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/scopes/{id}": {
      "delete": {
        "operationId": "ScopeService_DeleteScope",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteScopeResponse"
            }
          }
        },
        "summary": "Deletes a Scope.",
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      },
      "get": {
        "operationId": "ScopeService_GetScope",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          }
        },
        "summary": "Gets a single Scope.",
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      },
      "patch": {
        "operationId": "ScopeService_UpdateScope",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Scope"
            }
          }
        },
        "summary": "Updates a Scope.",
        "tags": [
          "controller.api.services.v1.ScopeService"
        ]
      }
    },
    "/v1/sessions": {
      "get": {
        "operationId": "SessionService_ListSessions",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListSessionsResponse"
            }
          }
        },
        "summary": "Lists all Sessions.",
        "tags": [
          "controller.api.services.v1.SessionService"
        ]
      }
    },
    "/v1/sessions/{id}": {
      "get": {
        "operationId": "SessionService_GetSession",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
            }
          }
        },
        "summary": "Gets a single Session.",
        "tags": [
          "controller.api.services.v1.SessionService"
        ]
      }
    },
    "/v1/sessions/{id}:cancel": {
      "post": {
        "operationId": "SessionService_CancelSession",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "version": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.sessions.v1.Session"
            }
          }
        },
        "summary": "Cancels a Session.",
        "tags": [
          "controller.api.services.v1.SessionService"
        ]
      }
    },
    "/v1/targets": {
      "get": {
        "operationId": "TargetService_ListTargets",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListTargetsResponse"
            }
          }
        },
        "summary": "Lists all Targets.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      },
      "post": {
        "operationId": "TargetService_CreateTarget",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Creates a single Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}": {
      "delete": {
        "operationId": "TargetService_DeleteTarget",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteTargetResponse"
            }
          }
        },
        "summary": "Deletes a Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      },
      "get": {
        "operationId": "TargetService_GetTarget",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Gets a single Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      },
      "patch": {
        "operationId": "TargetService_UpdateTarget",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Updates a Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:add-credential-libraries": {
      "post": {
        "operationId": "TargetService_AddTargetCredentialLibraries",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "application_credential_library_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Deprecated: use AddTargetCredentialSources instead.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:add-credential-sources": {
      "post": {
        "operationId": "TargetService_AddTargetCredentialSources",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "application_credential_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "egress_credential_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Adds existing Credential Sources to a Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:add-host-sets": {
      "post": {
        "operationId": "TargetService_AddTargetHostSets",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_set_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Adds existing Host Sets to a Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:add-host-sources": {
      "post": {
        "operationId": "TargetService_AddTargetHostSources",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Adds existing Host Sources to a Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:authorize-session": {
      "post": {
        "operationId": "TargetService_AuthorizeSession",
        "parameters": [
          {
            "description": "The ID of the target. Required unless some combination of scope_id/scope_name and name are set.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_id": {
                  "description": "An optional parameter allowing specification of the particular Host within the Target's configured Host Sets to connect to during this Session.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the target. When using this, scope_id or scope_name must be set.",
                  "type": "string"
                },
                "scope_id": {
                  "description": "The scope ID containing the target, if specifying the target by name.",
                  "type": "string"
                },
                "scope_name": {
                  "description": "The scope name containing the target, if specifying the target by name.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.SessionAuthorization"
            }
          }
        },
        "summary": "Authorizes a Session.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:remove-credential-libraries": {
      "post": {
        "operationId": "TargetService_RemoveTargetCredentialLibraries",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "application_credential_library_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Deprecated: use RemoveTargetCredentialSources instead.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:remove-credential-sources": {
      "post": {
        "operationId": "TargetService_RemoveTargetCredentialSources",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "application_credential_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "egress_credential_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Removes Credential Sources from the Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:remove-host-sets": {
      "post": {
        "operationId": "TargetService_RemoveTargetHostSets",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_set_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Removes Host Sets from the Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:remove-host-sources": {
      "post": {
        "operationId": "TargetService_RemoveTargetHostSources",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Removes Host Sources from the Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:set-credential-libraries": {
      "post": {
        "operationId": "TargetService_SetTargetCredentialLibraries",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Sets the values for application_credential_library_ids.  If any\ncredential_library_id field that is not set in the request will result in\nthose fields being cleared.",
              "properties": {
                "application_credential_library_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Deprecated: use SetTargetCredentialSources instead.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:set-credential-sources": {
      "post": {
        "operationId": "TargetService_SetTargetCredentialSources",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Sets the values for credential sources. Any credential_source_id field that\nis not set in the request will result in those fields being cleared.",
              "properties": {
                "application_credential_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "egress_credential_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Sets the Credential Sources on the Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:set-host-sets": {
      "post": {
        "operationId": "TargetService_SetTargetHostSets",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_set_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Sets the Host Sets on the Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/targets/{id}:set-host-sources": {
      "post": {
        "operationId": "TargetService_SetTargetHostSources",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "host_source_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version is used to ensure this resource has not changed.\nThe mutation will fail if the version does not match the latest known good version.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.targets.v1.Target"
            }
          }
        },
        "summary": "Sources the Host Sources on the Target.",
        "tags": [
          "controller.api.services.v1.TargetService"
        ]
      }
    },
    "/v1/users": {
      "get": {
        "operationId": "UserService_ListUsers",
        "parameters": [
          {
            "in": "query",
            "name": "scope_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListUsersResponse"
            }
          }
        },
        "summary": "Lists all Users.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "post": {
        "operationId": "UserService_CreateUser",
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "summary": "Creates a single User.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}": {
      "delete": {
        "operationId": "UserService_DeleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteUserResponse"
            }
          }
        },
        "summary": "Deletes a User.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "get": {
        "operationId": "UserService_GetUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "summary": "Gets a single User.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "patch": {
        "operationId": "UserService_UpdateUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          },
          {
            "in": "query",
            "name": "update_mask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "summary": "Updates a User.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}:add-accounts": {
      "post": {
        "operationId": "UserService_AddUserAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "account_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "The version ensures the User hasn't changed since it was last retrieved and if it has the request will fail.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "summary": "Associates an Account to a User.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}:remove-accounts": {
      "post": {
        "operationId": "UserService_RemoveUserAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "account_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "The version ensures the User hasn't changed since it was last retrieved and if it has the request will fail.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "summary": "Removes the specified Accounts from being associated with the provided User.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/users/{id}:set-accounts": {
      "post": {
        "operationId": "UserService_SetUserAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "account_ids": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "The version ensures the User hasn't changed since it was last retrieved and if it has the request will fail.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "summary": "Set the Accounts associated to the User to exactly the list of provided in the request, removing any Accounts that are not specified.",
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "name": "controller.api.services.v1.ScopeService"
    },
    {
      "name": "controller.api.services.v1.AccountService"
    },
    {
      "name": "controller.api.services.v1.AuthMethodService"
    },
    {
      "name": "controller.api.services.v1.AuthTokenService"
    },
    {
      "name": "controller.api.services.v1.CredentialLibraryService"
    },
    {
      "name": "controller.api.services.v1.CredentialStoreService"
    },
    {
      "name": "controller.api.services.v1.GroupService"
    },
    {
      "name": "controller.api.services.v1.HostCatalogService"
    },
    {
      "name": "controller.api.services.v1.HostService"
    },
    {
      "name": "controller.api.services.v1.HostSetService"
    },
    {
      "name": "controller.api.services.v1.ManagedGroupService"
    },
    {
      "name": "controller.api.services.v1.RoleService"
    },
    {
      "name": "controller.api.services.v1.SessionService"
    },
    {
      "name": "controller.api.services.v1.TargetService"
    },
    {
      "name": "controller.api.services.v1.UserService"
    }
  ]
}