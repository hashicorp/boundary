{
  "swagger": "2.0",
  "info": {
    "title": "Controller API",
    "description": "API for managing resources associated with Controllers.",
    "version": "0.0.1"
  },
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/orgs": {
      "get": {
        "summary": "Lists all Orgs",
        "operationId": "OrgService_ListOrgs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListOrgsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.OrgService"
        ]
      }
    },
    "/v1/orgs/{id}": {
      "get": {
        "summary": "Gets a single Org",
        "operationId": "OrgService_GetOrg",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Org"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.OrgService"
        ]
      }
    },
    "/v1/orgs/{org_id}/groups": {
      "get": {
        "summary": "Lists all Groups",
        "operationId": "GroupService_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListGroupsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "post": {
        "summary": "Creates a single Group",
        "operationId": "GroupService_CreateGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/orgs/{org_id}/groups/{id}": {
      "get": {
        "summary": "Gets a single Group",
        "operationId": "GroupService_GetGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "delete": {
        "summary": "Deletes a Group",
        "operationId": "GroupService_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "patch": {
        "summary": "Updates a Group",
        "operationId": "GroupService_UpdateGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs": {
      "get": {
        "summary": "List all Hosts for the specified catalog",
        "operationId": "HostService_ListHosts2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "post": {
        "summary": "Creates a HostCatalog",
        "description": "Creates a single host catalog under the specified org and project",
        "operationId": "HostCatalogService_CreateHostCatalog2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs/{host_catalog_id}/host-sets": {
      "get": {
        "summary": "List all HostSets under the specific catalog",
        "operationId": "HostSetService_ListHostSets2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostSetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "post": {
        "summary": "Create a HostSet",
        "operationId": "HostSetService_CreateHostSet2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs/{host_catalog_id}/host-sets/{id}": {
      "get": {
        "summary": "Get a single HostSet",
        "operationId": "HostSetService_GetHostSet2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "delete": {
        "summary": "Delete a HostSet",
        "operationId": "HostSetService_DeleteHostSet2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostSetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "patch": {
        "summary": "Update a HostSet",
        "operationId": "HostSetService_UpdateHostSet2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs/{host_catalog_id}/host-sets/{id}:add-hosts": {
      "post": {
        "summary": "Adds existing Hosts to the Host Set",
        "description": "Adds the hosts to this Host Set if possible.  All hosts added must be a child of the same host catalog this host set is a child of.",
        "operationId": "HostSetService_AddToHostSet2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AddToHostSetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs/{host_catalog_id}/host-sets/{id}:remove-hosts": {
      "post": {
        "summary": "Removes Hosts to the Host Set",
        "description": "Removes the hosts from this Host Set if present.  If it is not present then no action is taken and no error is returned.",
        "operationId": "HostSetService_RemoveFromHostSet2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RemoveFromHostSetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "This host set's id.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs/{host_catalog_id}/hosts": {
      "post": {
        "summary": "Create a single Host",
        "operationId": "HostService_CreateHost2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs/{host_catalog_id}/hosts/{id}": {
      "get": {
        "summary": "Gets a single Host",
        "operationId": "HostService_GetHost2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "delete": {
        "summary": "Delete a Host",
        "operationId": "HostService_DeleteHost2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "patch": {
        "summary": "Update a Host",
        "operationId": "HostService_UpdateHost2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/orgs/{org_id}/host-catalogs/{id}": {
      "get": {
        "summary": "Gets a single HostCatalog",
        "description": "Get's a single Host Catalog with the provided identifier.",
        "operationId": "HostCatalogService_GetHostCatalog2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "delete": {
        "summary": "Deletes a HostCatalog",
        "operationId": "HostCatalogService_DeleteHostCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostCatalogResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "patch": {
        "summary": "Updates a HostCatalog",
        "operationId": "HostCatalogService_UpdateHostCatalog2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects": {
      "get": {
        "summary": "Lists all Projects",
        "operationId": "ProjectService_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListProjectsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ProjectService"
        ]
      },
      "post": {
        "summary": "Creates a single Project",
        "operationId": "ProjectService_CreateProject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.ProjectService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{id}": {
      "get": {
        "summary": "Gets a single Project",
        "operationId": "ProjectService_GetProject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ProjectService"
        ]
      },
      "delete": {
        "summary": "Deletes a Project",
        "operationId": "ProjectService_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteProjectResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.ProjectService"
        ]
      },
      "patch": {
        "summary": "Updates a Project",
        "operationId": "ProjectService_UpdateProject",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.ProjectService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/groups": {
      "get": {
        "summary": "Lists all Groups",
        "operationId": "GroupService_ListGroups2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListGroupsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "post": {
        "summary": "Creates a single Group",
        "operationId": "GroupService_CreateGroup2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/groups/{id}": {
      "get": {
        "summary": "Gets a single Group",
        "operationId": "GroupService_GetGroup2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "delete": {
        "summary": "Deletes a Group",
        "operationId": "GroupService_DeleteGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      },
      "patch": {
        "summary": "Updates a Group",
        "operationId": "GroupService_UpdateGroup2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.GroupService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs": {
      "get": {
        "summary": "Gets a list of HostCatalogs",
        "operationId": "HostCatalogService_ListHostCatalogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostCatalogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "post": {
        "summary": "Creates a HostCatalog",
        "description": "Creates a single host catalog under the specified org and project",
        "operationId": "HostCatalogService_CreateHostCatalog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{host_catalog_id}/host-sets": {
      "get": {
        "summary": "List all HostSets under the specific catalog",
        "operationId": "HostSetService_ListHostSets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostSetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "post": {
        "summary": "Create a HostSet",
        "operationId": "HostSetService_CreateHostSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{host_catalog_id}/host-sets/{id}": {
      "get": {
        "summary": "Get a single HostSet",
        "operationId": "HostSetService_GetHostSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "delete": {
        "summary": "Delete a HostSet",
        "operationId": "HostSetService_DeleteHostSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostSetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      },
      "patch": {
        "summary": "Update a HostSet",
        "operationId": "HostSetService_UpdateHostSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{host_catalog_id}/host-sets/{id}:add-hosts": {
      "post": {
        "summary": "Adds existing Hosts to the Host Set",
        "description": "Adds the hosts to this Host Set if possible.  All hosts added must be a child of the same host catalog this host set is a child of.",
        "operationId": "HostSetService_AddToHostSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AddToHostSetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{host_catalog_id}/host-sets/{id}:remove-hosts": {
      "post": {
        "summary": "Removes Hosts to the Host Set",
        "description": "Removes the hosts from this Host Set if present.  If it is not present then no action is taken and no error is returned.",
        "operationId": "HostSetService_RemoveFromHostSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RemoveFromHostSetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "This host set's id.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostSetService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{host_catalog_id}/hosts": {
      "get": {
        "summary": "List all Hosts for the specified catalog",
        "operationId": "HostService_ListHosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListHostsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "post": {
        "summary": "Create a single Host",
        "operationId": "HostService_CreateHost",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{host_catalog_id}/hosts/{id}": {
      "get": {
        "summary": "Gets a single Host",
        "operationId": "HostService_GetHost",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "delete": {
        "summary": "Delete a Host",
        "operationId": "HostService_DeleteHost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      },
      "patch": {
        "summary": "Update a Host",
        "operationId": "HostService_UpdateHost",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "host_catalog_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{id}": {
      "get": {
        "summary": "Gets a single HostCatalog",
        "description": "Get's a single Host Catalog with the provided identifier.",
        "operationId": "HostCatalogService_GetHostCatalog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "delete": {
        "summary": "Deletes a HostCatalog",
        "operationId": "HostCatalogService_DeleteHostCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteHostCatalogResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      },
      "patch": {
        "summary": "Updates a HostCatalog",
        "operationId": "HostCatalogService_UpdateHostCatalog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.HostCatalogService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles": {
      "get": {
        "summary": "Lists all Roles",
        "operationId": "RoleService_ListRoles2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListRolesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "post": {
        "summary": "Creates a single Role",
        "operationId": "RoleService_CreateRole2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles/{id}": {
      "get": {
        "summary": "Gets a single Role",
        "operationId": "RoleService_GetRole2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "delete": {
        "summary": "Deletes a Role",
        "operationId": "RoleService_DeleteRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "patch": {
        "summary": "Updates a Role",
        "operationId": "RoleService_UpdateRole2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles/{role_id}:add-grants": {
      "post": {
        "summary": "Adds grants to a role",
        "operationId": "RoleService_AddRoleGrants2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AddRoleGrantsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles/{role_id}:add-principals": {
      "post": {
        "summary": "Adds Users and/or Groups to a Role",
        "operationId": "RoleService_AddRolePrincipals2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AddRolePrincipalsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles/{role_id}:remove-grants": {
      "post": {
        "summary": "Removes grants from a role.",
        "operationId": "RoleService_RemoveRoleGrants2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RemoveRoleGrantsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles/{role_id}:remove-principals": {
      "post": {
        "summary": "Removes the specified Users and/or Groups from a Role.",
        "operationId": "RoleService_RemoveRolePrincipals2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RemoveRolePrincipalsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles/{role_id}:set-grants": {
      "post": {
        "summary": "Set grants for a role, removing any grants that are not specified in the request.",
        "operationId": "RoleService_SetRoleGrants2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.SetRoleGrantsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/projects/{project_id}/roles/{role_id}:set-principals": {
      "post": {
        "summary": "Set Users and/or Groups to a Role, removing any principals that are not specified in the request.",
        "operationId": "RoleService_SetRolePrincipals2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.SetRolePrincipalsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles": {
      "get": {
        "summary": "Lists all Roles",
        "operationId": "RoleService_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListRolesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "post": {
        "summary": "Creates a single Role",
        "operationId": "RoleService_CreateRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles/{id}": {
      "get": {
        "summary": "Gets a single Role",
        "operationId": "RoleService_GetRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "delete": {
        "summary": "Deletes a Role",
        "operationId": "RoleService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      },
      "patch": {
        "summary": "Updates a Role",
        "operationId": "RoleService_UpdateRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles/{role_id}:add-grants": {
      "post": {
        "summary": "Adds grants to a role",
        "operationId": "RoleService_AddRoleGrants",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AddRoleGrantsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles/{role_id}:add-principals": {
      "post": {
        "summary": "Adds Users and/or Groups to a Role",
        "operationId": "RoleService_AddRolePrincipals",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AddRolePrincipalsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles/{role_id}:remove-grants": {
      "post": {
        "summary": "Removes grants from a role.",
        "operationId": "RoleService_RemoveRoleGrants",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RemoveRoleGrantsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles/{role_id}:remove-principals": {
      "post": {
        "summary": "Removes the specified Users and/or Groups from a Role.",
        "operationId": "RoleService_RemoveRolePrincipals",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.RemoveRolePrincipalsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles/{role_id}:set-grants": {
      "post": {
        "summary": "Set grants for a role, removing any grants that are not specified in the request.",
        "operationId": "RoleService_SetRoleGrants",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.SetRoleGrantsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/roles/{role_id}:set-principals": {
      "post": {
        "summary": "Set Users and/or Groups to a Role, removing any principals that are not specified in the request.",
        "operationId": "RoleService_SetRolePrincipals",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.SetRolePrincipalsRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.RoleService"
        ]
      }
    },
    "/v1/orgs/{org_id}/users": {
      "get": {
        "summary": "Lists all Users",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.ListUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "post": {
        "summary": "Creates a single User",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/orgs/{org_id}/users/{id}": {
      "get": {
        "summary": "Gets a single User",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "delete": {
        "summary": "Deletes a User",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeleteUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      },
      "patch": {
        "summary": "Updates a User",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.resources.users.v1.User"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.UserService"
        ]
      }
    },
    "/v1/orgs/{org_id}:authenticate": {
      "post": {
        "summary": "Authenticate a user to an Org and retrieve an authentication token.",
        "operationId": "OrgService_Authenticate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.AuthenticateRequest"
            }
          }
        ],
        "tags": [
          "controller.api.services.v1.OrgService"
        ]
      }
    },
    "/v1/orgs/{org_id}:deauthenticate": {
      "post": {
        "summary": "Deauthenticate an authentication token from an Org.",
        "operationId": "OrgService_Deauthenticate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/controller.api.services.v1.DeauthenticateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "controller.api.services.v1.OrgService"
        ]
      }
    }
  },
  "definitions": {
    "controller.api.resources.authtokens.v1.AuthToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the AuthToken\nOutput only.",
          "readOnly": true
        },
        "token": {
          "type": "string",
          "description": "The token.  This will only be populated after login and is only ever visible to the end user whose login\nrequest resulted in this auth token being created.\nOutput only.",
          "readOnly": true
        },
        "user_id": {
          "type": "string",
          "description": "The id of the user of this AuthToken.\nOutput only.",
          "readOnly": true
        },
        "auth_method_id": {
          "type": "string",
          "description": "The id of the user of this AuthToken.\nOutput only.",
          "readOnly": true
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated.\nOutput only.",
          "readOnly": true
        },
        "approximate_last_used_time": {
          "type": "string",
          "format": "date-time",
          "description": "The approximate time this AuthToken was last used.\nOutput only.",
          "readOnly": true
        },
        "expiration_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this AuthToken expires.\nOutput only.",
          "readOnly": true
        }
      },
      "title": "AuthToken contains all fields related to an AuthToken resource"
    },
    "controller.api.resources.groups.v1.Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Project\nOutput only.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set descripton for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated.\nOutput only.",
          "readOnly": true
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the resource is disabled"
        }
      },
      "title": "Group contains all fields related to a Group resource"
    },
    "controller.api.resources.hosts.v1.Host": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the host\nOutput only.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "title": "The type of the resource, to help differentiate schemas"
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set description for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated\nOutput only.",
          "readOnly": true
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the host is disabled"
        },
        "address": {
          "type": "string",
          "title": "The address (DNS or IP name) used to reach the host"
        }
      },
      "title": "Host contains all fields related to a Host resource"
    },
    "controller.api.resources.hosts.v1.HostCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the host\nOutput only.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "title": "The type of the resource, to help differentiate schemas"
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set description for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated\nOutput only.",
          "readOnly": true
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the catalog is disabled"
        },
        "attributes": {
          "type": "object",
          "title": "Attributes specific to the catalog type"
        }
      },
      "title": "HostCatalog manages Hosts and HostSets"
    },
    "controller.api.resources.hosts.v1.HostSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the host\nOutput only.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "title": "The type of the resource, to help differentiate schemas"
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set description for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated\nOutput only.",
          "readOnly": true
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the host set is disabled"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "description": "The total count of hosts in this host set\nOutput only.",
          "readOnly": true
        },
        "hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
          },
          "description": "A list of hosts in this host set\nTODO: Figure out if this should be in the basic HostSet view and what\nview to use on the Hosts.\nOutput only.",
          "readOnly": true
        }
      },
      "title": "HostSet is a collection of Hosts created and managed by a HostCatalog"
    },
    "controller.api.resources.roles.v1.Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Role\nOutput only.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set description for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated.\nOutput only.",
          "readOnly": true
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the resource is disabled"
        },
        "grant_scope_id": {
          "type": "string",
          "description": "The scope the grants will apply to. If the role is at the global scope,\nthis can be an org or project. If the role is at an org\nscope, this can be a project within the org. It is invalid for\nthis to be anything other than the role's scope when the role's scope is\na project."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version can be used in subsiquent write requests to ensure this resource\nhas not changed and to fail the write if it has.\nOutput only.",
          "readOnly": true
        },
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The principals that are assigned this role.\nOutput only.",
          "readOnly": true
        },
        "group_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only.",
          "readOnly": true
        },
        "grants": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The grants that this role provides for it's principals.\nOutput only.",
          "readOnly": true
        },
        "grants_canonical": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The canonical version of the grants in the grants field with the same index.\nOutput only.",
          "readOnly": true
        },
        "grants_json": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The JSON version of the grants in the grants field with the same index.\nOutput only.",
          "readOnly": true
        }
      },
      "title": "Role contains all fields related to a Role resource"
    },
    "controller.api.resources.scopes.v1.Org": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Org\nOutput only.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set descripton for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated.\nOutput only.",
          "readOnly": true
        }
      },
      "title": "Org contains all fields related to an Org resource"
    },
    "controller.api.resources.scopes.v1.Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Project\nOutput only.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set descripton for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated.\nOutput only.",
          "readOnly": true
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the resource is disabled"
        }
      },
      "title": "Project contains all fields related to a Project resource"
    },
    "controller.api.resources.users.v1.User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Project\nOutput only.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "title": "Optional name for identification purposes"
        },
        "description": {
          "type": "string",
          "title": "Optional user-set descripton for identification purposes"
        },
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was created\nOutput only.",
          "readOnly": true
        },
        "updated_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time this resource was last updated.\nOutput only.",
          "readOnly": true
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the resource is disabled"
        }
      },
      "title": "User contains all fields related to a User resource"
    },
    "controller.api.services.v1.AddRoleGrantsRequest": {
      "type": "object",
      "properties": {
        "org_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version ensures the role hasn't changed since it was last retrieved and if\nit has the request will fail."
        },
        "grants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "controller.api.services.v1.AddRoleGrantsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.AddRolePrincipalsRequest": {
      "type": "object",
      "properties": {
        "org_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version ensures the role hasn't changed since it was last retrieved and if\nit has the request will fail."
        },
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "controller.api.services.v1.AddRolePrincipalsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.AddToHostSetResponse": {
      "type": "object"
    },
    "controller.api.services.v1.AuthenticateRequest": {
      "type": "object",
      "properties": {
        "org_id": {
          "type": "string"
        },
        "auth_method_id": {
          "type": "string",
          "description": "The id to the authmethod in the system being used for authentication.  The auth method must be in the org\nbeing logged in to."
        },
        "token_type": {
          "type": "string",
          "description": "This can be \"cookie\" or \"token\".  If not provided, \"token\" will be used.  For now only type \"token\" is returned."
        },
        "password_credential": {
          "$ref": "#/definitions/controller.api.services.v1.PasswordCredential"
        }
      }
    },
    "controller.api.services.v1.AuthenticateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.authtokens.v1.AuthToken"
        }
      }
    },
    "controller.api.services.v1.CreateGroupResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.CreateHostCatalogResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
        }
      }
    },
    "controller.api.services.v1.CreateHostResponse": {
      "type": "object",
      "properties": {
        "ref": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      }
    },
    "controller.api.services.v1.CreateHostSetResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.CreateProjectResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
        }
      }
    },
    "controller.api.services.v1.CreateRoleResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.CreateUserResponse": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.DeauthenticateResponse": {
      "type": "object"
    },
    "controller.api.services.v1.DeleteGroupResponse": {
      "type": "object",
      "properties": {
        "existed": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "controller.api.services.v1.DeleteHostCatalogResponse": {
      "type": "object",
      "properties": {
        "existed": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "controller.api.services.v1.DeleteHostResponse": {
      "type": "object",
      "properties": {
        "existed": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "controller.api.services.v1.DeleteHostSetResponse": {
      "type": "object",
      "properties": {
        "existed": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "controller.api.services.v1.DeleteProjectResponse": {
      "type": "object",
      "properties": {
        "existed": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "controller.api.services.v1.DeleteRoleResponse": {
      "type": "object",
      "properties": {
        "existed": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "controller.api.services.v1.DeleteUserResponse": {
      "type": "object",
      "properties": {
        "existed": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "controller.api.services.v1.GetGroupResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.GetHostCatalogResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
        }
      }
    },
    "controller.api.services.v1.GetHostResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      }
    },
    "controller.api.services.v1.GetHostSetResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.GetOrgResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Org"
        }
      }
    },
    "controller.api.services.v1.GetProjectResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
        }
      }
    },
    "controller.api.services.v1.GetRoleResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.GetUserResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "controller.api.services.v1.ListGroupsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
          }
        }
      }
    },
    "controller.api.services.v1.ListHostCatalogsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
          }
        }
      }
    },
    "controller.api.services.v1.ListHostSetsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
          }
        }
      }
    },
    "controller.api.services.v1.ListHostsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
          }
        }
      }
    },
    "controller.api.services.v1.ListOrgsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.scopes.v1.Org"
          }
        }
      }
    },
    "controller.api.services.v1.ListProjectsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
          }
        }
      }
    },
    "controller.api.services.v1.ListRolesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
          }
        }
      }
    },
    "controller.api.services.v1.ListUsersResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controller.api.resources.users.v1.User"
          }
        }
      }
    },
    "controller.api.services.v1.PasswordCredential": {
      "type": "object",
      "properties": {
        "login_name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "controller.api.services.v1.RemoveFromHostSetResponse": {
      "type": "object"
    },
    "controller.api.services.v1.RemoveRoleGrantsRequest": {
      "type": "object",
      "properties": {
        "org_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version ensures the role hasn't changed since it was last retrieved and if\nit has the request will fail."
        },
        "grants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "controller.api.services.v1.RemoveRoleGrantsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.RemoveRolePrincipalsRequest": {
      "type": "object",
      "properties": {
        "org_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version ensures the role hasn't changed since it was last retrieved and if\nit has the request will fail."
        },
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "controller.api.services.v1.RemoveRolePrincipalsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.SetRoleGrantsRequest": {
      "type": "object",
      "properties": {
        "org_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version ensures the role hasn't changed since it was last retrieved and if\nit has the request will fail."
        },
        "grants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "controller.api.services.v1.SetRoleGrantsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.SetRolePrincipalsRequest": {
      "type": "object",
      "properties": {
        "org_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version ensures the role hasn't changed since it was last retrieved and if\nit has the request will fail."
        },
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "controller.api.services.v1.SetRolePrincipalsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.groups.v1.Group"
        }
      }
    },
    "controller.api.services.v1.UpdateHostCatalogResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.HostCatalog"
        }
      }
    },
    "controller.api.services.v1.UpdateHostResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.Host"
        }
      }
    },
    "controller.api.services.v1.UpdateHostSetResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.hosts.v1.HostSet"
        }
      }
    },
    "controller.api.services.v1.UpdateProjectResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.scopes.v1.Project"
        }
      }
    },
    "controller.api.services.v1.UpdateRoleResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.roles.v1.Role"
        }
      }
    },
    "controller.api.services.v1.UpdateUserResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/controller.api.resources.users.v1.User"
        }
      }
    },
    "google.protobuf.FieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n    f {\n      b {\n        d: 1\n        x: 2\n      }\n      c: [1]\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d: 10\n      }\n      c: [2]\n    }\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n    f {\n      b {\n        d: 10\n        x: 2\n      }\n      c: [1, 2]\n    }\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    }
  }
}
