// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TargetServiceClient is the client API for TargetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TargetServiceClient interface {
	// GetTarget returns a stored Target if present.  The provided request
	// must include the Target ID for the Target being retrieved. If
	// that ID is missing, malformed or reference a non existing
	// resource an error is returned.
	GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*GetTargetResponse, error)
	// ListTargets returns a list of stored Targets which exist inside the project
	// referenced inside the request. The request must include the scope ID for
	// the Targets being retrieved. If the scope ID is missing, malformed, or
	// reference a non existing scope, an error is returned.
	ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error)
	// CreateTarget creates and stores a Target in boundary.  The provided
	// request must include the scope id in which the Target will be created.
	// If the scope id is missing, malformed or references a non existing
	// scope, an error is returned.  If a name is provided that is in
	// use in another Target in the same scope, an error is returned.
	CreateTarget(ctx context.Context, in *CreateTargetRequest, opts ...grpc.CallOption) (*CreateTargetResponse, error)
	// UpdateTarget updates an existing Target in boundary.  The provided
	// Target must not have any read only fields set.  The update mask must be
	// included in the request and contain at least 1 mutable field.  To unset
	// a field's value, include the field in the update mask and don't set it
	// in the provided Target. An error is returned if the Target ID is missing
	// or reference a non-existing resource.  An error is also returned if the
	// request attempts to update the name to one that is already in use in
	// this scope.
	UpdateTarget(ctx context.Context, in *UpdateTargetRequest, opts ...grpc.CallOption) (*UpdateTargetResponse, error)
	// DeleteTarget removes a Target from Boundary. If the provided Target ID
	// is malformed or not provided an error is returned.
	DeleteTarget(ctx context.Context, in *DeleteTargetRequest, opts ...grpc.CallOption) (*DeleteTargetResponse, error)
	// AuthorizeSession creates authorization information from a given Target.
	AuthorizeSession(ctx context.Context, in *AuthorizeSessionRequest, opts ...grpc.CallOption) (*AuthorizeSessionResponse, error)
	// AddTargetHostSets adds Host Sets to this Target. The provided request must
	// include the Target ID to which the Host Sets will be added.
	// All Host Sets added to the provided Target must be a child of a Catalog that
	// is a child of the same scope as this Target. If the scope or Target IDs are
	// missing, malformed, or reference non-existing resources, an error is
	// returned. An error is returned if a Host Set is attempted to be added
	// to a target that is already present on the Target.
	AddTargetHostSets(ctx context.Context, in *AddTargetHostSetsRequest, opts ...grpc.CallOption) (*AddTargetHostSetsResponse, error)
	// SetTargetHostSets sets the Target's Host Sets. Any existing Host Sets on the
	// Target are deleted if they are not included in this request. The
	// provided request must include the scope, and the Target ID on which the
	// Host Sets will be set.  All Host Sets in the request must be a child of
	// a Catalog that is in the same scope as the provided Target. If any
	// IDs are missing, malformed, or references a non-existing resource, an
	// error is returned.
	SetTargetHostSets(ctx context.Context, in *SetTargetHostSetsRequest, opts ...grpc.CallOption) (*SetTargetHostSetsResponse, error)
	// RemoveTargetHostSets removes the Host Sets from the specified Target. The
	// provided request must include the Target ID for the Target
	// from which the Host Sets will be removed. If the ID is missing,
	// malformed, or references a non-existing scope or Catalog, an error is
	// returned.  An error is returned if a Host Set is attempted to be
	// removed from the Target when the Target does not have the Host Set.
	RemoveTargetHostSets(ctx context.Context, in *RemoveTargetHostSetsRequest, opts ...grpc.CallOption) (*RemoveTargetHostSetsResponse, error)
}

type targetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTargetServiceClient(cc grpc.ClientConnInterface) TargetServiceClient {
	return &targetServiceClient{cc}
}

func (c *targetServiceClient) GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*GetTargetResponse, error) {
	out := new(GetTargetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/GetTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error) {
	out := new(ListTargetsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/ListTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) CreateTarget(ctx context.Context, in *CreateTargetRequest, opts ...grpc.CallOption) (*CreateTargetResponse, error) {
	out := new(CreateTargetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/CreateTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) UpdateTarget(ctx context.Context, in *UpdateTargetRequest, opts ...grpc.CallOption) (*UpdateTargetResponse, error) {
	out := new(UpdateTargetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/UpdateTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) DeleteTarget(ctx context.Context, in *DeleteTargetRequest, opts ...grpc.CallOption) (*DeleteTargetResponse, error) {
	out := new(DeleteTargetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/DeleteTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) AuthorizeSession(ctx context.Context, in *AuthorizeSessionRequest, opts ...grpc.CallOption) (*AuthorizeSessionResponse, error) {
	out := new(AuthorizeSessionResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/AuthorizeSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) AddTargetHostSets(ctx context.Context, in *AddTargetHostSetsRequest, opts ...grpc.CallOption) (*AddTargetHostSetsResponse, error) {
	out := new(AddTargetHostSetsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/AddTargetHostSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) SetTargetHostSets(ctx context.Context, in *SetTargetHostSetsRequest, opts ...grpc.CallOption) (*SetTargetHostSetsResponse, error) {
	out := new(SetTargetHostSetsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/SetTargetHostSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetServiceClient) RemoveTargetHostSets(ctx context.Context, in *RemoveTargetHostSetsRequest, opts ...grpc.CallOption) (*RemoveTargetHostSetsResponse, error) {
	out := new(RemoveTargetHostSetsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.TargetService/RemoveTargetHostSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TargetServiceServer is the server API for TargetService service.
type TargetServiceServer interface {
	// GetTarget returns a stored Target if present.  The provided request
	// must include the Target ID for the Target being retrieved. If
	// that ID is missing, malformed or reference a non existing
	// resource an error is returned.
	GetTarget(context.Context, *GetTargetRequest) (*GetTargetResponse, error)
	// ListTargets returns a list of stored Targets which exist inside the project
	// referenced inside the request. The request must include the scope ID for
	// the Targets being retrieved. If the scope ID is missing, malformed, or
	// reference a non existing scope, an error is returned.
	ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error)
	// CreateTarget creates and stores a Target in boundary.  The provided
	// request must include the scope id in which the Target will be created.
	// If the scope id is missing, malformed or references a non existing
	// scope, an error is returned.  If a name is provided that is in
	// use in another Target in the same scope, an error is returned.
	CreateTarget(context.Context, *CreateTargetRequest) (*CreateTargetResponse, error)
	// UpdateTarget updates an existing Target in boundary.  The provided
	// Target must not have any read only fields set.  The update mask must be
	// included in the request and contain at least 1 mutable field.  To unset
	// a field's value, include the field in the update mask and don't set it
	// in the provided Target. An error is returned if the Target ID is missing
	// or reference a non-existing resource.  An error is also returned if the
	// request attempts to update the name to one that is already in use in
	// this scope.
	UpdateTarget(context.Context, *UpdateTargetRequest) (*UpdateTargetResponse, error)
	// DeleteTarget removes a Target from Boundary. If the provided Target ID
	// is malformed or not provided an error is returned.
	DeleteTarget(context.Context, *DeleteTargetRequest) (*DeleteTargetResponse, error)
	// AuthorizeSession creates authorization information from a given Target.
	AuthorizeSession(context.Context, *AuthorizeSessionRequest) (*AuthorizeSessionResponse, error)
	// AddTargetHostSets adds Host Sets to this Target. The provided request must
	// include the Target ID to which the Host Sets will be added.
	// All Host Sets added to the provided Target must be a child of a Catalog that
	// is a child of the same scope as this Target. If the scope or Target IDs are
	// missing, malformed, or reference non-existing resources, an error is
	// returned. An error is returned if a Host Set is attempted to be added
	// to a target that is already present on the Target.
	AddTargetHostSets(context.Context, *AddTargetHostSetsRequest) (*AddTargetHostSetsResponse, error)
	// SetTargetHostSets sets the Target's Host Sets. Any existing Host Sets on the
	// Target are deleted if they are not included in this request. The
	// provided request must include the scope, and the Target ID on which the
	// Host Sets will be set.  All Host Sets in the request must be a child of
	// a Catalog that is in the same scope as the provided Target. If any
	// IDs are missing, malformed, or references a non-existing resource, an
	// error is returned.
	SetTargetHostSets(context.Context, *SetTargetHostSetsRequest) (*SetTargetHostSetsResponse, error)
	// RemoveTargetHostSets removes the Host Sets from the specified Target. The
	// provided request must include the Target ID for the Target
	// from which the Host Sets will be removed. If the ID is missing,
	// malformed, or references a non-existing scope or Catalog, an error is
	// returned.  An error is returned if a Host Set is attempted to be
	// removed from the Target when the Target does not have the Host Set.
	RemoveTargetHostSets(context.Context, *RemoveTargetHostSetsRequest) (*RemoveTargetHostSetsResponse, error)
}

// UnimplementedTargetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTargetServiceServer struct {
}

func (*UnimplementedTargetServiceServer) GetTarget(context.Context, *GetTargetRequest) (*GetTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTarget not implemented")
}
func (*UnimplementedTargetServiceServer) ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargets not implemented")
}
func (*UnimplementedTargetServiceServer) CreateTarget(context.Context, *CreateTargetRequest) (*CreateTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTarget not implemented")
}
func (*UnimplementedTargetServiceServer) UpdateTarget(context.Context, *UpdateTargetRequest) (*UpdateTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTarget not implemented")
}
func (*UnimplementedTargetServiceServer) DeleteTarget(context.Context, *DeleteTargetRequest) (*DeleteTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTarget not implemented")
}
func (*UnimplementedTargetServiceServer) AuthorizeSession(context.Context, *AuthorizeSessionRequest) (*AuthorizeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeSession not implemented")
}
func (*UnimplementedTargetServiceServer) AddTargetHostSets(context.Context, *AddTargetHostSetsRequest) (*AddTargetHostSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTargetHostSets not implemented")
}
func (*UnimplementedTargetServiceServer) SetTargetHostSets(context.Context, *SetTargetHostSetsRequest) (*SetTargetHostSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTargetHostSets not implemented")
}
func (*UnimplementedTargetServiceServer) RemoveTargetHostSets(context.Context, *RemoveTargetHostSetsRequest) (*RemoveTargetHostSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTargetHostSets not implemented")
}

func RegisterTargetServiceServer(s *grpc.Server, srv TargetServiceServer) {
	s.RegisterService(&_TargetService_serviceDesc, srv)
}

func _TargetService_GetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).GetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/GetTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).GetTarget(ctx, req.(*GetTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).ListTargets(ctx, req.(*ListTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_CreateTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).CreateTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/CreateTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).CreateTarget(ctx, req.(*CreateTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_UpdateTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).UpdateTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/UpdateTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).UpdateTarget(ctx, req.(*UpdateTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_DeleteTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).DeleteTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/DeleteTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).DeleteTarget(ctx, req.(*DeleteTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_AuthorizeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).AuthorizeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/AuthorizeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).AuthorizeSession(ctx, req.(*AuthorizeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_AddTargetHostSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTargetHostSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).AddTargetHostSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/AddTargetHostSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).AddTargetHostSets(ctx, req.(*AddTargetHostSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_SetTargetHostSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTargetHostSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).SetTargetHostSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/SetTargetHostSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).SetTargetHostSets(ctx, req.(*SetTargetHostSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetService_RemoveTargetHostSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTargetHostSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetServiceServer).RemoveTargetHostSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.TargetService/RemoveTargetHostSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetServiceServer).RemoveTargetHostSets(ctx, req.(*RemoveTargetHostSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TargetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.api.services.v1.TargetService",
	HandlerType: (*TargetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTarget",
			Handler:    _TargetService_GetTarget_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _TargetService_ListTargets_Handler,
		},
		{
			MethodName: "CreateTarget",
			Handler:    _TargetService_CreateTarget_Handler,
		},
		{
			MethodName: "UpdateTarget",
			Handler:    _TargetService_UpdateTarget_Handler,
		},
		{
			MethodName: "DeleteTarget",
			Handler:    _TargetService_DeleteTarget_Handler,
		},
		{
			MethodName: "AuthorizeSession",
			Handler:    _TargetService_AuthorizeSession_Handler,
		},
		{
			MethodName: "AddTargetHostSets",
			Handler:    _TargetService_AddTargetHostSets_Handler,
		},
		{
			MethodName: "SetTargetHostSets",
			Handler:    _TargetService_SetTargetHostSets_Handler,
		},
		{
			MethodName: "RemoveTargetHostSets",
			Handler:    _TargetService_RemoveTargetHostSets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/api/services/v1/target_service.proto",
}
