// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HostCatalogServiceClient is the client API for HostCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostCatalogServiceClient interface {
	// GetHostCatalog returns a stored Host Catalog if present.  The provided
	// request must include the Catalog IDs for the Host Catalog being retrieved.
	// If missing, malformed, or referencing a non-existing resource an error is
	// returned.
	GetHostCatalog(ctx context.Context, in *GetHostCatalogRequest, opts ...grpc.CallOption) (*GetHostCatalogResponse, error)
	// ListHostCatalogs returns a list of stored Host Catalogs which exist inside
	// the scope referenced in the request. The request must include the scope
	// ID and if it is  missing, malformed, or references a non-existing resource
	// an error is returned.
	ListHostCatalogs(ctx context.Context, in *ListHostCatalogsRequest, opts ...grpc.CallOption) (*ListHostCatalogsResponse, error)
	// CreateHostCatalog creates and stores a Host Catalog in boundary.  The
	// provided request must include the scope ID in which the Catalog will be
	// created and the Catalog type to be created. If any of these required fields
	// are missing, malformed, or reference a non-existing parent resource an
	// error is returned.
	CreateHostCatalog(ctx context.Context, in *CreateHostCatalogRequest, opts ...grpc.CallOption) (*CreateHostCatalogResponse, error)
	// UpdateHostCatalog updates an existing Host Catalog in Boundary. The
	// provided Host Catalog must not have any read only fields set. The update
	// mask must be provided and include at least 1 mutable field. To unset a
	// field's value include that field name in the update mask and don't set the
	// field in the Host Catalog.
	UpdateHostCatalog(ctx context.Context, in *UpdateHostCatalogRequest, opts ...grpc.CallOption) (*UpdateHostCatalogResponse, error)
	// DeleteHostCatalog removes a Host Catalog and all associated Hosts and Host
	// sets from Boundary. If the provided Host Catalog IDs is malformed or not
	// provided DeleteHostCatalog returns an error.
	DeleteHostCatalog(ctx context.Context, in *DeleteHostCatalogRequest, opts ...grpc.CallOption) (*DeleteHostCatalogResponse, error)
}

type hostCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostCatalogServiceClient(cc grpc.ClientConnInterface) HostCatalogServiceClient {
	return &hostCatalogServiceClient{cc}
}

func (c *hostCatalogServiceClient) GetHostCatalog(ctx context.Context, in *GetHostCatalogRequest, opts ...grpc.CallOption) (*GetHostCatalogResponse, error) {
	out := new(GetHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.HostCatalogService/GetHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) ListHostCatalogs(ctx context.Context, in *ListHostCatalogsRequest, opts ...grpc.CallOption) (*ListHostCatalogsResponse, error) {
	out := new(ListHostCatalogsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.HostCatalogService/ListHostCatalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) CreateHostCatalog(ctx context.Context, in *CreateHostCatalogRequest, opts ...grpc.CallOption) (*CreateHostCatalogResponse, error) {
	out := new(CreateHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.HostCatalogService/CreateHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) UpdateHostCatalog(ctx context.Context, in *UpdateHostCatalogRequest, opts ...grpc.CallOption) (*UpdateHostCatalogResponse, error) {
	out := new(UpdateHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.HostCatalogService/UpdateHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) DeleteHostCatalog(ctx context.Context, in *DeleteHostCatalogRequest, opts ...grpc.CallOption) (*DeleteHostCatalogResponse, error) {
	out := new(DeleteHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.services.v1.HostCatalogService/DeleteHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostCatalogServiceServer is the server API for HostCatalogService service.
type HostCatalogServiceServer interface {
	// GetHostCatalog returns a stored Host Catalog if present.  The provided
	// request must include the Catalog IDs for the Host Catalog being retrieved.
	// If missing, malformed, or referencing a non-existing resource an error is
	// returned.
	GetHostCatalog(context.Context, *GetHostCatalogRequest) (*GetHostCatalogResponse, error)
	// ListHostCatalogs returns a list of stored Host Catalogs which exist inside
	// the scope referenced in the request. The request must include the scope
	// ID and if it is  missing, malformed, or references a non-existing resource
	// an error is returned.
	ListHostCatalogs(context.Context, *ListHostCatalogsRequest) (*ListHostCatalogsResponse, error)
	// CreateHostCatalog creates and stores a Host Catalog in boundary.  The
	// provided request must include the scope ID in which the Catalog will be
	// created and the Catalog type to be created. If any of these required fields
	// are missing, malformed, or reference a non-existing parent resource an
	// error is returned.
	CreateHostCatalog(context.Context, *CreateHostCatalogRequest) (*CreateHostCatalogResponse, error)
	// UpdateHostCatalog updates an existing Host Catalog in Boundary. The
	// provided Host Catalog must not have any read only fields set. The update
	// mask must be provided and include at least 1 mutable field. To unset a
	// field's value include that field name in the update mask and don't set the
	// field in the Host Catalog.
	UpdateHostCatalog(context.Context, *UpdateHostCatalogRequest) (*UpdateHostCatalogResponse, error)
	// DeleteHostCatalog removes a Host Catalog and all associated Hosts and Host
	// sets from Boundary. If the provided Host Catalog IDs is malformed or not
	// provided DeleteHostCatalog returns an error.
	DeleteHostCatalog(context.Context, *DeleteHostCatalogRequest) (*DeleteHostCatalogResponse, error)
}

// UnimplementedHostCatalogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHostCatalogServiceServer struct {
}

func (*UnimplementedHostCatalogServiceServer) GetHostCatalog(context.Context, *GetHostCatalogRequest) (*GetHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostCatalog not implemented")
}
func (*UnimplementedHostCatalogServiceServer) ListHostCatalogs(context.Context, *ListHostCatalogsRequest) (*ListHostCatalogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostCatalogs not implemented")
}
func (*UnimplementedHostCatalogServiceServer) CreateHostCatalog(context.Context, *CreateHostCatalogRequest) (*CreateHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostCatalog not implemented")
}
func (*UnimplementedHostCatalogServiceServer) UpdateHostCatalog(context.Context, *UpdateHostCatalogRequest) (*UpdateHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostCatalog not implemented")
}
func (*UnimplementedHostCatalogServiceServer) DeleteHostCatalog(context.Context, *DeleteHostCatalogRequest) (*DeleteHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostCatalog not implemented")
}

func RegisterHostCatalogServiceServer(s *grpc.Server, srv HostCatalogServiceServer) {
	s.RegisterService(&_HostCatalogService_serviceDesc, srv)
}

func _HostCatalogService_GetHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).GetHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.HostCatalogService/GetHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).GetHostCatalog(ctx, req.(*GetHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_ListHostCatalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostCatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).ListHostCatalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.HostCatalogService/ListHostCatalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).ListHostCatalogs(ctx, req.(*ListHostCatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_CreateHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).CreateHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.HostCatalogService/CreateHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).CreateHostCatalog(ctx, req.(*CreateHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_UpdateHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).UpdateHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.HostCatalogService/UpdateHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).UpdateHostCatalog(ctx, req.(*UpdateHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_DeleteHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).DeleteHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.services.v1.HostCatalogService/DeleteHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).DeleteHostCatalog(ctx, req.(*DeleteHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostCatalogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.api.services.v1.HostCatalogService",
	HandlerType: (*HostCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostCatalog",
			Handler:    _HostCatalogService_GetHostCatalog_Handler,
		},
		{
			MethodName: "ListHostCatalogs",
			Handler:    _HostCatalogService_ListHostCatalogs_Handler,
		},
		{
			MethodName: "CreateHostCatalog",
			Handler:    _HostCatalogService_CreateHostCatalog_Handler,
		},
		{
			MethodName: "UpdateHostCatalog",
			Handler:    _HostCatalogService_UpdateHostCatalog_Handler,
		},
		{
			MethodName: "DeleteHostCatalog",
			Handler:    _HostCatalogService_DeleteHostCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/api/services/v1/host_catalog_service.proto",
}
