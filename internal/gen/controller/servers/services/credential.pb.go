// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: controller/servers/services/v1/credential.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Credential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Credential:
	//
	//	*Credential_UsernamePassword
	//	*Credential_SshPrivateKey
	//	*Credential_SshCertificate
	//	*Credential_UsernamePasswordDomain
	Credential    isCredential_Credential `protobuf_oneof:"credential"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_controller_servers_services_v1_credential_proto_rawDescGZIP(), []int{0}
}

func (x *Credential) GetCredential() isCredential_Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Credential) GetUsernamePassword() *UsernamePassword {
	if x != nil {
		if x, ok := x.Credential.(*Credential_UsernamePassword); ok {
			return x.UsernamePassword
		}
	}
	return nil
}

func (x *Credential) GetSshPrivateKey() *SshPrivateKey {
	if x != nil {
		if x, ok := x.Credential.(*Credential_SshPrivateKey); ok {
			return x.SshPrivateKey
		}
	}
	return nil
}

func (x *Credential) GetSshCertificate() *SshCertificate {
	if x != nil {
		if x, ok := x.Credential.(*Credential_SshCertificate); ok {
			return x.SshCertificate
		}
	}
	return nil
}

func (x *Credential) GetUsernamePasswordDomain() *UsernamePasswordDomain {
	if x != nil {
		if x, ok := x.Credential.(*Credential_UsernamePasswordDomain); ok {
			return x.UsernamePasswordDomain
		}
	}
	return nil
}

type isCredential_Credential interface {
	isCredential_Credential()
}

type Credential_UsernamePassword struct {
	UsernamePassword *UsernamePassword `protobuf:"bytes,2,opt,name=username_password,json=usernamePassword,proto3,oneof"`
}

type Credential_SshPrivateKey struct {
	SshPrivateKey *SshPrivateKey `protobuf:"bytes,3,opt,name=ssh_private_key,json=sshPrivateKey,proto3,oneof"`
}

type Credential_SshCertificate struct {
	SshCertificate *SshCertificate `protobuf:"bytes,4,opt,name=ssh_certificate,json=sshCertificate,proto3,oneof"`
}

type Credential_UsernamePasswordDomain struct {
	UsernamePasswordDomain *UsernamePasswordDomain `protobuf:"bytes,5,opt,name=username_password_domain,json=usernamePasswordDomain,proto3,oneof"`
}

func (*Credential_UsernamePassword) isCredential_Credential() {}

func (*Credential_SshPrivateKey) isCredential_Credential() {}

func (*Credential_SshCertificate) isCredential_Credential() {}

func (*Credential_UsernamePasswordDomain) isCredential_Credential() {}

// UsernamePassword is a credential containing a username and a password.
type UsernamePassword struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The username of the credential
	Username string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"` // @gotags: `class:"sensitive"`
	// The password of the credential
	Password      string `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"` // @gotags: `class:"secret"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsernamePassword) Reset() {
	*x = UsernamePassword{}
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernamePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePassword) ProtoMessage() {}

func (x *UsernamePassword) ProtoReflect() protoreflect.Message {
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePassword.ProtoReflect.Descriptor instead.
func (*UsernamePassword) Descriptor() ([]byte, []int) {
	return file_controller_servers_services_v1_credential_proto_rawDescGZIP(), []int{1}
}

func (x *UsernamePassword) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UsernamePassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// UsernamePasswordDomain is a credential containing a username, password, and domain.
type UsernamePasswordDomain struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The username of the credential
	Username string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"` // @gotags: `class:"sensitive"`
	// The password of the credential
	Password string `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"` // @gotags: `class:"secret"`
	// The domain of the credential
	Domain        string `protobuf:"bytes,30,opt,name=domain,proto3" json:"domain,omitempty"` // @gotags: `class:"public"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsernamePasswordDomain) Reset() {
	*x = UsernamePasswordDomain{}
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernamePasswordDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePasswordDomain) ProtoMessage() {}

func (x *UsernamePasswordDomain) ProtoReflect() protoreflect.Message {
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePasswordDomain.ProtoReflect.Descriptor instead.
func (*UsernamePasswordDomain) Descriptor() ([]byte, []int) {
	return file_controller_servers_services_v1_credential_proto_rawDescGZIP(), []int{2}
}

func (x *UsernamePasswordDomain) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UsernamePasswordDomain) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UsernamePasswordDomain) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// SshPrivateKey is a credential containing a username a private key and an optional
// private key passphrase.
type SshPrivateKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The username of the credential
	Username string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"` // @gotags: `class:"public"`
	// The private key of the credential
	PrivateKey string `protobuf:"bytes,20,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"` // @gotags: `class:"secret"`
	// The optional passphrase of the private_key
	PrivateKeyPassphrase string `protobuf:"bytes,30,opt,name=private_key_passphrase,json=privateKeyPassphrase,proto3" json:"private_key_passphrase,omitempty"` // @gotags: `class:"secret"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SshPrivateKey) Reset() {
	*x = SshPrivateKey{}
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SshPrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPrivateKey) ProtoMessage() {}

func (x *SshPrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPrivateKey.ProtoReflect.Descriptor instead.
func (*SshPrivateKey) Descriptor() ([]byte, []int) {
	return file_controller_servers_services_v1_credential_proto_rawDescGZIP(), []int{3}
}

func (x *SshPrivateKey) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SshPrivateKey) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SshPrivateKey) GetPrivateKeyPassphrase() string {
	if x != nil {
		return x.PrivateKeyPassphrase
	}
	return ""
}

// SshCertificate is a credential containing a username, private key, and
// client certificate.
type SshCertificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The username of the credential
	Username string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"` // @gotags: `class:"public"`
	// The private key of the credential
	PrivateKey string `protobuf:"bytes,20,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"` // @gotags: `class:"secret"`
	// The client certificate signed by a CA to establish trust of the private key.
	Certificate   string `protobuf:"bytes,30,opt,name=certificate,proto3" json:"certificate,omitempty"` // @gotags: `class:"public"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SshCertificate) Reset() {
	*x = SshCertificate{}
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SshCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshCertificate) ProtoMessage() {}

func (x *SshCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_controller_servers_services_v1_credential_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshCertificate.ProtoReflect.Descriptor instead.
func (*SshCertificate) Descriptor() ([]byte, []int) {
	return file_controller_servers_services_v1_credential_proto_rawDescGZIP(), []int{4}
}

func (x *SshCertificate) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SshCertificate) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SshCertificate) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

var File_controller_servers_services_v1_credential_proto protoreflect.FileDescriptor

const file_controller_servers_services_v1_credential_proto_rawDesc = "" +
	"\n" +
	"/controller/servers/services/v1/credential.proto\x12\x1econtroller.servers.services.v1\"\xb8\x03\n" +
	"\n" +
	"Credential\x12_\n" +
	"\x11username_password\x18\x02 \x01(\v20.controller.servers.services.v1.UsernamePasswordH\x00R\x10usernamePassword\x12W\n" +
	"\x0fssh_private_key\x18\x03 \x01(\v2-.controller.servers.services.v1.SshPrivateKeyH\x00R\rsshPrivateKey\x12Y\n" +
	"\x0fssh_certificate\x18\x04 \x01(\v2..controller.servers.services.v1.SshCertificateH\x00R\x0esshCertificate\x12r\n" +
	"\x18username_password_domain\x18\x05 \x01(\v26.controller.servers.services.v1.UsernamePasswordDomainH\x00R\x16usernamePasswordDomainB\f\n" +
	"\n" +
	"credentialJ\x04\b\x01\x10\x02R\ruser_password\"J\n" +
	"\x10UsernamePassword\x12\x1a\n" +
	"\busername\x18\n" +
	" \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x14 \x01(\tR\bpassword\"h\n" +
	"\x16UsernamePasswordDomain\x12\x1a\n" +
	"\busername\x18\n" +
	" \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x14 \x01(\tR\bpassword\x12\x16\n" +
	"\x06domain\x18\x1e \x01(\tR\x06domain\"\x82\x01\n" +
	"\rSshPrivateKey\x12\x1a\n" +
	"\busername\x18\n" +
	" \x01(\tR\busername\x12\x1f\n" +
	"\vprivate_key\x18\x14 \x01(\tR\n" +
	"privateKey\x124\n" +
	"\x16private_key_passphrase\x18\x1e \x01(\tR\x14privateKeyPassphrase\"o\n" +
	"\x0eSshCertificate\x12\x1a\n" +
	"\busername\x18\n" +
	" \x01(\tR\busername\x12\x1f\n" +
	"\vprivate_key\x18\x14 \x01(\tR\n" +
	"privateKey\x12 \n" +
	"\vcertificate\x18\x1e \x01(\tR\vcertificateBQZOgithub.com/hashicorp/boundary/internal/gen/controller/servers/services;servicesb\x06proto3"

var (
	file_controller_servers_services_v1_credential_proto_rawDescOnce sync.Once
	file_controller_servers_services_v1_credential_proto_rawDescData []byte
)

func file_controller_servers_services_v1_credential_proto_rawDescGZIP() []byte {
	file_controller_servers_services_v1_credential_proto_rawDescOnce.Do(func() {
		file_controller_servers_services_v1_credential_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_controller_servers_services_v1_credential_proto_rawDesc), len(file_controller_servers_services_v1_credential_proto_rawDesc)))
	})
	return file_controller_servers_services_v1_credential_proto_rawDescData
}

var file_controller_servers_services_v1_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_controller_servers_services_v1_credential_proto_goTypes = []any{
	(*Credential)(nil),             // 0: controller.servers.services.v1.Credential
	(*UsernamePassword)(nil),       // 1: controller.servers.services.v1.UsernamePassword
	(*UsernamePasswordDomain)(nil), // 2: controller.servers.services.v1.UsernamePasswordDomain
	(*SshPrivateKey)(nil),          // 3: controller.servers.services.v1.SshPrivateKey
	(*SshCertificate)(nil),         // 4: controller.servers.services.v1.SshCertificate
}
var file_controller_servers_services_v1_credential_proto_depIdxs = []int32{
	1, // 0: controller.servers.services.v1.Credential.username_password:type_name -> controller.servers.services.v1.UsernamePassword
	3, // 1: controller.servers.services.v1.Credential.ssh_private_key:type_name -> controller.servers.services.v1.SshPrivateKey
	4, // 2: controller.servers.services.v1.Credential.ssh_certificate:type_name -> controller.servers.services.v1.SshCertificate
	2, // 3: controller.servers.services.v1.Credential.username_password_domain:type_name -> controller.servers.services.v1.UsernamePasswordDomain
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_controller_servers_services_v1_credential_proto_init() }
func file_controller_servers_services_v1_credential_proto_init() {
	if File_controller_servers_services_v1_credential_proto != nil {
		return
	}
	file_controller_servers_services_v1_credential_proto_msgTypes[0].OneofWrappers = []any{
		(*Credential_UsernamePassword)(nil),
		(*Credential_SshPrivateKey)(nil),
		(*Credential_SshCertificate)(nil),
		(*Credential_UsernamePasswordDomain)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_controller_servers_services_v1_credential_proto_rawDesc), len(file_controller_servers_services_v1_credential_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_controller_servers_services_v1_credential_proto_goTypes,
		DependencyIndexes: file_controller_servers_services_v1_credential_proto_depIdxs,
		MessageInfos:      file_controller_servers_services_v1_credential_proto_msgTypes,
	}.Build()
	File_controller_servers_services_v1_credential_proto = out.File
	file_controller_servers_services_v1_credential_proto_goTypes = nil
	file_controller_servers_services_v1_credential_proto_depIdxs = nil
}
