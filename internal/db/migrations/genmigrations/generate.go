// +build genmigrations

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"sort"
	"strings"
	"text/template"
)

func generate(flavor string) {
	baseDir := os.Getenv("GEN_BASEPATH") + fmt.Sprint("/internal/db/migrations")
	dir, err := os.Open(fmt.Sprintf("%s/%s", baseDir, flavor))
	if err != nil {
		fmt.Printf("error opening dir with flavor %s: %v\n", flavor, err)
		os.Exit(1)
	}
	names, err := dir.Readdirnames(0)
	if err != nil {
		fmt.Printf("error reading dir names with flavor %s: %v\n", flavor, err)
		os.Exit(1)
	}
	outBuf := bytes.NewBuffer(nil)
	valuesBuf := bytes.NewBuffer(nil)

	sort.Strings(names)

	for _, name := range names {
		if !strings.HasSuffix(name, ".sql") {
			continue
		}
		contents, err := ioutil.ReadFile(fmt.Sprintf("%s/%s/%s", baseDir, flavor, name))
		if err != nil {
			fmt.Printf("error opening file %s with flavor %s: %v", name, flavor, err)
			os.Exit(1)
		}
		migrationsValueTemplate.Execute(valuesBuf, struct {
			Name     string
			Contents string
		}{
			Name:     name,
			Contents: string(contents),
		})
	}
	migrationsTemplate.Execute(outBuf, struct {
		Type   string
		Values string
	}{
		Type:   flavor,
		Values: valuesBuf.String(),
	})

	outFile := fmt.Sprintf("%s/%s.gen.go", baseDir, flavor)
	if err := ioutil.WriteFile(outFile, outBuf.Bytes(), 0644); err != nil {
		fmt.Printf("error writing file %q: %v\n", outFile, err)
		os.Exit(1)
	}
}

var migrationsTemplate = template.Must(template.New("").Parse(
	`// Code generated by "make migrations"; DO NOT EDIT.
package migrations
	
import (
	"bytes"
)

var {{ .Type }}Migrations = map[string]*fakeFile{
	"migrations": {
		name: "migrations",
	},
	{{ .Values }}
}
`))

var migrationsValueTemplate = template.Must(template.New("").Parse(
	`"migrations/{{ .Name }}": {
		name: "{{ .Name }}",
		reader: bytes.NewReader([]byte(` + "`\n{{ .Contents }}\n`" + `)),
	},
`))
