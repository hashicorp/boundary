// Package job provides a Job and a JobRun struct suitable for persisting to
// the repository.
//
// The uniqueness of a job is determined by the name and code input parameters, this
// uniqueness is enforced by the database.  The private_id is generated by the
// repository using the code and name as a seed, the id is prefixed with "job_".
//
// A JobRun represents a single execution of a job, only a single run can be in a
// running state for a specific job.
//
// Repository
//
// A repository provides methods for creating, updating, retrieving, and
// deleting jobs and job runs. A new repository should be
// created for each transaction. For example:
//
//  var wrapper wrapping.Wrapper
//  ... init wrapper ...
//
//  // db implements both the reader and writer interfaces.
//  db, _ := db.Open(db.Postgres, url)
//
//  var j *job.Job
//  j, _ = job.NewJob("name", "code", "description")
//
//  var repo *job.Repository
//  repo, _ = job.NewRepository(db, db, wrapper)
//
//  // insert job into database
//  _, _ = repo.CreateJob(context.Background(), j)
//
//  var run *JobRun
//  repo, _ = job.NewRepository(db, db, wrapper)
//  run, _ = repo.FetchWork(context.Background(), "serverId")
//
//  ... run job ...
//  repo, _ = job.NewRepository(db, db, wrapper)
//  run, _ = repo.CheckpointJobRun(ctx, run, []string{"TotalCount", "CompletedCount"})
//
//  run.EndTime = &timestamp.Timestamp{Timestamp: timestamppb.New(time.Now())}
//  run.Status = job.Completed
//  repo, _ = job.NewRepository(db, db, wrapper)
//  run, _ = repo.EndJobRun(ctx, run)
package job
