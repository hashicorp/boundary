// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: controller/storage/credential/store/v1/credential.proto

// Package store provides protobufs for storing types in the credential package.

package store

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Store struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public_id is a surrogate key suitable for use in a public API.
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// The project_id of the owning project and must be set.
	// @inject_tag: `gorm:"not_null"`
	ProjectId     string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" gorm:"not_null"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Store) Reset() {
	*x = Store{}
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_controller_storage_credential_store_v1_credential_proto_rawDescGZIP(), []int{0}
}

func (x *Store) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *Store) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type Library struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public_id is a surrogate key suitable for use in a public API.
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// The store_id of the owning store and must be set.
	// @inject_tag: `gorm:"not_null"`
	StoreId string `protobuf:"bytes,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty" gorm:"not_null"`
	// credential_type is optional. If set, it indicates the type of
	// credential the library returns.
	// @inject_tag: `gorm:"default:null"`
	CredentialType string `protobuf:"bytes,3,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty" gorm:"default:null"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Library) Reset() {
	*x = Library{}
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_controller_storage_credential_store_v1_credential_proto_rawDescGZIP(), []int{1}
}

func (x *Library) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *Library) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *Library) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

type Credential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public_id is a surrogate key suitable for use in a public API.
	// @inject_tag: `gorm:"primary_key"`
	PublicId      string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_controller_storage_credential_store_v1_credential_proto_rawDescGZIP(), []int{2}
}

func (x *Credential) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

type Static struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public_id is a surrogate key suitable for use in a public API.
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// The store_id of the owning store and must be set.
	// @inject_tag: `gorm:"not_null"`
	StoreId       string `protobuf:"bytes,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty" gorm:"not_null"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Static) Reset() {
	*x = Static{}
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Static) ProtoMessage() {}

func (x *Static) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Static.ProtoReflect.Descriptor instead.
func (*Static) Descriptor() ([]byte, []int) {
	return file_controller_storage_credential_store_v1_credential_proto_rawDescGZIP(), []int{3}
}

func (x *Static) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *Static) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

type Dynamic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public_id is a surrogate key suitable for use in a public API.
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// The library_id of the owning library and must be set.
	// @inject_tag: `gorm:"not_null"`
	LibraryId     string `protobuf:"bytes,2,opt,name=library_id,json=libraryId,proto3" json:"library_id,omitempty" gorm:"not_null"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dynamic) Reset() {
	*x = Dynamic{}
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dynamic) ProtoMessage() {}

func (x *Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_credential_store_v1_credential_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dynamic.ProtoReflect.Descriptor instead.
func (*Dynamic) Descriptor() ([]byte, []int) {
	return file_controller_storage_credential_store_v1_credential_proto_rawDescGZIP(), []int{4}
}

func (x *Dynamic) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *Dynamic) GetLibraryId() string {
	if x != nil {
		return x.LibraryId
	}
	return ""
}

var File_controller_storage_credential_store_v1_credential_proto protoreflect.FileDescriptor

const file_controller_storage_credential_store_v1_credential_proto_rawDesc = "" +
	"\n" +
	"7controller/storage/credential/store/v1/credential.proto\x12&controller.storage.credential.store.v1\"C\n" +
	"\x05Store\x12\x1b\n" +
	"\tpublic_id\x18\x01 \x01(\tR\bpublicId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\"j\n" +
	"\aLibrary\x12\x1b\n" +
	"\tpublic_id\x18\x01 \x01(\tR\bpublicId\x12\x19\n" +
	"\bstore_id\x18\x02 \x01(\tR\astoreId\x12'\n" +
	"\x0fcredential_type\x18\x03 \x01(\tR\x0ecredentialType\")\n" +
	"\n" +
	"Credential\x12\x1b\n" +
	"\tpublic_id\x18\x01 \x01(\tR\bpublicId\"@\n" +
	"\x06Static\x12\x1b\n" +
	"\tpublic_id\x18\x01 \x01(\tR\bpublicId\x12\x19\n" +
	"\bstore_id\x18\x02 \x01(\tR\astoreId\"E\n" +
	"\aDynamic\x12\x1b\n" +
	"\tpublic_id\x18\x01 \x01(\tR\bpublicId\x12\x1d\n" +
	"\n" +
	"library_id\x18\x02 \x01(\tR\tlibraryIdB?Z=github.com/hashicorp/boundary/internal/credential/store;storeb\x06proto3"

var (
	file_controller_storage_credential_store_v1_credential_proto_rawDescOnce sync.Once
	file_controller_storage_credential_store_v1_credential_proto_rawDescData []byte
)

func file_controller_storage_credential_store_v1_credential_proto_rawDescGZIP() []byte {
	file_controller_storage_credential_store_v1_credential_proto_rawDescOnce.Do(func() {
		file_controller_storage_credential_store_v1_credential_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_controller_storage_credential_store_v1_credential_proto_rawDesc), len(file_controller_storage_credential_store_v1_credential_proto_rawDesc)))
	})
	return file_controller_storage_credential_store_v1_credential_proto_rawDescData
}

var file_controller_storage_credential_store_v1_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_controller_storage_credential_store_v1_credential_proto_goTypes = []any{
	(*Store)(nil),      // 0: controller.storage.credential.store.v1.Store
	(*Library)(nil),    // 1: controller.storage.credential.store.v1.Library
	(*Credential)(nil), // 2: controller.storage.credential.store.v1.Credential
	(*Static)(nil),     // 3: controller.storage.credential.store.v1.Static
	(*Dynamic)(nil),    // 4: controller.storage.credential.store.v1.Dynamic
}
var file_controller_storage_credential_store_v1_credential_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_controller_storage_credential_store_v1_credential_proto_init() }
func file_controller_storage_credential_store_v1_credential_proto_init() {
	if File_controller_storage_credential_store_v1_credential_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_controller_storage_credential_store_v1_credential_proto_rawDesc), len(file_controller_storage_credential_store_v1_credential_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_controller_storage_credential_store_v1_credential_proto_goTypes,
		DependencyIndexes: file_controller_storage_credential_store_v1_credential_proto_depIdxs,
		MessageInfos:      file_controller_storage_credential_store_v1_credential_proto_msgTypes,
	}.Build()
	File_controller_storage_credential_store_v1_credential_proto = out.File
	file_controller_storage_credential_store_v1_credential_proto_goTypes = nil
	file_controller_storage_credential_store_v1_credential_proto_depIdxs = nil
}
