// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package controller.api.services.v1;

import "controller/api/resources/sessions/v1/session.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/hashicorp/boundary/internal/gen/controller/api/services;services";

service SessionService {
  // GetSession returns a stored Session if present.  The provided request
  // must include the Session ID for the Session being retrieved. If
  // any that ID is missing, malformed or reference a non existing
  // resource an error is returned.
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse) {
    option (google.api.http) = {
      get: "/v1/sessions/{id}"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Gets a single Session."};
  }

  // ListSessions returns a list of stored Sessions which exist inside the scope
  // referenced inside the request. The request must include the scope ID for
  // the Sessions being retrieved. If the scope ID is missing, malformed, or
  // reference a non existing scope, an error is returned.
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse) {
    option (google.api.http) = {get: "/v1/sessions"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Lists all Sessions."};
  }

  // CancelSession cancels an existing Session in boundary.  An error
  // is returned if the request attempts to cancel a Session that does
  // not exist.
  rpc CancelSession(CancelSessionRequest) returns (CancelSessionResponse) {
    option (google.api.http) = {
      post: "/v1/sessions/{id}:cancel"
      body: "*"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Cancels a Session."};
  }
}

message GetSessionRequest {
  string id = 1; // @gotags: `class:"public"`
}

message GetSessionResponse {
  resources.sessions.v1.Session item = 1;
}

message ListSessionsRequest {
  string scope_id = 1; // @gotags: `class:"public"`
  bool recursive = 20 [json_name = "recursive"]; // @gotags: `class:"public"`
  string filter = 30 [json_name = "filter"]; // @gotags: `class:"public"`
  // Experimental. By default only non-terminated (i.e. pending, active, canceling) are returned.
  // Set this option to include terminated sessions as well.
  bool include_terminated = 40 [json_name = "include_terminated"]; // @gotags: `class:"public"`
  // An opaque token used to continue an existing iteration or
  // request updated items. If paginating, use this token in the
  // next list request.
  string refresh_token = 50 [json_name = "refresh_token"]; // @gotags: `class:"public"`
  // The maximum size of a page in this iteration.
  // If unset, the default page size configured will be used.
  // If the page_size is greater than the max page size configured,
  // the page size will be truncated to this number.
  uint32 page_size = 60 [json_name = "page_size"]; // @gotags: `class:"public"`
}

message ListSessionsResponse {
  // The items returned in this page.
  repeated resources.sessions.v1.Session items = 1;
  // The type of response, either "delta" or "complete".
  // Delta signifies that this is part of a paginated result
  // or an update to a previously completed pagination.
  // Complete signifies that it is the last page.
  string response_type = 20 [json_name = "response_type"]; // @gotags: `class:"public"`
  // An opaque token used to continue an existing pagination or
  // request updated items. Use this token in the next list request
  // to request the next page.
  string refresh_token = 30 [json_name = "refresh_token"]; // @gotags: `class:"public"`
  // The name of the field which the items are sorted by.
  string sort_by = 40 [json_name = "sort_by"]; // @gotags: `class:"public"`
  // The direction of the sort, either "asc" or "desc".
  string sort_dir = 50 [json_name = "sort_dir"]; // @gotags: `class:"public"`
  // A list of item IDs that have been removed since they were returned
  // as part of an pagination. They should be dropped from any client cache.
  // This may contain items that are not known to the cache, if they were
  // created and deleted between listings.
  repeated string removed_ids = 60 [json_name = "removed_ids"]; // @gotags: `class:"public"`
  // An estimate at the total items available. This may change during pagination.
  uint32 est_item_count = 70 [json_name = "est_item_count"]; // @gotags: `class:"public"`
}

message CancelSessionRequest {
  string id = 1; // @gotags: `class:"public"`
  uint32 version = 2; // @gotags: `class:"public"`
}

message CancelSessionResponse {
  resources.sessions.v1.Session item = 1;
}
