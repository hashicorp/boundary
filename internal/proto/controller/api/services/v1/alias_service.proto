// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package controller.api.services.v1;

import "controller/api/resources/aliases/v1/alias.proto";
import "controller/custom_options/v1/options.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/hashicorp/boundary/internal/gen/controller/api/services;services";
option (custom_options.v1.domain) = "auth";

service AliasService {
  // GetAlias returns a stored Alias if present. The provided request must
  // include the id for the Alias be retrieved. If missing, malformed or
  // referencing a non existing Alias an error is returned.
  rpc GetAlias(GetAliasRequest) returns (GetAliasResponse) {
    option (google.api.http) = {
      get: "/v1/aliases/{id}"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Gets a single Alias."};
  }

  // ListAliases returns a list of stored Aliases which exist inside the
  // provided Scope. The request must include the Scope id which
  // contains the Aliases being listed. If missing or malformed an error
  // is returned.
  rpc ListAliases(ListAliasesRequest) returns (ListAliasesResponse) {
    option (google.api.http) = {get: "/v1/aliases"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Lists all Aliases in a specific Scope."};
  }

  // CreateAlias creates and stores an Alias in boundary. The provided
  // request must include the Scope ID in which the Alias will be
  // created. If the Scope ID is missing, malformed, or references a non
  // existing resource an error is returned. If a name or login_name is
  // provided that is in use in another Alias in the same Scope an
  // error is returned.
  rpc CreateAlias(CreateAliasRequest) returns (CreateAliasResponse) {
    option (google.api.http) = {
      post: "/v1/aliases"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Creates a single Alias in the provided scope."};
  }

  // UpdateAlias updates an existing Alias in boundary. The provided Alias
  // must not have any read only fields set. The update mask must be included in
  // the request and contain at least 1 mutable field. To unset a field's value,
  // include the field in the update mask and don't set it in the provided
  // Alias. An error is returned if the Alias id is missing or references a
  // non-existing resource. An error is also returned if the request attempts
  // to update the name or login_name to one that is already in use in the
  // containing Scope.
  rpc UpdateAlias(UpdateAliasRequest) returns (UpdateAliasResponse) {
    option (google.api.http) = {
      patch: "/v1/aliases/{id}"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Updates an Alias."};
  }

  // DeleteAlias removes an Alias from Boundary. If the provided Alias Id
  // is malformed or not provided an error is returned.
  rpc DeleteAlias(DeleteAliasRequest) returns (DeleteAliasResponse) {
    option (google.api.http) = {delete: "/v1/aliases/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Deletes an Alias."};
  }
}

message GetAliasRequest {
  string id = 1; // @gotags: `class:"public" eventstream:"observation"`
}

message GetAliasResponse {
  resources.aliases.v1.Alias item = 1;
}

message ListAliasesRequest {
  string scope_id = 1 [json_name = "scope_id"]; // @gotags: `class:"public" eventstream:"observation"`

  bool recursive = 2; // @gotags: `class:"public"`

  string filter = 30 [json_name = "filter"]; // @gotags: `class:"sensitive"`

  // An opaque token used to continue an existing iteration or
  // request updated items. If not specified, pagination
  // will start from the beginning.
  string list_token = 40 [json_name = "list_token"]; // @gotags: `class:"public"`

  // The maximum size of a page in this iteration.
  // If unset, the default page size configured will be used.
  // If the page_size is greater than the default page configured,
  // an error will be returned.
  uint32 page_size = 50 [json_name = "page_size"]; // @gotags: `class:"public"`
}

message ListAliasesResponse {
  repeated resources.aliases.v1.Alias items = 1;

  // The type of response, either "delta" or "complete".
  // Delta signifies that this is part of a paginated result
  // or an update to a previously completed pagination.
  // Complete signifies that it is the last page.
  string response_type = 2 [json_name = "response_type"]; // @gotags: `class:"public"`

  // An opaque token used to continue an existing pagination or
  // request updated items. Use this token in the next list request
  // to request the next page.
  string list_token = 3 [json_name = "list_token"]; // @gotags: `class:"public"`

  // The name of the field which the items are sorted by.
  string sort_by = 4 [json_name = "sort_by"]; // @gotags: `class:"public"`

  // The direction of the sort, either "asc" or "desc".
  string sort_dir = 5 [json_name = "sort_dir"]; // @gotags: `class:"public"`

  // A list of item IDs that have been removed since they were returned
  // as part of a pagination. They should be dropped from any client cache.
  // This may contain items that are not known to the cache, if they were
  // created and deleted between listings.
  repeated string removed_ids = 6 [json_name = "removed_ids"]; // @gotags: `class:"public"`

  // An estimate at the total items available. This may change during pagination.
  uint32 est_item_count = 7 [json_name = "est_item_count"]; // @gotags: `class:"public"`
}

message CreateAliasRequest {
  resources.aliases.v1.Alias item = 1;
}

message CreateAliasResponse {
  string uri = 1; // @gotags: `class:"public" eventstream:"observation"`
  resources.aliases.v1.Alias item = 2;
}

message UpdateAliasRequest {
  string id = 1; // @gotags: `class:"public" eventstream:"observation"`
  resources.aliases.v1.Alias item = 2;
  google.protobuf.FieldMask update_mask = 3 [json_name = "update_mask"];
}

message UpdateAliasResponse {
  resources.aliases.v1.Alias item = 1;
}

message DeleteAliasRequest {
  string id = 1; // @gotags: `class:"public" eventstream:"observation"`
}

message DeleteAliasResponse {}
