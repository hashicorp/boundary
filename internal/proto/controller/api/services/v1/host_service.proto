// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package controller.api.services.v1;

import "controller/api/resources/hosts/v1/host.proto";
import "controller/custom_options/v1/options.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/hashicorp/boundary/internal/gen/controller/api/services;services";
option (custom_options.v1.domain) = "host";

service HostService {
  // GetHost returns a stored Host if present.  The provided request
  // must include the host ID for the resource being retrieved. If the ID is
  // missing, malformed or referencing anon existing resource an error is
  // returned.
  rpc GetHost(GetHostRequest) returns (GetHostResponse) {
    option (google.api.http) = {
      get: "/v1/hosts/{id}"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Gets a single Host."};
  }

  // ListHosts returns a list of stored hosts which exist inside the provided
  // Host Catalog. The request must include the Host Catalog id containing the
  // Hosts being listed.  If the id is missing, malformed, or reference a
  // non-existing resource, an error is returned.
  rpc ListHosts(ListHostsRequest) returns (ListHostsResponse) {
    option (google.api.http) = {get: "/v1/hosts"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "List all Hosts for the specified Catalog."};
  }

  // CreateHost creates and stores a Host in boundary.  The provided
  // request must include the Host Catalog id in which the Host
  // will be created.  If the Catalog id is missing, malformed or references a
  // non-existing resource, an error is returned.  If a name is provided that
  // is in use by another Host in the same Host Catalog, an error is returned.
  rpc CreateHost(CreateHostRequest) returns (CreateHostResponse) {
    option (google.api.http) = {
      post: "/v1/hosts"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Create a single Host."};
  }

  // UpdateHost updates an existing Host in boundary.  The provided
  // Host must not have any read only fields set.  The update mask must be
  // included in the request and contain at least 1 mutable field.  To unset
  // a field's value, include the field in the update mask and don't set it
  // in the provided Host. An error is returned if the Host id is missing or
  // reference a non-existing resource.  An error is also returned if the
  // request attempts to update the name to one that is already in use in
  // the same Host Catalog.
  rpc UpdateHost(UpdateHostRequest) returns (UpdateHostResponse) {
    option (google.api.http) = {
      patch: "/v1/hosts/{id}"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Update a Host."};
  }

  // DeleteHost removes a Host from Boundary. If the provided Host ID
  // is malformed or not provided an error is returned.
  rpc DeleteHost(DeleteHostRequest) returns (DeleteHostResponse) {
    option (google.api.http) = {delete: "/v1/hosts/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Delete a Host."};
  }
}

message GetHostRequest {
  string id = 1; // @gotags: `class:"public" eventstream:"observation"`
}

message GetHostResponse {
  api.resources.hosts.v1.Host item = 1;
}

message ListHostsRequest {
  string host_catalog_id = 1 [json_name = "host_catalog_id"]; // @gotags: `class:"public" eventstream:"observation"`
  string filter = 30 [json_name = "filter"]; // @gotags: `class:"public"`
  // An opaque token used to continue an existing iteration or
  // request updated items. If not specified, pagination
  // will start from the beginning.
  string list_token = 40 [json_name = "list_token"]; // @gotags: `class:"public"`
  // The maximum size of a page in this iteration.
  // If unset, the default page size configured will be used.
  // If the page_size is greater than the default page configured,
  // an error will be returned.
  uint32 page_size = 50 [json_name = "page_size"]; // @gotags: `class:"public"`
}

message ListHostsResponse {
  repeated api.resources.hosts.v1.Host items = 1;
  // The type of response, either "delta" or "complete".
  // Delta signifies that this is part of a paginated result
  // or an update to a previously completed pagination.
  // Complete signifies that it is the last page.
  string response_type = 2 [json_name = "response_type"]; // @gotags: `class:"public"`
  // An opaque token used to continue an existing pagination or
  // request updated items. Use this token in the next list request
  // to request the next page.
  string list_token = 3 [json_name = "list_token"]; // @gotags: `class:"public"`
  // The name of the field which the items are sorted by.
  string sort_by = 4 [json_name = "sort_by"]; // @gotags: `class:"public"`
  // The direction of the sort, either "asc" or "desc".
  string sort_dir = 5 [json_name = "sort_dir"]; // @gotags: `class:"public"`
  // A list of item IDs that have been removed since they were returned
  // as part of a pagination. They should be dropped from any client cache.
  // This may contain items that are not known to the cache, if they were
  // created and deleted between listings.
  repeated string removed_ids = 6 [json_name = "removed_ids"]; // @gotags: `class:"public"`
  // An estimate at the total items available. This may change during pagination.
  uint32 est_item_count = 7 [json_name = "est_item_count"]; // @gotags: `class:"public"`
}

message CreateHostRequest {
  api.resources.hosts.v1.Host item = 1;
}

message CreateHostResponse {
  string uri = 1; // @gotags: `class:"public" eventstream:"observation"`
  api.resources.hosts.v1.Host item = 2;
}

message UpdateHostRequest {
  string id = 1; // @gotags: `class:"public" eventstream:"observation"`
  api.resources.hosts.v1.Host item = 2;
  google.protobuf.FieldMask update_mask = 3 [json_name = "update_mask"];
}

message UpdateHostResponse {
  api.resources.hosts.v1.Host item = 1;
}

message DeleteHostRequest {
  string id = 1; // @gotags: `class:"public" eventstream:"observation"`
}

message DeleteHostResponse {}
