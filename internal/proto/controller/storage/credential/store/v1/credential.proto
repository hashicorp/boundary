// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

syntax = "proto3";

// Package store provides protobufs for storing types in the credential package.
package controller.storage.credential.store.v1;

import "controller/storage/timestamp/v1/timestamp.proto";

option go_package = "github.com/hashicorp/boundary/internal/credential/store;store";

message Store {
  // public_id is a surrogate key suitable for use in a public API.
  // @inject_tag: `gorm:"primary_key"`
  string public_id = 1;

  // The project_id of the owning project and must be set.
  // @inject_tag: `gorm:"not_null"`
  string project_id = 2;
}

message Library {
  // public_id is a surrogate key suitable for use in a public API.
  // @inject_tag: `gorm:"primary_key"`
  string public_id = 1;

  // The store_id of the owning store and must be set.
  // @inject_tag: `gorm:"not_null"`
  string store_id = 2;

  // credential_type is optional. If set, it indicates the type of
  // credential the library returns.
  // @inject_tag: `gorm:"default:null"`
  string credential_type = 3;
}

message Credential {
  // public_id is a surrogate key suitable for use in a public API.
  // @inject_tag: `gorm:"primary_key"`
  string public_id = 1;
}

message Static {
  // public_id is a surrogate key suitable for use in a public API.
  // @inject_tag: `gorm:"primary_key"`
  string public_id = 1;

  // The store_id of the owning store and must be set.
  // @inject_tag: `gorm:"not_null"`
  string store_id = 2;
}

message Dynamic {
  // public_id is a surrogate key suitable for use in a public API.
  // @inject_tag: `gorm:"primary_key"`
  string public_id = 1;

  // The library_id of the owning library and must be set.
  // @inject_tag: `gorm:"not_null"`
  string library_id = 2;
}

message StoreListQueryResult {
  // public_id is a surrogate key suitable for use in a public API.
  // @inject_tag: `gorm:"primary_key"`
  string public_id = 1;

  // The project_id of the owning project and must be set.
  // @inject_tag: `gorm:"not_null"`
  string project_id = 2;

  // Optional name of the credential store.
  string name = 3;

  // Optional description of the credential store.
  string description = 4;

  // Create time of the credential store.
  timestamp.v1.Timestamp create_time = 5;

  // Update time of the credential store.
  timestamp.v1.Timestamp update_time = 6;

  // Version of the credential store.
  uint32 version = 7;

  // Optional delete time of the credential store.
  timestamp.v1.Timestamp delete_time = 8;

  // Optional Vault address of the credential store.
  string vault_address = 9;

  // Optional namespace of the credential store.
  string namespace = 10;

  // Optional CA cert of the credential store.
  bytes ca_cert = 11;

  // Optional TLS server name of the credential store.
  string tls_server_name = 12;

  // Optionally specifices whether to skip TLS verification of the credential store.
  bool tls_skip_verify = 13;

  // Optional worker filter of the credential store.
  string worker_filter = 14;

  // Optional token HMAC of the credential store.
  bytes token_hmac = 15;

  // Optional token status of the credential store.
  string token_status = 16;

  // Optional client certificate of the credential store.
  bytes client_cert = 17;

  // Optional client cert key HMAC of the credential store.
  bytes client_cert_key_hmac = 18;

  // The subtype of the credential store.
  string subtype = 19;
}
