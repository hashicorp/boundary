syntax = "proto3";

package controller.api.services.v1;

option go_package = "github.com/hashicorp/watchtower/internal/gen/controller/api/services;services";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "controller/api/resources/hosts/v1/host.proto";

service HostService {
  // This retrieves the host specified in the request using the basic view.
  rpc GetHost(GetHostRequest) returns (GetHostResponse) {
    option (google.api.http) = {
      get: "/v1/scopes/*/host-catalogs/{host_catalog_id}/hosts/{id}"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Gets a single Host"
    };
  }
  rpc ListHosts(ListHostsRequest) returns (ListHostsResponse) {
    option (google.api.http) = {
      get: "/v1/scopes/*/host-catalogs/{host_catalog_id}/hosts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all Hosts for the specified catalog"
    };
  }
  rpc CreateHost(CreateHostRequest) returns (CreateHostResponse) {
    option (google.api.http) = {
      post: "/v1/scopes/*/host-catalogs/{host_catalog_id}/hosts"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a single Host"
    };
  }
  rpc UpdateHost(UpdateHostRequest) returns (UpdateHostResponse) {
    option (google.api.http) = {
      patch: "/v1/scopes/*/host-catalogs/{host_catalog_id}/hosts/{id}"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a Host"
    };
  }
  rpc DeleteHost(DeleteHostRequest) returns (DeleteHostResponse) {
    option (google.api.http) = {
      delete: "/v1/scopes/*/host-catalogs/{host_catalog_id}/hosts/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a Host"
    };
  }
}

message GetHostRequest {
  string host_catalog_id = 1 [json_name="host_catalog_id"];
  string id = 2;
  string view = 3;
}

message GetHostResponse {
  api.resources.hosts.v1.Host item = 1;
}

message ListHostsRequest {
  string host_catalog_id = 1 [json_name="host_catalog_id"];
  string view = 2;
}

message ListHostsResponse {
  repeated api.resources.hosts.v1.Host items = 1;
}

message CreateHostRequest {
  string host_catalog_id = 1 [json_name="host_catalog_id"];
  api.resources.hosts.v1.Host item = 2;
}

message CreateHostResponse {
  string uri = 1;
  api.resources.hosts.v1.Host item = 2;
}

message UpdateHostRequest {
  string host_catalog_id = 1 [json_name="host_catalog_id"];
  string id = 2;
  api.resources.hosts.v1.Host item = 3;
  google.protobuf.FieldMask update_mask = 4;
}

message UpdateHostResponse {
  api.resources.hosts.v1.Host item = 1;
}

message DeleteHostRequest {
  string host_catalog_id = 1 [json_name="host_catalog_id"];
  string id = 2;
}

message DeleteHostResponse {
  bool existed = 1;
}
