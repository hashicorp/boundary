syntax = "proto3";

package controller.api.services.v1;

option go_package = "github.com/hashicorp/watchtower/internal/gen/controller/api/services;services";

import "protoc-gen-swagger/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "controller/api/resources/hosts/v1/host_catalog.proto";

service HostCatalogService {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_tag) = {
		description: "The host catalog service allows you to get/mutate Host catalogs of every type."
	};

  // This retrieves the host catalog specified in the request using the basic view.
  rpc GetHostCatalog(GetHostCatalogRequest) returns (GetHostCatalogResponse) {
    // Gets the host as specified int he url.
    option (google.api.http) = {
      get: "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{id}"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Gets a single HostCatalog"
      description: "Get's a single Host Catalog with the provided identifier."
    };
  }
  rpc ListHostCatalogs(ListHostCatalogsRequest) returns (ListHostCatalogsResponse) {
    option (google.api.http) = {
      get: "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Gets a list of HostCatalogs"
    };
  }
  rpc CreateHostCatalog(CreateHostCatalogRequest) returns (CreateHostCatalogResponse) {
    option (google.api.http) = {
      post: "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Creates a HostCatalog"
      description: "Creates a single host catalog under the specified org and project"
    };
  }
  rpc UpdateHostCatalog(UpdateHostCatalogRequest) returns (UpdateHostCatalogResponse) {
    option (google.api.http) = {
      patch: "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{id}"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Updates a HostCatalog"
    };
  }
  // Deleting a HostCatalog removes all hosts and host sets associated with this Catalog.
  rpc DeleteHostCatalog(DeleteHostCatalogRequest) returns (DeleteHostCatalogResponse) {
    option (google.api.http) = {
      delete: "/v1/orgs/{org_id}/projects/{project_id}/host-catalogs/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Deletes a HostCatalog"
    };
  }
}

message GetHostCatalogRequest {
  string org_id = 1;
  string project_id = 2;
  string id = 3;
  string view = 4;
}

message GetHostCatalogResponse {
  api.resources.hosts.v1.HostCatalog item = 1;
}

message ListHostCatalogsRequest {
  string org_id = 1;
  string project_id = 2;
  string view = 3;
}

message ListHostCatalogsResponse {
  repeated api.resources.hosts.v1.HostCatalog items = 1;
}

message CreateHostCatalogRequest {
  string org_id = 1;
  string project_id = 2;
  api.resources.hosts.v1.HostCatalog item = 3;
}

message CreateHostCatalogResponse {
  string uri = 1;
  api.resources.hosts.v1.HostCatalog item = 2;
}

message UpdateHostCatalogRequest {
  string org_id = 1;
  string project_id = 2;
  string id = 3;
  api.resources.hosts.v1.HostCatalog item = 4;
  google.protobuf.FieldMask update_mask = 5;
}

message UpdateHostCatalogResponse {
  api.resources.hosts.v1.HostCatalog item = 1;
}

message DeleteHostCatalogRequest {
  string org_id = 1;
  string project_id = 2;
  string id = 3;
}

message DeleteHostCatalogResponse {
  bool existed = 1;
}
