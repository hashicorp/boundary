syntax = "proto3";

// Package store provides protobufs for storing types in the password package.
package controller.storage.auth.password.store.v1;
option go_package = "github.com/hashicorp/watchtower/internal/auth/password/store;store";

import "controller/storage/timestamp/v1/timestamp.proto";

message Argon2Configuration {
  // @inject_tag: gorm:"primary_key"
  string public_id = 1;

  // The create_time is set by the database.
  // @inject_tag: `gorm:"default:current_timestamp"`
  timestamp.v1.Timestamp create_time = 2;

  // @inject_tag: gorm:"not_null"
  string auth_password_method_id = 3;

  // @inject_tag: gorm:"not_null"
  uint32 iterations = 4;

  // @inject_tag: gorm:"not_null"
  uint32 memory = 5;

  // @inject_tag: gorm:"not_null"
  uint32 threads = 6;

  // @inject_tag: gorm:"not_null"
  uint32 salt_length = 7;

  // @inject_tag: gorm:"not_null"
  uint32 key_length = 8;
}

message Argon2Credential {
  // @inject_tag: gorm:"primary_key"
  string public_id = 1;

  // The create_time is set by the database.
  // @inject_tag: `gorm:"default:current_timestamp"`
  timestamp.v1.Timestamp create_time = 2;

  // The update_time is set by the database.
  // @inject_tag: `gorm:"default:current_timestamp"`
  timestamp.v1.Timestamp update_time = 3;

  // @inject_tag: gorm:"not_null"
  string auth_password_account_id = 4;
  // @inject_tag: gorm:"not_null"
  string auth_password_argon2_conf_id = 5;
  // @inject_tag: gorm:"not_null"
  string auth_password_method_id = 6;

  // ct_salt is the encrypted salt which is stored in the database.
  // @inject_tag: gorm:"column:data;not_null" wrapping:"ct,entry_salt"
  bytes ct_salt = 7;

  // salt is the unencrypted salt which is not stored in the database.
  // @inject_tag: gorm:"-" wrapping:"pt,entry_salt"
  bytes salt = 8;

  // hashed_password is the derived key produced by the Argon2id key
  // derivation function.
  // @inject_tag: gorm:"not_null"
  bytes hashed_password = 9;
}
