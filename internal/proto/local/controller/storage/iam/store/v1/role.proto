syntax = "proto3";

package controller.storage.iam.store.v1;
option go_package = "github.com/hashicorp/boundary/internal/iam/store;store";

import "controller/storage/timestamp/v1/timestamp.proto";
import "controller/storage/iam/store/v1/scope.proto";
import "controller/custom_options/v1/options.proto";

message Role {
  // public_id is used to access the Role via an API
  // @inject_tag: gorm:"primary_key"
  string public_id = 1;

  // create_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  timestamp.v1.Timestamp create_time = 2;

  // update_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  timestamp.v1.Timestamp update_time = 3;

  // name is the optional friendly name used to
  // access the Role via an API
  // @inject_tag: `gorm:"default:null"`
  string name = 5 [(custom_options.v1.mask_mapping) = {this:"name" that: "name"}];

  // description of the role
  // @inject_tag: `gorm:"default:null"`
  string description = 6 [(custom_options.v1.mask_mapping) = {this:"description" that: "description"}];

  // scope id for the role
  // @inject_tag: `gorm:"default:null"`
  string scope_id = 7;

  // disabled is by default false and allows a Role to be marked disabled.
  // @inject_tag: `gorm:"default:null"`
  bool disabled = 8;

  // version allows optimistic locking of the role when modifying the role
  // itself and when modifying dependent items like principal roles.
  // @inject_tag: `gorm:"default:null"`
  uint32 version = 9;

  // grant_scope_id is used for delegating access; it defines a scope other than
  // the role's scope that is used when compiling these grants into an ACL
  // @inject_tag: `gorm:"default:null"`
  string grant_scope_id = 10 [(custom_options.v1.mask_mapping) = {this:"GrantScopeId" that: "grant_scope_id"}];
}
