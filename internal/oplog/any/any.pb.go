// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: any.proto

package any

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpType int32

const (
	OpType_UnknownOp OpType = 0
	OpType_CreateOp  OpType = 1
	OpType_UpdateOp  OpType = 2
	OpType_DeleteOp  OpType = 3
)

var OpType_name = map[int32]string{
	0: "UnknownOp",
	1: "CreateOp",
	2: "UpdateOp",
	3: "DeleteOp",
}

var OpType_value = map[string]int32{
	"UnknownOp": 0,
	"CreateOp":  1,
	"UpdateOp":  2,
	"DeleteOp":  3,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8caaf9c5567cb817, []int{0}
}

type Any struct {
	Anything *types.Any `protobuf:"bytes,1,opt,name=anything,proto3" json:"anything,omitempty"`
	Type     OpType     `protobuf:"varint,2,opt,name=type,proto3,enum=hashicorp.watchtower.controller.v1.OpType" json:"type,omitempty"`
}

func (m *Any) Reset()         { *m = Any{} }
func (m *Any) String() string { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()    {}
func (*Any) Descriptor() ([]byte, []int) {
	return fileDescriptor_8caaf9c5567cb817, []int{0}
}
func (m *Any) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Any) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Any.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Any) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Any.Merge(m, src)
}
func (m *Any) XXX_Size() int {
	return m.Size()
}
func (m *Any) XXX_DiscardUnknown() {
	xxx_messageInfo_Any.DiscardUnknown(m)
}

var xxx_messageInfo_Any proto.InternalMessageInfo

func (m *Any) GetAnything() *types.Any {
	if m != nil {
		return m.Anything
	}
	return nil
}

func (m *Any) GetType() OpType {
	if m != nil {
		return m.Type
	}
	return OpType_UnknownOp
}

func init() {
	proto.RegisterEnum("hashicorp.watchtower.controller.v1.OpType", OpType_name, OpType_value)
	proto.RegisterType((*Any)(nil), "hashicorp.watchtower.controller.v1.Any")
}

func init() { proto.RegisterFile("any.proto", fileDescriptor_8caaf9c5567cb817) }

var fileDescriptor_8caaf9c5567cb817 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0x87, 0x73, 0xad, 0x94, 0xf6, 0xfc, 0x43, 0x09, 0x0e, 0xd5, 0xe1, 0x28, 0x9d, 0x4a, 0x87,
	0x3b, 0xad, 0xe0, 0x22, 0x08, 0x55, 0xf7, 0x48, 0xb1, 0x8b, 0xdb, 0x25, 0x9e, 0x49, 0xf0, 0x7c,
	0xdf, 0xe3, 0xbc, 0x1a, 0xee, 0x5b, 0xf8, 0xb1, 0x1c, 0x3b, 0x3a, 0x4a, 0xf2, 0x45, 0x24, 0x09,
	0xc6, 0xd1, 0xf1, 0x81, 0xf7, 0x81, 0xe7, 0xfd, 0xd1, 0x91, 0x04, 0xcf, 0x8d, 0x45, 0x87, 0xe1,
	0x2c, 0x93, 0x6f, 0x59, 0x9e, 0xa0, 0x35, 0xbc, 0x90, 0x2e, 0xc9, 0x1c, 0x16, 0xca, 0xf2, 0x04,
	0xc1, 0x59, 0xd4, 0x5a, 0x59, 0xfe, 0x7e, 0x7e, 0x7a, 0x92, 0x22, 0xa6, 0x5a, 0x89, 0xc6, 0x88,
	0xb7, 0xcf, 0xa2, 0xd3, 0x67, 0x05, 0xed, 0xaf, 0xc0, 0x87, 0x67, 0x74, 0x28, 0xc1, 0xbb, 0x2c,
	0x87, 0x74, 0x42, 0xa6, 0x64, 0xbe, 0xbf, 0x3c, 0xe6, 0xad, 0xc4, 0x7f, 0x25, 0xbe, 0x02, 0xbf,
	0xee, 0xae, 0xc2, 0x6b, 0xba, 0xe7, 0xbc, 0x51, 0x93, 0xde, 0x94, 0xcc, 0x8f, 0x96, 0x0b, 0xfe,
	0x7f, 0x06, 0x8f, 0xcc, 0x83, 0x37, 0x6a, 0xdd, 0x78, 0x8b, 0x15, 0x1d, 0xb4, 0x1c, 0x1e, 0xd2,
	0xd1, 0x06, 0x5e, 0x00, 0x0b, 0x88, 0xcc, 0x38, 0x08, 0x0f, 0xe8, 0xf0, 0xd6, 0x2a, 0xe9, 0x54,
	0x64, 0xc6, 0xa4, 0xa6, 0x8d, 0x79, 0x6a, 0xa9, 0x57, 0xd3, 0x9d, 0xd2, 0xaa, 0xa1, 0xfe, 0xcd,
	0xfd, 0x67, 0xc9, 0xc8, 0xae, 0x64, 0xe4, 0xbb, 0x64, 0xe4, 0xa3, 0x62, 0xc1, 0xae, 0x62, 0xc1,
	0x57, 0xc5, 0x82, 0xc7, 0xcb, 0x34, 0x77, 0xd9, 0x36, 0xe6, 0x09, 0xbe, 0x8a, 0x2e, 0x4c, 0xfc,
	0x85, 0x89, 0x1c, 0x9c, 0xb2, 0x20, 0xb5, 0x40, 0xa3, 0x31, 0xad, 0xf7, 0xb8, 0x92, 0xe0, 0xe3,
	0x41, 0xf3, 0xec, 0xc5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0x5b, 0x0c, 0xbe, 0x60, 0x01,
	0x00, 0x00,
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Any) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintAny(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Anything != nil {
		{
			size, err := m.Anything.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAny(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAny(dAtA []byte, offset int, v uint64) int {
	offset -= sovAny(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Any) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Anything != nil {
		l = m.Anything.Size()
		n += 1 + l + sovAny(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAny(uint64(m.Type))
	}
	return n
}

func sovAny(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAny(x uint64) (n int) {
	return sovAny(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAny
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anything", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAny
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAny
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAny
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anything == nil {
				m.Anything = &types.Any{}
			}
			if err := m.Anything.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAny
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAny(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAny
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAny
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAny(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAny
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAny
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAny
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAny
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAny
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAny
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAny        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAny          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAny = fmt.Errorf("proto: unexpected end of group")
)
