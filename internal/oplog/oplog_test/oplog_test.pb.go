// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oplog_test.proto

// define a test proto package

package oplog_test

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Timestamp for test proto pkg
type Timestamp struct {
	Timestamp *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9e4ae6eb8aa88c, []int{0}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// TestUser for gorm test user model
type TestUser struct {
	// @inject_tag: gorm:"primary_key"
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: gorm:"not_null;type:TIMESTAMP"
	CreatedAt *Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// @inject_tag: gorm:"not_null;type:TIMESTAMP"
	UpdatedAt   *Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name        string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PhoneNumber string     `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email       string     `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *TestUser) Reset()         { *m = TestUser{} }
func (m *TestUser) String() string { return proto.CompactTextString(m) }
func (*TestUser) ProtoMessage()    {}
func (*TestUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9e4ae6eb8aa88c, []int{1}
}
func (m *TestUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestUser.Merge(m, src)
}
func (m *TestUser) XXX_Size() int {
	return m.Size()
}
func (m *TestUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TestUser.DiscardUnknown(m)
}

var xxx_messageInfo_TestUser proto.InternalMessageInfo

func (m *TestUser) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TestUser) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TestUser) GetUpdatedAt() *Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TestUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestUser) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TestUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// TestCar for gorm test car model
type TestCar struct {
	// @inject_tag: gorm:"primary_key"
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: gorm:"not_null;type:TIMESTAMP"
	CreatedAt *Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// @inject_tag: gorm:"not_null;type:TIMESTAMP"
	UpdatedAt *Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Model     string     `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Mpg       int32      `protobuf:"varint,5,opt,name=mpg,proto3" json:"mpg,omitempty"`
}

func (m *TestCar) Reset()         { *m = TestCar{} }
func (m *TestCar) String() string { return proto.CompactTextString(m) }
func (*TestCar) ProtoMessage()    {}
func (*TestCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9e4ae6eb8aa88c, []int{2}
}
func (m *TestCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCar.Merge(m, src)
}
func (m *TestCar) XXX_Size() int {
	return m.Size()
}
func (m *TestCar) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCar.DiscardUnknown(m)
}

var xxx_messageInfo_TestCar proto.InternalMessageInfo

func (m *TestCar) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TestCar) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TestCar) GetUpdatedAt() *Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TestCar) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *TestCar) GetMpg() int32 {
	if m != nil {
		return m.Mpg
	}
	return 0
}

// TestRental for gorm test rental model
type TestRental struct {
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CarId  uint32 `protobuf:"varint,2,opt,name=car_id,json=carId,proto3" json:"car_id,omitempty"`
}

func (m *TestRental) Reset()         { *m = TestRental{} }
func (m *TestRental) String() string { return proto.CompactTextString(m) }
func (*TestRental) ProtoMessage()    {}
func (*TestRental) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9e4ae6eb8aa88c, []int{3}
}
func (m *TestRental) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestRental) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestRental.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestRental) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRental.Merge(m, src)
}
func (m *TestRental) XXX_Size() int {
	return m.Size()
}
func (m *TestRental) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRental.DiscardUnknown(m)
}

var xxx_messageInfo_TestRental proto.InternalMessageInfo

func (m *TestRental) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TestRental) GetCarId() uint32 {
	if m != nil {
		return m.CarId
	}
	return 0
}

func init() {
	proto.RegisterType((*Timestamp)(nil), "hashicorp.watchtower.oplog.test.v1.Timestamp")
	proto.RegisterType((*TestUser)(nil), "hashicorp.watchtower.oplog.test.v1.TestUser")
	proto.RegisterType((*TestCar)(nil), "hashicorp.watchtower.oplog.test.v1.TestCar")
	proto.RegisterType((*TestRental)(nil), "hashicorp.watchtower.oplog.test.v1.TestRental")
}

func init() { proto.RegisterFile("oplog_test.proto", fileDescriptor_3d9e4ae6eb8aa88c) }

var fileDescriptor_3d9e4ae6eb8aa88c = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0x3f, 0xcf, 0x93, 0x50,
	0x14, 0xc6, 0x0b, 0x2d, 0xd4, 0x9e, 0xaa, 0x69, 0x6e, 0x6a, 0x24, 0x1d, 0xb0, 0x32, 0x75, 0xf1,
	0x12, 0x75, 0x31, 0xd1, 0xa5, 0xfe, 0x19, 0x9a, 0x18, 0x07, 0x52, 0x17, 0x07, 0xc9, 0x05, 0x8e,
	0x40, 0xc2, 0xe5, 0x92, 0xcb, 0xc5, 0x7e, 0x00, 0xbf, 0x80, 0x1f, 0xcb, 0xb1, 0xa3, 0x8b, 0x89,
	0x69, 0xbf, 0x88, 0xe1, 0xd2, 0x82, 0xdb, 0x9b, 0xbc, 0xdb, 0xbb, 0x9d, 0xf3, 0x9c, 0xe7, 0xfc,
	0xe0, 0x39, 0x01, 0x58, 0x88, 0xaa, 0x10, 0x69, 0xa8, 0xb0, 0x56, 0xb4, 0x92, 0x42, 0x09, 0xe2,
	0x65, 0xac, 0xce, 0xf2, 0x58, 0xc8, 0x8a, 0x1e, 0x98, 0x8a, 0x33, 0x25, 0x0e, 0x28, 0xa9, 0xb6,
	0x51, 0x6d, 0xfb, 0xfe, 0x7c, 0xf5, 0x24, 0x15, 0x22, 0x2d, 0xd0, 0xd7, 0x1b, 0x51, 0xf3, 0xcd,
	0x57, 0x39, 0xc7, 0x5a, 0x31, 0x5e, 0x75, 0x10, 0xef, 0x03, 0xcc, 0xf6, 0x57, 0x89, 0xbc, 0x82,
	0x59, 0x3f, 0x77, 0x8c, 0xb5, 0xb1, 0x99, 0xbf, 0x58, 0xd1, 0x8e, 0x40, 0xaf, 0x04, 0xda, 0xdb,
	0x83, 0xc1, 0xec, 0xfd, 0x30, 0xe1, 0xde, 0x1e, 0x6b, 0xf5, 0xb9, 0x46, 0x49, 0x1e, 0x82, 0x99,
	0x27, 0x7a, 0xff, 0x41, 0x60, 0xe6, 0x09, 0xf9, 0x08, 0x10, 0x4b, 0x64, 0x0a, 0x93, 0x90, 0x29,
	0xc7, 0xd4, 0xdc, 0x67, 0xf4, 0xe6, 0xb7, 0xff, 0xff, 0x51, 0x17, 0xc0, 0x56, 0xb5, 0xb4, 0xa6,
	0x4a, 0xae, 0xb4, 0xf1, 0xad, 0x68, 0x17, 0xc0, 0x56, 0x11, 0x02, 0x93, 0x92, 0x71, 0x74, 0x26,
	0x6b, 0x63, 0x33, 0x0b, 0x74, 0x4d, 0x9e, 0xc2, 0xfd, 0x2a, 0x13, 0x25, 0x86, 0x65, 0xc3, 0x23,
	0x94, 0x8e, 0xa5, 0x67, 0x73, 0xad, 0x7d, 0xd2, 0x12, 0x59, 0x82, 0x85, 0x9c, 0xe5, 0x85, 0x63,
	0xeb, 0x59, 0xd7, 0x78, 0x7f, 0x0c, 0x98, 0xb6, 0x57, 0x78, 0xc7, 0xee, 0xd6, 0x11, 0x96, 0x60,
	0x71, 0x91, 0x60, 0x71, 0xb9, 0x42, 0xd7, 0x90, 0x05, 0x8c, 0x79, 0x95, 0xea, 0xf4, 0x56, 0xd0,
	0x96, 0xde, 0x1b, 0x80, 0x36, 0x5e, 0x80, 0xa5, 0x62, 0x05, 0x79, 0x0c, 0xd3, 0xa6, 0x46, 0x19,
	0xf6, 0x31, 0xed, 0xb6, 0xdd, 0x25, 0xe4, 0x11, 0xd8, 0x31, 0xd3, 0xba, 0xa9, 0x75, 0x2b, 0x66,
	0x72, 0x97, 0xbc, 0xfd, 0xfa, 0xeb, 0xe4, 0x1a, 0xc7, 0x93, 0x6b, 0xfc, 0x3d, 0xb9, 0xc6, 0xcf,
	0xb3, 0x3b, 0x3a, 0x9e, 0xdd, 0xd1, 0xef, 0xb3, 0x3b, 0xfa, 0xf2, 0x3e, 0xcd, 0x55, 0xd6, 0x44,
	0x34, 0x16, 0xdc, 0xef, 0x33, 0xf8, 0x43, 0x06, 0x3f, 0x2f, 0x15, 0xca, 0x92, 0x15, 0xbe, 0x0e,
	0xe3, 0x0f, 0xbf, 0xc2, 0xeb, 0xa1, 0x8c, 0x6c, 0xfd, 0x89, 0xbe, 0xfc, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0xe9, 0xb1, 0x0a, 0x2a, 0x03, 0x00, 0x00,
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOplogTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintOplogTest(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintOplogTest(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOplogTest(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOplogTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOplogTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOplogTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mpg != 0 {
		i = encodeVarintOplogTest(dAtA, i, uint64(m.Mpg))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintOplogTest(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOplogTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOplogTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOplogTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestRental) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestRental) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestRental) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CarId != 0 {
		i = encodeVarintOplogTest(dAtA, i, uint64(m.CarId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintOplogTest(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOplogTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovOplogTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovOplogTest(uint64(l))
	}
	return n
}

func (m *TestUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogTest(uint64(m.Id))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovOplogTest(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovOplogTest(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOplogTest(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovOplogTest(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovOplogTest(uint64(l))
	}
	return n
}

func (m *TestCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOplogTest(uint64(m.Id))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovOplogTest(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovOplogTest(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovOplogTest(uint64(l))
	}
	if m.Mpg != 0 {
		n += 1 + sovOplogTest(uint64(m.Mpg))
	}
	return n
}

func (m *TestRental) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOplogTest(uint64(m.UserId))
	}
	if m.CarId != 0 {
		n += 1 + sovOplogTest(uint64(m.CarId))
	}
	return n
}

func sovOplogTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOplogTest(x uint64) (n int) {
	return sovOplogTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOplogTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOplogTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOplogTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOplogTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpg", wireType)
			}
			m.Mpg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpg |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestRental) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOplogTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestRental: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestRental: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarId", wireType)
			}
			m.CarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOplogTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOplogTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOplogTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOplogTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOplogTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOplogTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOplogTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOplogTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOplogTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOplogTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOplogTest = fmt.Errorf("proto: unexpected end of group")
)
