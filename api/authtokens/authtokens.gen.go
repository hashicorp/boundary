// Code generated by "make api"; DO NOT EDIT.
package authtokens

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/watchtower/api"
	"github.com/hashicorp/watchtower/api/scopes"
)

type AuthToken struct {
	Id                      string            `json:"id,omitempty"`
	Scope                   *scopes.ScopeInfo `json:"scope,omitempty"`
	Token                   string            `json:"token,omitempty"`
	UserId                  string            `json:"user_id,omitempty"`
	AuthMethodId            string            `json:"auth_method_id,omitempty"`
	CreatedTime             time.Time         `json:"created_time,omitempty"`
	UpdatedTime             time.Time         `json:"updated_time,omitempty"`
	ApproximateLastUsedTime time.Time         `json:"approximate_last_used_time,omitempty"`
	ExpirationTime          time.Time         `json:"expiration_time,omitempty"`
}

type authtokenClient struct {
	client *api.Client
}

func NewAuthTokenClient(c *api.Client) *authtokenClient {
	return &authtokenClient{client: c}
}

func (c *authtokenClient) Read(ctx context.Context, authTokenId string, opt ...Option) (*AuthToken, *api.Error, error) {
	if authTokenId == "" {
		return nil, nil, fmt.Errorf("empty authTokenId value passed into Read request")
	}

	if c.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	_, apiOpts := getOpts(opt...)

	req, err := c.client.NewRequest(ctx, "GET", fmt.Sprintf("auth-tokens/%s", authTokenId), nil, apiOpts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Read request: %w", err)
	}

	resp, err := c.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new(AuthToken)
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Read response: %w", err)
	}

	return target, apiErr, nil
}

func (c *authtokenClient) Delete(ctx context.Context, authTokenId string, opt ...Option) (bool, *api.Error, error) {
	if authTokenId == "" {
		return false, nil, fmt.Errorf("empty authTokenId value passed into Delete request")
	}

	if c.client == nil {
		return false, nil, fmt.Errorf("nil client")
	}

	_, apiOpts := getOpts(opt...)

	req, err := c.client.NewRequest(ctx, "DELETE", fmt.Sprintf("auth-tokens/%s", authTokenId), nil, apiOpts...)
	if err != nil {
		return false, nil, fmt.Errorf("error creating Delete request: %w", err)
	}

	resp, err := c.client.Do(req)
	if err != nil {
		return false, nil, fmt.Errorf("error performing client request during Delete call: %w", err)
	}

	type deleteResponse struct {
		Existed bool
	}
	target := &deleteResponse{}
	apiErr, err := resp.Decode(target)
	if err != nil {
		return false, nil, fmt.Errorf("error decoding Delete response: %w", err)
	}

	return target.Existed, apiErr, nil
}

func (c *authtokenClient) List(ctx context.Context, opt ...Option) ([]AuthToken, *api.Error, error) {
	if c.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	_, apiOpts := getOpts(opt...)

	req, err := c.client.NewRequest(ctx, "GET", fmt.Sprintf("auth-tokens"), nil, apiOpts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating List request: %w", err)
	}

	resp, err := c.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during List call: %w", err)
	}

	type listResponse struct {
		Items []AuthToken
	}
	target := &listResponse{}
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding List response: %w", err)
	}

	return target.Items, apiErr, nil
}

type Option func(*options)

type options struct {
	valueMap    map[string]interface{}
	withScopeId string
}

func getDefaultOptions() options {
	return options{
		valueMap: make(map[string]interface{}),
	}
}

func getOpts(opt ...Option) (options, []api.Option) {
	opts := getDefaultOptions()
	for _, o := range opt {
		o(&opts)
	}
	var apiOpts []api.Option
	if opts.withScopeId != "" {
		apiOpts = append(apiOpts, api.WithScopeId(opts.withScopeId))
	}
	return opts, apiOpts
}

func DefaultScopeId() Option {
	return func(o *options) {
		o.withScopeId = ""
	}
}

func WithScopeId(id string) Option {
	return func(o *options) {
		o.withScopeId = id
	}
}

func WithToken(inToken string) Option {
	return func(o *options) {
		o.valueMap["token"] = inToken
	}
}

func DefaultToken() Option {
	return func(o *options) {
		o.valueMap["token"] = nil
	}
}

func WithUserId(inUserId string) Option {
	return func(o *options) {
		o.valueMap["user_id"] = inUserId
	}
}

func DefaultUserId() Option {
	return func(o *options) {
		o.valueMap["user_id"] = nil
	}
}

func WithAuthMethodId(inAuthMethodId string) Option {
	return func(o *options) {
		o.valueMap["auth_method_id"] = inAuthMethodId
	}
}

func DefaultAuthMethodId() Option {
	return func(o *options) {
		o.valueMap["auth_method_id"] = nil
	}
}

func WithApproximateLastUsedTime(inApproximateLastUsedTime time.Time) Option {
	return func(o *options) {
		o.valueMap["approximate_last_used_time"] = inApproximateLastUsedTime
	}
}

func DefaultApproximateLastUsedTime() Option {
	return func(o *options) {
		o.valueMap["approximate_last_used_time"] = nil
	}
}

func WithExpirationTime(inExpirationTime time.Time) Option {
	return func(o *options) {
		o.valueMap["expiration_time"] = inExpirationTime
	}
}

func DefaultExpirationTime() Option {
	return func(o *options) {
		o.valueMap["expiration_time"] = nil
	}
}
