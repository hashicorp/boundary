// Code generated by "make api"; DO NOT EDIT.
package scopes

import (
	"encoding/json"
	"strings"
	"time"

	"github.com/fatih/structs"

	"github.com/hashicorp/watchtower/api"
	"github.com/hashicorp/watchtower/api/internal/strutil"
)

type Org struct {
	Client *api.Client `json:"-"`

	defaultFields []string

	// The ID of the Org
	// Output only.
	Id string `json:"id,omitempty"`
	// Optional name for identification purposes
	Name *string `json:"name,omitempty"`
	// Optional user-set descripton for identification purposes
	Description *string `json:"description,omitempty"`
	// The time this resource was created
	// Output only.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// The time this resource was last updated.
	// Output only.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
}

func (s *Org) SetDefault(key string) {
	lowerKey := strings.ToLower(key)
	validMap := map[string]string{"createdtime": "created_time", "description": "description", "id": "id", "name": "name", "updatedtime": "updated_time"}
	for k, v := range validMap {
		if k == lowerKey || v == lowerKey {
			s.defaultFields = strutil.AppendIfMissing(s.defaultFields, v)
			return
		}
	}
}

func (s *Org) UnsetDefault(key string) {
	lowerKey := strings.ToLower(key)
	validMap := map[string]string{"createdtime": "created_time", "description": "description", "id": "id", "name": "name", "updatedtime": "updated_time"}
	for k, v := range validMap {
		if k == lowerKey || v == lowerKey {
			s.defaultFields = strutil.StrListDelete(s.defaultFields, v)
			return
		}
	}
}

func (s Org) MarshalJSON() ([]byte, error) {
	m := structs.Map(s)
	if m == nil {
		m = make(map[string]interface{})
	}
	for _, k := range s.defaultFields {
		m[k] = nil
	}
	return json.Marshal(m)
}
