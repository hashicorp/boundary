// Code generated by "make api"; DO NOT EDIT.
package roles

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/watchtower/api"
	"github.com/hashicorp/watchtower/api/scopes"
)

type Role struct {
	Id           string            `json:"id,omitempty"`
	Scope        *scopes.ScopeInfo `json:"scope,omitempty"`
	Name         string            `json:"name,omitempty"`
	Description  string            `json:"description,omitempty"`
	CreatedTime  time.Time         `json:"created_time,omitempty"`
	UpdatedTime  time.Time         `json:"updated_time,omitempty"`
	Disabled     bool              `json:"disabled,omitempty"`
	GrantScopeId string            `json:"grant_scope_id,omitempty"`
	Version      uint32            `json:"version,omitempty"`
	PrincipalIds []string          `json:"principal_ids,omitempty"`
	Principals   []*Principal      `json:"principals,omitempty"`
	GrantStrings []string          `json:"grant_strings,omitempty"`
	Grants       []*Grant          `json:"grants,omitempty"`
}

type RoleClient struct {
	client *api.Client
}

func New(c *api.Client) *RoleClient {
	return &RoleClient{client: c}
}

func (s *RoleClient) Read(ctx context.Context, roleId string, opts ...api.Option) (*Role, *api.Error, error) {

	if roleId == "" {
		return nil, nil, fmt.Errorf("empty roleId value passed into List request")
	}

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "GET", fmt.Sprintf("roles/%s", roleId), nil, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Read request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new(Role)
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Read response: %w", err)
	}

	return target, apiErr, nil
}

func (s *RoleClient) List(ctx context.Context, opts ...api.Option) ([]Role, *api.Error, error) {

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "GET", fmt.Sprintf("roles"), nil, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating List request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during List call: %w", err)
	}

	type listResponse struct {
		Items []Role
	}
	target := &listResponse{}
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding List response: %w", err)
	}

	return target.Items, apiErr, nil
}

func (s *RoleClient) Create(ctx context.Context, opts ...api.Option) (*Role, *api.Error, error) {

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}
	r := Role{}
	req, err := s.client.NewRequest(ctx, "POST", fmt.Sprintf("roles"), r, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Create request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new(Role)
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Create response: %w", err)
	}

	return target, apiErr, nil
}

func (s *RoleClient) Delete(ctx context.Context, roleId string, opts ...api.Option) (bool, *api.Error, error) {

	if roleId == "" {
		return false, nil, fmt.Errorf("empty roleId value passed into List request")
	}

	if s.client == nil {
		return false, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "DELETE", fmt.Sprintf("roles/%s", roleId), nil, opts...)
	if err != nil {
		return false, nil, fmt.Errorf("error creating Delete request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return false, nil, fmt.Errorf("error performing client request during Delete call: %w", err)
	}

	type deleteResponse struct {
		Existed bool
	}
	target := &deleteResponse{}
	apiErr, err := resp.Decode(target)
	if err != nil {
		return false, nil, fmt.Errorf("error decoding Delete response: %w", err)
	}

	return target.Existed, apiErr, nil
}
