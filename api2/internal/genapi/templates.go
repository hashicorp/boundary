package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"
)

func fillTemplates() {
	for _, in := range inputStructs {
		outBuf := new(bytes.Buffer)
		input := struct {
			Name    string
			Package string
			Fields  []fieldInfo
		}{
			Name:    in.generatedStructure.name,
			Package: in.generatedStructure.pkg,
			Fields:  in.generatedStructure.fields,
		}

		structTemplate.Execute(outBuf, input)

		for _, t := range in.templates {
			t.Execute(outBuf, input)
		}

		outFile, err := filepath.Abs(in.outFile)
		if err != nil {
			fmt.Printf("error opening file %q: %v\n", in.outFile, err)
			os.Exit(1)
		}
		if err := ioutil.WriteFile(outFile, outBuf.Bytes(), 0644); err != nil {
			fmt.Printf("error writing file %q: %v\n", outFile, err)
			os.Exit(1)
		}
	}
}

func readTemplate(path string) *template.Template {
	return template.Must(template.New("").Parse(
		fmt.Sprint(`
func (s *{{ .Name }}Client) Read(ctx context.Context, id string, opts... api2.Option) (*{{ .Name }}, *api.Error, error) {
	if id == "" {
		return nil, nil, fmt.Errorf("empty ID value passed into Read request")
	}

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "GET", fmt.Sprintf("%s/%s", "`, path, `", id), nil, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Read request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new({{ .Name }})
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Read repsonse: %w", err)
	}

	return target, apiErr, nil
}
`)))
}

func createTemplate(path string) *template.Template {
	return template.Must(template.New("").Parse(
		fmt.Sprint(`
func (s *{{ .Name }}Client) Create(ctx context.Context, opts... api2.Option) (*{{ .Name }}, *api.Error, error) {
	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}
	r := User{}
	req, err := s.client.NewRequest(ctx, "POST", "`, path, `", r, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Create request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new({{ .Name }})
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Create repsonse: %w", err)
	}

	return target, apiErr, nil
}
`)))
}

var structTemplate = template.Must(template.New("").Parse(
	fmt.Sprint(`// Code generated by "make api"; DO NOT EDIT.
package {{ .Package }}

import (
	"context"
	"encoding/json"
	"strings"

	"github.com/fatih/structs"

	"github.com/hashicorp/watchtower/api"
)

type {{ .Name }} struct {
{{ range .Fields }} {{ .Name }}  {{ .FieldType }} `, "`json:\"{{ .ProtoName }},omitempty\"`", `
{{ end }}
}
`)))

var clientTemplate = template.Must(template.New("").Parse(
	fmt.Sprint(`
type {{ .Name }}Client struct {
	client *api.Client
}

func New(c *api.Client) *{{ .Name }}Client {
	return &{{ .Name }}Client{ client: c }
}
`)))
