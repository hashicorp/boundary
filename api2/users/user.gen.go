// Code generated by "make api"; DO NOT EDIT.
package users

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/watchtower/api"
	"github.com/hashicorp/watchtower/internal/gen/controller/api/resources/scopes"
)

type User struct {
	Id          string           `json:"id,omitempty"`
	Scope       scopes.ScopeInfo `json:"scope,omitempty"`
	Name        string           `json:"name,omitempty"`
	Description string           `json:"description,omitempty"`
	CreatedTime time.Time        `json:"created_time,omitempty"`
	UpdatedTime time.Time        `json:"updated_time,omitempty"`
	Disabled    bool             `json:"disabled,omitempty"`
}

type UserClient struct {
	client *api.Client
}

func New(c *api.Client) *UserClient {
	return &UserClient{client: c}
}

func (s *UserClient) Read(ctx context.Context, id string, opts ...api.Option) (*User, *api.Error, error) {
	if id == "" {
		return nil, nil, fmt.Errorf("empty ID value passed into Read request")
	}

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "GET", fmt.Sprintf("%s/%s", "users", id), nil, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Read request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new(User)
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Read repsonse: %w", err)
	}

	return target, apiErr, nil
}

func (s *UserClient) Create(ctx context.Context, opts ...api.Option) (*User, *api.Error, error) {
	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}
	r := User{}
	req, err := s.client.NewRequest(ctx, "POST", "users", r, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Create request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new(User)
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Create repsonse: %w", err)
	}

	return target, apiErr, nil
}
