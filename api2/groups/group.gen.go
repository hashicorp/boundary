// Code generated by "make api"; DO NOT EDIT.
package groups

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/watchtower/api"
	"github.com/hashicorp/watchtower/api2/scopes"
)

type Group struct {
	Id          string            `json:"id,omitempty"`
	Scope       *scopes.ScopeInfo `json:"scope,omitempty"`
	Name        string            `json:"name,omitempty"`
	Description string            `json:"description,omitempty"`
	CreatedTime *time.Time        `json:"created_time,omitempty"`
	UpdatedTime *time.Time        `json:"updated_time,omitempty"`
	Disabled    bool              `json:"disabled,omitempty"`
	Version     uint32            `json:"version,omitempty"`
	MemberIds   string            `json:"member_ids,omitempty"`
	Members     *Member           `json:"members,omitempty"`
}

type GroupClient struct {
	client *api.Client
}

func New(c *api.Client) *GroupClient {
	return &GroupClient{client: c}
}

func (s *GroupClient) Read(ctx context.Context, groupId string, opts ...api.Option) (*Group, *api.Error, error) {

	if groupId == "" {
		return nil, nil, fmt.Errorf("empty groupId value passed into List request")
	}

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "GET", fmt.Sprintf("groups/%s", groupId), nil, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Read request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new(Group)
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Read response: %w", err)
	}

	return target, apiErr, nil
}

func (s *GroupClient) List(ctx context.Context, opts ...api.Option) ([]Group, *api.Error, error) {

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "GET", fmt.Sprintf("groups"), nil, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating List request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during List call: %w", err)
	}

	type listResponse struct {
		Items []Group
	}
	target := &listResponse{}
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding List response: %w", err)
	}

	return target.Items, apiErr, nil
}

func (s *GroupClient) Create(ctx context.Context, opts ...api.Option) (*Group, *api.Error, error) {

	if s.client == nil {
		return nil, nil, fmt.Errorf("nil client")
	}
	r := Group{}
	req, err := s.client.NewRequest(ctx, "POST", fmt.Sprintf("groups"), r, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("error creating Create request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, nil, fmt.Errorf("error performing client request during Read call: %w", err)
	}

	target := new(Group)
	apiErr, err := resp.Decode(target)
	if err != nil {
		return nil, nil, fmt.Errorf("error decoding Create response: %w", err)
	}

	return target, apiErr, nil
}

func (s *GroupClient) Delete(ctx context.Context, groupId string, opts ...api.Option) (bool, *api.Error, error) {

	if groupId == "" {
		return false, nil, fmt.Errorf("empty groupId value passed into List request")
	}

	if s.client == nil {
		return false, nil, fmt.Errorf("nil client")
	}

	req, err := s.client.NewRequest(ctx, "DELETE", fmt.Sprintf("groups/%s", groupId), nil, opts...)
	if err != nil {
		return false, nil, fmt.Errorf("error creating Delete request: %w", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return false, nil, fmt.Errorf("error performing client request during Delete call: %w", err)
	}

	type deleteResponse struct {
		Existed bool
	}
	target := &deleteResponse{}
	apiErr, err := resp.Decode(target)
	if err != nil {
		return false, nil, fmt.Errorf("error decoding Delete response: %w", err)
	}

	return target.Existed, apiErr, nil
}
